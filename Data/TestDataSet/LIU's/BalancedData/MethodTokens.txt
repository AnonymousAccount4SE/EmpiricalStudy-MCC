ReturnStatement return VariableName booleanVar
VariableName booleanVar Operator = VariableName booleanVar
SimpleType DcDateElement VariableName dcdateelementVar Name OdfElement MethodName findFirstChildNode TypeLiteral class VariableName officemetaelementVar IfStatement if VariableName dcdateelementVar Operator != NullLiteral null ReturnStatement return MethodName stringToCalendar VariableName dcdateelementVar MethodName getTextContent ReturnStatement return NullLiteral null
VariableName odfpackageVar MethodName insert VariableName inputstreamVar VariableName stringVar VariableName stringVar MethodName configureInsertedImage VariableName stringVar
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
VariableName stringVar Operator = MethodName normalizeDocumentPath VariableName stringVar ReturnStatement return VariableName stringVar
SimpleType StreamHelper VariableName streamhelperVar New new SimpleType StreamHelper VariableName inputstreamVar VariableName outputstreamVar VariableName streamhelperVar MethodName stream
VariableName stringVar Operator = MethodName normalizeDirectoryPath VariableName stringVar ReturnStatement return VariableName mapVar MethodName get VariableName stringVar
ReturnStatement return VariableName stringVar
SimpleType OdfPackage VariableName odfpackageVar VariableName odfpackagedocumentVar MethodName getPackage IfStatement if VariableName odfpackagedocumentVar MethodName isRootDocument EnhancedForStatement for SimpleType String VariableName stringVar VariableName odfpackageVar MethodName getCachedDoms MethodName keySet VariableName odfpackageVar MethodName insert VariableName odfpackageVar MethodName getCachedDom VariableName xmlFilePath VariableName xmlFilePath StringLiteral stringLiteral SimpleType String VariableName stringVar VariableName odfpackagedocumentVar MethodName getDocumentPath EnhancedForStatement for SimpleType String VariableName stringVar VariableName odfpackageVar MethodName getCachedDoms MethodName keySet IfStatement if VariableName xmlFilePath MethodName startsWith VariableName parentDocumentPath VariableName odfpackageVar MethodName insert VariableName odfpackageVar MethodName getCachedDom VariableName xmlFilePath VariableName xmlFilePath StringLiteral stringLiteral
ReturnStatement return Operator ! VariableName booleanVar
VariableName zookeeperdiscoveryimplVar MethodName reconnect
SimpleType String VariableName stringVar VariableName zkignitepathsVar MethodName joinEventDataPathForJoined VariableName zkdiscoverynodejoineventdataVar MethodName eventId IfStatement if VariableName igniteloggerVar MethodName isDebugEnabled VariableName igniteloggerVar MethodName debug StringLiteral stringLiteral Operator + VariableName stringVar CharacterLiteral charLiteral MethodName deleteMultiplePartsAsync VariableName zkruntimestateVar VariableName zkClient VariableName stringVar VariableName zkdiscoverynodejoineventdataVar VariableName dataForJoinedPartCnt
ParameterizedType Node VariableName nodeVar VariableName nodeVar VariableName next ReturnStatement return VariableName nodeVar Operator == VariableName nodeVar MethodName first VariableName nodeVar
ParameterizedType Node VariableName nodeVar VariableName nodeVar VariableName prev ReturnStatement return VariableName nodeVar Operator == VariableName nodeVar MethodName last VariableName nodeVar
ReturnStatement return Operator ! VariableName booleanVar
ReturnStatement return VariableName ignitedatastreamerVar
SimpleType String VariableName stringVar VariableName throwableVar MethodName getMessage SimpleType Throwable VariableName throwableVar VariableName throwableVar MethodName getCause WhileStatement while VariableName throwableVar Operator != NullLiteral null IfStatement if VariableName throwableVar MethodName getClass MethodName getCanonicalName MethodName equals StringLiteral stringLiteral VariableName stringVar Operator = VariableName throwableVar MethodName getMessage BreakStatement break VariableName throwableVar Operator = VariableName throwableVar MethodName getCause ReturnStatement return VariableName stringVar
VariableName ctx MethodName cache MethodName context MethodName database MethodName checkpointReadLock
VariableName ctx MethodName cache MethodName context MethodName database MethodName checkpointReadUnlock
VariableName ignitecheckedexceptionVar Operator = VariableName ignitecheckedexceptionVar EnhancedForStatement for SimpleType AffinityReadyFuture VariableName affinityreadyfutureVar VariableName concurrentmapVar MethodName values VariableName fut MethodName onDone VariableName ignitecheckedexceptionVar
IfStatement if VariableName igniteloggerVar MethodName isDebugEnabled VariableName igniteloggerVar MethodName debug StringLiteral stringLiteral Operator + VariableName uuidVar CharacterLiteral charLiteral MethodName registerResponse VariableName uuidVar
ReturnStatement return VariableName exchangeactionsVar Operator != NullLiteral null Operator && VariableName exchangeactionsVar MethodName cacheStopped VariableName intVar
SimpleType GridNearTxQueryResultsEnlistFuture VariableName gridneartxqueryresultsenlistfutureVar SimpleType GridNearTxQueryResultsEnlistFuture VariableName ctx MethodName mvcc MethodName versionedFuture VariableName gridneartxqueryresultsenlistresponseVar MethodName version VariableName gridneartxqueryresultsenlistresponseVar MethodName futureId IfStatement if VariableName gridneartxqueryresultsenlistfutureVar Operator != NullLiteral null VariableName gridneartxqueryresultsenlistfutureVar MethodName onResult VariableName uuidVar VariableName gridneartxqueryresultsenlistresponseVar
ReturnStatement return VariableName byteVar Operator & VariableName byteVar Operator != NumberLiteral numberLiteral
ReturnStatement return VariableName cacheentryeventserializablefilterVar
IfStatement if VariableName cacheentryeventfilterVar Operator == NullLiteral null AssertStatement assert VariableName factoryVar Operator != NullLiteral null ParameterizedType Factory VariableName factoryVar VariableName factoryVar VariableName cacheentryeventfilterVar Operator = VariableName factory MethodName create IfStatement if VariableName byteVar Operator != NumberLiteral numberLiteral VariableName cacheentryeventfilterVar Operator = New new SimpleType JCacheQueryRemoteFilter VariableName cacheentryeventfilterVar VariableName byteVar ReturnStatement return VariableName cacheentryeventfilterVar
ReturnStatement return VariableName TYPE_BYTE_ARR
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
IfStatement if VariableName factoryVar Operator == NullLiteral null ReturnStatement return NullLiteral null ParameterizedType Collection VariableName collectionVar New new ParameterizedType ArrayList VariableName factoryVar VariableName length EnhancedForStatement for ParameterizedType Factory VariableName factoryVar VariableName factoryVar SimpleType CacheStoreSessionListener VariableName cachestoresessionlistenerVar VariableName factory MethodName create IfStatement if VariableName lsnr Operator != NullLiteral null VariableName gridkernalcontextVar MethodName resource MethodName injectGeneric VariableName lsnr IfStatement if VariableName lsnr Instanceof instanceof SimpleType LifecycleAware SimpleType LifecycleAware VariableName lsnr MethodName start VariableName collectionVar MethodName add VariableName lsnr ReturnStatement return VariableName collectionVar
VariableName cachesondisconnectVar Operator = New new SimpleType CachesOnDisconnect VariableName gridkernalcontextVar MethodName state MethodName clusterState New new ParameterizedType HashMap VariableName concurrentmapVar New new ParameterizedType HashMap VariableName concurrentmapVar VariableName concurrentmapVar MethodName clear VariableName concurrentmapVar MethodName clear VariableName concurrentmapVar MethodName clear VariableName mapVar Operator = NullLiteral null
ArrayType byte[] VariableName byte[]Var VariableName stringVar MethodName getBytes VariableName StandardCharsets VariableName UTF_8 Modifier final SimpleType IndexItem VariableName indexitemVar VariableName metatreeVar MethodName remove New new SimpleType IndexItem VariableName byte[]Var NumberLiteral numberLiteral IfStatement if VariableName indexitemVar Operator != NullLiteral null IfStatement if VariableName reuselistVar Operator == NullLiteral null VariableName pagememoryVar MethodName freePage VariableName intVar VariableName indexitemVar VariableName pageId ReturnStatement return VariableName indexitemVar Operator != NullLiteral null New new SimpleType RootPage New new SimpleType FullPageId VariableName indexitemVar VariableName pageId VariableName intVar BooleanLiteral false NullLiteral null
ReturnStatement return Name GridUnsafe MethodName getLong VariableName longVar Operator + VariableName intVar
SimpleType CacheOperationContext VariableName cacheoperationcontextVar VariableName ctx MethodName operationContextPerCall ReturnStatement return SimpleType V MethodName updateAllInternal VariableName DELETE Name Collections MethodName singleton VariableName kVar NullLiteral null NullLiteral null MethodName expiryPerCall BooleanLiteral true BooleanLiteral false NullLiteral null VariableName ctx MethodName writeThrough VariableName ctx MethodName readThrough VariableName cacheoperationcontextVar Operator != NullLiteral null Operator && VariableName cacheoperationcontextVar MethodName isKeepBinary
ReturnStatement return MethodName removeAllAsync0 Name Collections MethodName singletonList VariableName kVar BooleanLiteral true BooleanLiteral false NullLiteral null
TryStatement try VariableName gridfutureadapterVar MethodName onDone VariableName igniteclosureVar MethodName apply VariableName igniteinternalfutureVar CatchClause catch SimpleType GridClosureException VariableName gridclosureexceptionVar VariableName gridfutureadapterVar MethodName onDone VariableName e MethodName unwrap CatchClause catch UnionType RuntimeException|Error VariableName runtimeexception|errorVar VariableName gridfutureadapterVar MethodName onDone VariableName e ThrowStatement throw VariableName e
ReturnStatement return VariableName stripe[]Var VariableName length
SynchronizedStatement synchronized ThisExpression this AssertStatement assert VariableName booleanVar ThisExpression this AssertStatement assert Operator ! VariableName booleanVar ThisExpression this VariableName booleanVar Operator = BooleanLiteral true IfStatement if VariableName ignitebitupleVar Operator != NullLiteral null ParameterizedType IgniteInClosure VariableName igniteinclosureVar VariableName ignitebitupleVar MethodName get2 AssertStatement assert VariableName c Operator != NullLiteral null VariableName c MethodName apply BooleanLiteral false VariableName ignitebitupleVar Operator = NullLiteral null MethodName notifyAll
IfStatement if VariableName semaphoreVar Operator != NullLiteral null VariableName semaphoreVar MethodName release NumberLiteral numberLiteral
ReturnStatement return NullLiteral null
SimpleType String VariableName stringVar MethodName parseIdentifier VariableName sqllexerVar PrimitiveType boolean VariableName booleanVar BooleanLiteral false SimpleType SqlLexerToken VariableName sqllexertokenVar VariableName sqllexerVar MethodName lookAhead IfStatement if MethodName matchesKeyword VariableName sqllexertokenVar VariableName ASC Operator || MethodName matchesKeyword VariableName sqllexertokenVar VariableName DESC VariableName sqllexerVar MethodName shift IfStatement if MethodName matchesKeyword VariableName sqllexerVar VariableName DESC VariableName booleanVar Operator = BooleanLiteral true MethodName addColumn VariableName sqllexerVar New new SimpleType SqlIndexColumn VariableName stringVar VariableName booleanVar
IfStatement if VariableName gridkernalcontextVar Operator != NullLiteral null IfStatement if VariableName gridjobworkerVar Operator == NullLiteral null VariableName gridjobworkerVar Operator = VariableName gridkernalcontextVar MethodName job MethodName activeJob VariableName igniteuuidVar IfStatement if VariableName gridjobworkerVar Operator != NullLiteral null VariableName gridjobworkerVar MethodName execute
PrimitiveType int VariableName intVar NumberLiteral numberLiteral EnhancedForStatement for ParameterizedType Collection VariableName collectionVar VariableName mapVar MethodName values SimpleType ClusterNode VariableName clusternodeVar Name F MethodName first VariableName nodes IfStatement if VariableName first Operator != NullLiteral null VariableName intVar Operator += VariableName first MethodName metrics MethodName getTotalCpus ReturnStatement return VariableName intVar
ReturnStatement return VariableName aVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName visorigfsmetricsVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
IfStatement if VariableName doubleVar Operator < NumberLiteral numberLiteral VariableName doubleVar Operator = VariableName visorigfsprofileruniformitycountersVar MethodName calc ReturnStatement return VariableName doubleVar
ReturnStatement return VariableName visorigfsprofileruniformitycountersVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName visorbasicconfigurationVar
ReturnStatement return VariableName visormetricsconfigurationVar
ReturnStatement return VariableName visorspisconfigurationVar
ReturnStatement return VariableName visorpeertopeerconfigurationVar
ReturnStatement return VariableName visorlifecycleconfigurationVar
ReturnStatement return VariableName visorexecutorserviceconfigurationVar
ReturnStatement return VariableName visorsegmentationconfigurationVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName int[]Var
ReturnStatement return VariableName visorrestconfigurationVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName propertiesVar
ReturnStatement return VariableName visoratomicconfigurationVar
ReturnStatement return VariableName visortransactionconfigurationVar
ReturnStatement return VariableName visormemoryconfigurationVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName listVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName segmentationpolicyVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName integerVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName cacherebalancemodeVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName mapVar MethodName keySet
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName integerVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName integerVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName visorcachemetricsVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName uuidVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName uuidVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ParameterizedType Set VariableName setVar New new ParameterizedType LinkedHashSet EnhancedForStatement for ParameterizedType Holder VariableName holderVar VariableName gridconcurrentskiplistsetexVar VariableName setVar MethodName add VariableName holder VariableName entry ReturnStatement return Name Collections MethodName unmodifiableCollection VariableName setVar
MethodName ensureOpen SimpleType GridLuceneFile VariableName gridlucenefileVar VariableName mapVar MethodName get VariableName stringVar IfStatement if VariableName gridlucenefileVar Operator == NullLiteral null ThrowStatement throw New new SimpleType FileNotFoundException VariableName stringVar VariableName mapVar MethodName put VariableName stringVar VariableName gridlucenefileVar VariableName mapVar MethodName remove VariableName stringVar
ParameterizedType Class VariableName classVar MethodName findLoadedClass VariableName stringVar IfStatement if VariableName classVar Operator == NullLiteral null TryStatement try VariableName classVar Operator = MethodName findClass VariableName stringVar CatchClause catch SimpleType ClassNotFoundException VariableName classnotfoundexceptionVar ThrowStatement throw VariableName e CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType ClassNotFoundException StringLiteral stringLiteral Operator + VariableName stringVar VariableName e ReturnStatement return VariableName classVar
SimpleType URL VariableName urlVar MethodName findResource VariableName stringVar TryStatement try ReturnStatement return VariableName urlVar Operator != NullLiteral null VariableName urlVar MethodName openStream NullLiteral null CatchClause catch SimpleType IOException VariableName ioexceptionVar ReturnStatement return NullLiteral null
ReturnStatement return VariableName integerVar
ReturnStatement return VariableName x VariableName x
ReturnStatement return VariableName datasettrainerVar MethodName fit VariableName datasetbuilderVar MethodName getNewExtractor VariableName preprocessorVar
IfStatement if VariableName mapVar Operator == NullLiteral null Operator && VariableName mapVar Operator == NullLiteral null Operator && MethodName getCamelContext Operator != NullLiteral null PrimitiveType int VariableName intVar Name CamelContextHelper MethodName getMaximumSimpleCacheSize MethodName getCamelContext IfStatement if VariableName maxSize Operator > NumberLiteral numberLiteral VariableName mapVar Operator = Name LRUCacheFactory MethodName newLRUCache NumberLiteral numberLiteral VariableName maxSize BooleanLiteral false VariableName mapVar Operator = Name LRUCacheFactory MethodName newLRUCache NumberLiteral numberLiteral VariableName maxSize BooleanLiteral false Name LOG MethodName debug StringLiteral stringLiteral VariableName maxSize Name LOG MethodName debug StringLiteral stringLiteral
ReturnStatement return VariableName endpointVar MethodName getEndpointUri
ReturnStatement return Name ObjectHelper MethodName className VariableName loadbalancerVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName camelcontextVar MethodName getName
SimpleType String VariableName stringVar VariableName routeVar MethodName getId IfStatement if VariableName stringVar Operator == NullLiteral null VariableName stringVar Operator = VariableName stringVar ReturnStatement return VariableName stringVar
ReturnStatement return New new SimpleType WebsocketComponentBuilderImpl
EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar ThisExpression this VariableName listVar MethodName add New new SimpleType SNIHostName VariableName sniHostName
IfStatement if Name LOG MethodName isDebugEnabled Operator && VariableName mapVar Instanceof instanceof SimpleType LRUCache SimpleType LRUCache VariableName lrucacheVar SimpleType LRUCache VariableName IntrospectionSupport VariableName mapVar Name LOG MethodName debug StringLiteral stringLiteral VariableName localCache MethodName size VariableName localCache MethodName getHits VariableName localCache MethodName getMisses VariableName localCache MethodName getEvicted Name CACHE MethodName clear
IfStatement if MethodName isGzip VariableName stringVar ReturnStatement return New new SimpleType GZIPInputStream VariableName inputstreamVar ReturnStatement return VariableName inputstreamVar
IfStatement if Operator ! VariableName predicateVar MethodName matches VariableName exchangeVar IfStatement if VariableName stringVar Operator == NullLiteral null ThrowStatement throw New new SimpleType AssertionError VariableName predicateVar Operator + StringLiteral stringLiteral VariableName exchangeVar ThrowStatement throw New new SimpleType AssertionError VariableName stringVar Operator + VariableName predicateVar StringLiteral stringLiteral VariableName exchangeVar
ReturnStatement return VariableName streamcachingstrategyVar MethodName getBufferSize
IfStatement if VariableName stringVar Operator != NullLiteral null IfStatement if ThisExpression this VariableName setVar Operator == NullLiteral null ThisExpression this VariableName setVar Operator = New new ParameterizedType HashSet ThisExpression this VariableName setVar MethodName add VariableName stringVar ReturnStatement return ThisExpression this
ReturnStatement return New new SimpleType BytesSource VariableName byte[]Var
ReturnStatement return New new SimpleType StringSource VariableName stringVar
ReturnStatement return New new SimpleType DOMSource VariableName documentVar
SimpleType Transformer VariableName transformerVar VariableName messageVar MethodName getExchange MethodName getContext MethodName resolveTransformer VariableName datatypeVar VariableName datatypeVar ReturnStatement return MethodName applyTransformer VariableName transformerVar VariableName messageVar VariableName datatypeVar VariableName datatypeVar
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return VariableName booleanVar
IfStatement if VariableName objectVar Operator != NullLiteral null ReturnStatement return VariableName objectVar MethodName getClass MethodName getCanonicalName ReturnStatement return NullLiteral null
IfStatement if Name ObjectHelper MethodName isEmpty VariableName stringVar ReturnStatement return VariableName stringVar ReturnStatement return VariableName stringVar MethodName length Operator <= VariableName intVar VariableName stringVar VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName intVar
ReturnStatement return Name Builder MethodName bodyAs VariableName classVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ThisExpression this VariableName intVar Operator = VariableName intVar
IfStatement if VariableName objectVar Instanceof instanceof SimpleType DataValue ReturnStatement return SimpleType DataValue VariableName objectVar IfStatement if VariableName objectVar Instanceof instanceof SimpleType Variant ReturnStatement return New new SimpleType DataValue SimpleType Variant VariableName objectVar VariableName StatusCode VariableName GOOD NullLiteral null NullLiteral null ReturnStatement return New new SimpleType DataValue New new SimpleType Variant VariableName objectVar VariableName StatusCode VariableName GOOD NullLiteral null NullLiteral null
ThisExpression this VariableName messageVar Operator = VariableName messageVar
ReturnStatement return VariableName amazondynamodbstreamsVar
ReturnStatement return VariableName infinispancustomlistenerVar Operator != NullLiteral null
SimpleType Object VariableName objectVar MethodName lookupBean IfStatement if VariableName objectVar Operator != NullLiteral null IfStatement if VariableName objectVar Instanceof instanceof SimpleType Class VariableName objectVar Operator = VariableName camelcontextVar MethodName getInjector MethodName newInstance ParameterizedType Class VariableName objectVar ReturnStatement return VariableName objectVar IfStatement if VariableName classVar Operator == NullLiteral null VariableName classVar Operator = VariableName camelcontextVar MethodName getClassResolver MethodName resolveClass VariableName stringVar IfStatement if VariableName classVar Operator == NullLiteral null ThrowStatement throw New new SimpleType NoSuchBeanException VariableName stringVar ReturnStatement return VariableName camelcontextVar MethodName getInjector MethodName newInstance VariableName classVar
ReturnStatement return MethodName getOperations VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ThisExpression this VariableName intVar Operator = VariableName intVar
ReturnStatement return VariableName intVar
ThisExpression this VariableName intVar Operator = VariableName intVar
IfStatement if VariableName stringVar Operator == NullLiteral null VariableName stringVar Operator = Name Charset MethodName defaultCharset MethodName name Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar IfStatement if Operator ! Name Charset MethodName isSupported VariableName stringVar ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral ReturnStatement return Name Charset MethodName forName VariableName stringVar
ReturnStatement return VariableName listVar
IfStatement if VariableName connectionfactoryVar Operator == NullLiteral null VariableName connectionfactoryVar Operator = MethodName createConnectionFactory ReturnStatement return VariableName connectionfactoryVar
IfStatement if VariableName connectionfactoryVar Operator == NullLiteral null VariableName connectionfactoryVar Operator = MethodName createListenerConnectionFactory ReturnStatement return VariableName connectionfactoryVar
IfStatement if VariableName connectionfactoryVar Operator == NullLiteral null VariableName connectionfactoryVar Operator = MethodName createTemplateConnectionFactory ReturnStatement return VariableName connectionfactoryVar
IfStatement if VariableName platformtransactionmanagerVar Operator == NullLiteral null Operator && MethodName isTransacted Operator && MethodName isLazyCreateTransactionManager VariableName platformtransactionmanagerVar Operator = MethodName createTransactionManager ReturnStatement return VariableName platformtransactionmanagerVar
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName add VariableName cdieventconsumerVar
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName remove VariableName cdieventconsumerVar
SimpleType ExecutorService VariableName executorserviceVar ThisExpression this VariableName executorserviceVar IfStatement if VariableName executorserviceVar Operator != NullLiteral null Operator && ThisExpression this MethodName isRunAllowed VariableName executorserviceVar MethodName execute ThisExpression this MethodName getAsyncProcessor MethodName process VariableName exchangeVar VariableName doneSync IfStatement if VariableName exchangeVar MethodName getException Operator != NullLiteral null MethodName getExceptionHandler MethodName handleException StringLiteral stringLiteral VariableName exchangeVar VariableName exchangeVar MethodName getException VariableName asynccallbackVar MethodName done VariableName doneSync ReturnStatement return BooleanLiteral false Name LOG MethodName warn StringLiteral stringLiteral VariableName exchangeVar VariableName asynccallbackVar MethodName done BooleanLiteral true ReturnStatement return BooleanLiteral true
SimpleType PutRecordRequest VariableName putrecordrequestVar MethodName createRequest VariableName exchangeVar Name LOG MethodName trace StringLiteral stringLiteral VariableName putrecordrequestVar VariableName exchangeVar SimpleType PutRecordResponse VariableName putrecordresponseVar MethodName getEndpoint MethodName getClient MethodName putRecord VariableName putrecordrequestVar Name LOG MethodName trace StringLiteral stringLiteral VariableName putrecordresponseVar SimpleType Message VariableName messageVar MethodName getMessageForResponse VariableName exchangeVar VariableName messageVar MethodName setHeader VariableName KinesisFirehose2Constants VariableName RECORD_ID VariableName putrecordresponseVar MethodName recordId
TryStatement try ThisExpression this VariableName readwritelockVar MethodName writeLock MethodName lock ReturnStatement return Name HdfsInputStream MethodName createInputStream VariableName filestatusVar MethodName getPath MethodName toString VariableName hdfsinfofactoryVar ThisExpression this VariableName readwritelockVar MethodName writeLock MethodName unlock
ReturnStatement return VariableName as2encryptionalgorithmVar
IfStatement if VariableName camelcontextVar Operator != NullLiteral null Operator && VariableName stringVar Operator != NullLiteral null SimpleType PrivateKey VariableName privatekeyVar VariableName camelcontextVar MethodName getRegistry MethodName lookupByNameAndType VariableName stringVar TypeLiteral class IfStatement if VariableName pk Operator != NullLiteral null MethodName setPrivateKey VariableName pk IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
IfStatement if VariableName camelcontextVar Operator != NullLiteral null Operator && VariableName stringVar Operator != NullLiteral null SimpleType PublicKey VariableName publickeyVar VariableName camelcontextVar MethodName getRegistry MethodName lookupByNameAndType VariableName stringVar TypeLiteral class IfStatement if VariableName pk Operator != NullLiteral null MethodName setPublicKey VariableName pk IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
IfStatement if VariableName camelcontextVar Operator != NullLiteral null Operator && VariableName stringVar Operator != NullLiteral null SimpleType Certificate VariableName certificateVar VariableName camelcontextVar MethodName getRegistry MethodName lookupByNameAndType VariableName stringVar TypeLiteral class IfStatement if VariableName certificateVar Operator != NullLiteral null MethodName setCertificate VariableName certificateVar IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
IfStatement if VariableName camelcontextVar Operator != NullLiteral null Operator && VariableName stringVar Operator != NullLiteral null SimpleType KeyStore VariableName keystoreVar VariableName camelcontextVar MethodName getRegistry MethodName lookupByNameAndType VariableName stringVar TypeLiteral class IfStatement if VariableName keystoreVar Operator != NullLiteral null MethodName setKeystore VariableName keystoreVar IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
IfStatement if VariableName camelcontextVar Operator != NullLiteral null Operator && VariableName stringVar Operator != NullLiteral null SimpleType SecureRandom VariableName securerandomVar VariableName camelcontextVar MethodName getRegistry MethodName lookupByNameAndType VariableName stringVar TypeLiteral class IfStatement if VariableName keystoreVar Operator != NullLiteral null MethodName setSecureRandom VariableName random IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName stringVar Operator != NullLiteral null VariableName stringVar VariableName DigitalSignatureConstants VariableName SIGNATURE
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName booleanVar
Name ObjectHelper MethodName notNull MethodName getCamelContext StringLiteral stringLiteral ThisExpression this IfStatement if MethodName getCamelContext Instanceof instanceof SimpleType SpringCamelContext SimpleType ApplicationContext VariableName applicationcontextVar SimpleType SpringCamelContext MethodName getCamelContext MethodName getApplicationContext VariableName beanresolverVar Operator = New new SimpleType BeanFactoryResolver VariableName applicationContext VariableName beanresolverVar Operator = New new SimpleType RegistryBeanResolver MethodName getCamelContext MethodName getRegistry
ReturnStatement return VariableName listVar
ThisExpression this VariableName longVar Operator = VariableName longVar
ReturnStatement return VariableName intVar
SimpleType InputStream VariableName inputstreamVar Name HttpConverter MethodName toInputStream VariableName httpservletrequestVar VariableName exchangeVar ReturnStatement return MethodName readResponseBodyFromInputStream VariableName inputstreamVar VariableName exchangeVar
ReturnStatement return New new SimpleType SpringContextBootstrappingInitializer
Name Optional MethodName ofNullable MethodName getPdxSerializer MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxDiskStoreName MethodName filter MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxIgnoreUnreadFields MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxPersistent MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxReadSerialized MethodName ifPresent ReturnStatement return VariableName cachefactoryVar
MethodName applyClientCacheConfigurers MethodName getCompositeClientCacheConfigurer
Name Optional MethodName ofNullable MethodName getPdxSerializer MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxDiskStoreName MethodName filter MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxIgnoreUnreadFields MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxPersistent MethodName ifPresent Name Optional MethodName ofNullable MethodName getPdxReadSerialized MethodName ifPresent ReturnStatement return VariableName clientcachefactoryVar
Name Assert MethodName notNull VariableName entityinstantiatorsVar StringLiteral stringLiteral ThisExpression this VariableName entityinstantiatorsVar Operator = VariableName entityinstantiatorsVar
Name ParsingUtils MethodName setPropertyValue VariableName elementVar VariableName beandefinitionbuilderVar StringLiteral stringLiteral StringLiteral stringLiteral Name ParsingUtils MethodName setPropertyValue VariableName elementVar VariableName beandefinitionbuilderVar StringLiteral stringLiteral StringLiteral stringLiteral Name ParsingUtils MethodName setPropertyValue VariableName elementVar VariableName beandefinitionbuilderVar StringLiteral stringLiteral StringLiteral stringLiteral
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName stringVar MethodName filter MethodName orElse VariableName CacheServer VariableName DEFAULT_BIND_ADDRESS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName stringVar MethodName filter MethodName orElse VariableName CacheServer VariableName DEFAULT_HOSTNAME_FOR_CLIENTS
ReturnStatement return MethodName nullSafeSet ThisExpression this VariableName setVar
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName longVar MethodName orElse VariableName CacheServer VariableName DEFAULT_LOAD_POLL_INTERVAL
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAX_CONNECTIONS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAXIMUM_MESSAGE_COUNT
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAX_THREADS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MESSAGE_TIME_TO_LIVE
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_PORT
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName serverloadprobeVar MethodName orElse VariableName CacheServer VariableName DEFAULT_LOAD_PROBE
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_SOCKET_BUFFER_SIZE
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName ClientSubscriptionConfig VariableName DEFAULT_CAPACITY
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName subscriptionevictionpolicyVar MethodName orElse VariableName SubscriptionEvictionPolicy VariableName DEFAULT
SimpleType RegionShortcutWrapper VariableName regionshortcutwrapperVar Name RegionShortcutWrapper MethodName valueOf MethodName getServerRegionShortcut SimpleType DataPolicy VariableName datapolicyVar Name Optional MethodName of VariableName regionshortcutwrapperVar MethodName map MethodName orElseGet IfStatement if VariableName regionshortcutwrapperVar MethodName isLocal ReturnStatement return New new ParameterizedType LocalRegionFactoryBean IfStatement if VariableName datapolicyVar MethodName withPartitioning ReturnStatement return New new ParameterizedType PartitionedRegionFactoryBean IfStatement if VariableName datapolicyVar MethodName withReplication ParameterizedType ReplicatedRegionFactoryBean VariableName replicatedregionfactorybeanVar New new ParameterizedType ReplicatedRegionFactoryBean VariableName replicatedRegionFactoryBean MethodName setScope MethodName getScope ReturnStatement return VariableName replicatedRegionFactoryBean ReturnStatement return New new ParameterizedType GenericRegionFactoryBean
ReturnStatement return ThisExpression this VariableName regionattributesVar
MethodName createOrUpdateIndexes VariableName objectVar VariableName iterableVar VariableName IndexWriteMode VariableName UPDATE
ReturnStatement return VariableName longVar Operator == Operator - NumberLiteral numberLiteral
ReturnStatement return Name ObjectUtils MethodName nullSafeEquals VariableName NodeType VariableName SLAVE MethodName getType
ReturnStatement return MethodName getLongValueOf VariableName INFO VariableName NUMBER_SLAVES
ReturnStatement return VariableName configurationVar MethodName getBoolean VariableName stringVar BooleanLiteral true
VariableName booleanVar Operator = BooleanLiteral true
IfStatement if ThisExpression this VariableName fsdataoutputstreamVar Operator != NullLiteral null IfStatement if ThisExpression this VariableName fsdataoutputstreamVar MethodName getWrappedStream Instanceof instanceof SimpleType DFSOutputStream ReturnStatement return SimpleType DFSOutputStream ThisExpression this VariableName fsdataoutputstreamVar MethodName getWrappedStream MethodName getPipeline ReturnStatement return ArrayType DatanodeInfo[] NumberLiteral numberLiteral
SimpleType ServerMetrics VariableName servermetricsVar VariableName concurrentnavigablemapVar MethodName get VariableName servernameVar ReturnStatement return VariableName servermetricsVar Operator != NullLiteral null VariableName servermetricsVar MethodName getVersionNumber NumberLiteral numberLiteral
IfStatement if VariableName transitioncodeVar Operator != VariableName TransitionCode VariableName CLOSED ThrowStatement throw New new SimpleType UnexpectedStateException StringLiteral stringLiteral Operator + VariableName transitioncodeVar StringLiteral stringLiteral VariableName regionstatenodeVar MethodName toShortString StringLiteral stringLiteral ThisExpression this StringLiteral stringLiteral
ReturnStatement return VariableName mastercoprocessorhostVar
ReturnStatement return ThisExpression this VariableName masterservicesVar MethodName getTableDescriptors MethodName get VariableName tablenameVar
SimpleType ServerManager VariableName servermanagerVar ThisExpression this VariableName hmasterVar MethodName getServerManager IfStatement if VariableName servermanagerVar Operator == NullLiteral null ReturnStatement return NumberLiteral numberLiteral ReturnStatement return VariableName servermanagerVar MethodName getOnlineServers MethodName size
SimpleType ServerManager VariableName servermanagerVar ThisExpression this VariableName hmasterVar MethodName getServerManager IfStatement if VariableName servermanagerVar Operator == NullLiteral null ReturnStatement return NumberLiteral numberLiteral ReturnStatement return VariableName servermanagerVar MethodName getDeadServers MethodName size
ReturnStatement return ThisExpression this VariableName longVar
ReturnStatement return ThisExpression this VariableName mapVar MethodName get VariableName stringVar Operator == NullLiteral null NumberLiteral numberLiteral VariableName mapVar MethodName get VariableName stringVar
ReturnStatement return New new SimpleType Path VariableName pathVar VariableName stringVar
ParameterizedType Set VariableName setVar Name Sets MethodName newHashSet EnhancedForStatement for SimpleType Address VariableName addressVar VariableName setVar VariableName setVar MethodName add Name HBaseProtos.ServerName MethodName newBuilder MethodName setHostName VariableName el MethodName getHostname MethodName setPort VariableName el MethodName getPort MethodName build SimpleType MoveServersRequest VariableName moveserversrequestVar Name MoveServersRequest MethodName newBuilder MethodName setTargetGroup VariableName stringVar MethodName addAllServers VariableName setVar MethodName build TryStatement try VariableName blockinginterfaceVar MethodName moveServers NullLiteral null VariableName moveserversrequestVar CatchClause catch SimpleType ServiceException VariableName serviceexceptionVar ThrowStatement throw Name ProtobufUtil MethodName handleRemoteException VariableName e
ReturnStatement return Name ByteBufferUtils MethodName toShort ThisExpression this VariableName bytebufferVar ThisExpression this VariableName intVar Operator + VariableName KeyValue VariableName ROW_OFFSET
ReturnStatement return Name ByteBufferUtils MethodName toInt ThisExpression this VariableName bytebufferVar ThisExpression this VariableName intVar
ReturnStatement return ThisExpression this VariableName queueVar MethodName size
IfStatement if VariableName quorumpeerconfigVar MethodName isDistributed SimpleType QuorumPeerMain VariableName quorumpeermainVar New new SimpleType QuorumPeerMain VariableName qp MethodName runFromConfig VariableName quorumpeerconfigVar SimpleType ZooKeeperServerMain VariableName zookeeperservermainVar New new SimpleType ZooKeeperServerMain SimpleType ServerConfig VariableName serverconfigVar New new SimpleType ServerConfig VariableName serverConfig MethodName readFrom VariableName quorumpeerconfigVar VariableName zk MethodName runFromConfig VariableName serverConfig
ReturnStatement return VariableName ReturnCode VariableName INCLUDE
IfStatement if Operator ! Name CellUtil MethodName matchingColumn VariableName cellVar ThisExpression this VariableName byte[]Var ThisExpression this VariableName byte[]Var ReturnStatement return VariableName ReturnCode VariableName INCLUDE IfStatement if VariableName comparator Operator != NullLiteral null Operator && MethodName compareValue MethodName getCompareOperator VariableName comparator VariableName cellVar ReturnStatement return VariableName ReturnCode VariableName SKIP VariableName setVar MethodName add VariableName cellVar MethodName getTimestamp IfStatement if VariableName booleanVar ReturnStatement return VariableName ReturnCode VariableName SKIP ReturnStatement return VariableName ReturnCode VariableName INCLUDE
IfStatement if ThisExpression this VariableName booleanVar ReturnStatement return VariableName ReturnCode VariableName NEXT_ROW ReturnStatement return VariableName ReturnCode VariableName INCLUDE
ReturnStatement return VariableName returncodeVar
IfStatement if ThisExpression this VariableName byte[]Var Operator == NullLiteral null ReturnStatement return VariableName ReturnCode VariableName INCLUDE ReturnStatement return MethodName filterColumn VariableName cellVar
SimpleType Put VariableName putVar New new SimpleType Put MethodName getTableRowKey VariableName tablenameVar VariableName putVar MethodName addColumn VariableName byte[]Var VariableName byte[]Var Name SpaceQuotaSnapshot MethodName toProtoSnapshot VariableName spacequotasnapshotVar MethodName toByteArray ReturnStatement return VariableName putVar
ReturnStatement return ThisExpression this VariableName longVar
ReturnStatement return MethodName getTableDescriptors Name RequestConverter MethodName buildGetTableDescriptorsRequest NullLiteral null VariableName booleanVar
ReturnStatement return ThisExpression this MethodName newAdminCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName adminCall VariableName controller VariableName stub Name RequestConverter MethodName buildGetOnlineRegionRequest VariableName s VariableName c VariableName req VariableName done VariableName s MethodName getOnlineRegion VariableName c VariableName req VariableName done VariableName resp Name ProtobufUtil MethodName getRegionInfos VariableName resp MethodName serverName VariableName servernameVar MethodName call
ReturnStatement return MethodName isSplitOrMergeOn VariableName MasterSwitchType VariableName MERGE
ReturnStatement return MethodName isSplitOrMergeOn VariableName MasterSwitchType VariableName SPLIT
SimpleType ProcedureDescription VariableName proceduredescriptionVar Name ProtobufUtil MethodName buildProcedureDescription VariableName stringVar VariableName stringVar VariableName mapVar ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name ExecProcedureRequest MethodName newBuilder MethodName setProcedure VariableName proceduredescriptionVar MethodName build VariableName s VariableName c VariableName req VariableName done VariableName s MethodName execProcedureWithRet VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName hasReturnData VariableName resp MethodName getReturnData MethodName toByteArray NullLiteral null MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildIsBalancerEnabledRequest VariableName s VariableName c VariableName req VariableName done VariableName s MethodName isBalancerEnabled VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getEnabled MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildSetNormalizerRunningRequest VariableName booleanVar VariableName s VariableName c VariableName req VariableName done VariableName s MethodName setNormalizerRunning VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getPrevNormalizerValue MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildIsNormalizerEnabledRequest VariableName s VariableName c VariableName req VariableName done VariableName s MethodName isNormalizerEnabled VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getEnabled MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildSetCleanerChoreRunningRequest VariableName booleanVar VariableName s VariableName c VariableName req VariableName done VariableName s MethodName setCleanerChoreRunning VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getPrevValue MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildIsCleanerChoreEnabledRequest VariableName s VariableName c VariableName req VariableName done VariableName s MethodName isCleanerChoreEnabled VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getValue MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildEnableCatalogJanitorRequest VariableName booleanVar VariableName s VariableName c VariableName req VariableName done VariableName s MethodName enableCatalogJanitor VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getPrevValue MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildIsCatalogJanitorEnabledRequest VariableName s VariableName c VariableName req VariableName done VariableName s MethodName isCatalogJanitorEnabled VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getValue MethodName call
ReturnStatement return VariableName tablenameVar
ReturnStatement return New new SimpleType Envelope MethodName asJsonSchema VariableName schemaVar MethodName convertToJson VariableName schemaVar VariableName objectVar MethodName toJsonNode
Modifier final ParameterizedType Set VariableName setVar New new ParameterizedType HashSet EnhancedForStatement for Modifier final ParameterizedType Set VariableName setVar MethodName nodeGroups MethodName values VariableName setVar MethodName addAll VariableName value VariableName setVar MethodName removeAll MethodName globalNodeGroups MethodName initializeSubscription ReturnStatement return MethodName build VariableName setVar
Modifier final ParameterizedType Set VariableName setVar MethodName nodeGroups MethodName get VariableName intVar ReturnStatement return MethodName build VariableName setVar
Modifier final SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder EnhancedForStatement for Modifier final SimpleType String VariableName stringVar VariableName collectionVar VariableName stringbuilderVar MethodName append VariableName topic MethodName append StringLiteral stringLiteral EnhancedForStatement for Modifier final SimpleType Pattern VariableName patternVar VariableName collectionVar VariableName stringbuilderVar MethodName append VariableName sourcePattern MethodName pattern MethodName append StringLiteral stringLiteral IfStatement if VariableName stringbuilderVar MethodName length Operator > NumberLiteral numberLiteral VariableName stringbuilderVar MethodName setLength VariableName stringbuilderVar MethodName length Operator - NumberLiteral numberLiteral ReturnStatement return Name Pattern MethodName compile VariableName stringbuilderVar MethodName toString ReturnStatement return VariableName patternVar
ReturnStatement return VariableName setVar
ReturnStatement return VariableName threadcacheVar
TryStatement try ReturnStatement return Name Utils MethodName newInstance VariableName stringVar TypeLiteral class CatchClause catch Modifier final SimpleType ClassNotFoundException VariableName classnotfoundexceptionVar ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName INTERNAL_TASK_ASSIGNOR_CLASS VariableName e
VariableName assignmentinfoVar VariableName mapVar Operator = New new ParameterizedType HashMap Modifier final PrimitiveType int VariableName intVar VariableName datainputstreamVar MethodName readInt ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName intVar VariableName i Operator ++ Modifier final SimpleType HostInfo VariableName hostinfoVar New new SimpleType HostInfo VariableName datainputstreamVar MethodName readUTF VariableName datainputstreamVar MethodName readInt VariableName assignmentInfo.partitionsByHost MethodName put VariableName hostInfo MethodName readTopicPartitions VariableName datainputstreamVar
ReturnStatement return MethodName equals VariableName RUNNING Operator || MethodName equals VariableName STARTING MethodName equals VariableName PARTITIONS_REVOKED MethodName equals VariableName PARTITIONS_ASSIGNED
ReturnStatement return VariableName stampedrecordVar Operator == NullLiteral null VariableName longVar VariableName stampedrecordVar VariableName timestamp
ReturnStatement return MethodName equals VariableName RUNNING Operator || MethodName equals VariableName REBALANCING
ReturnStatement return VariableName timedefinitionVar
ReturnStatement return VariableName durationVar Operator == NullLiteral null VariableName Duration VariableName ZERO VariableName durationVar
ReturnStatement return VariableName patternVar
ReturnStatement return VariableName consumedinternalVar
SimpleType V VariableName vVar NullLiteral null IfStatement if VariableName vVar Operator != NullLiteral null Operator && VariableName booleanVar Operator ^ VariableName predicateVar MethodName test VariableName kVar VariableName vVar VariableName vVar Operator = VariableName vVar ReturnStatement return VariableName vVar
ReturnStatement return Name System MethodName getProperty StringLiteral stringLiteral MethodName contains StringLiteral stringLiteral
IfStatement if ThisExpression this VariableName memberstateVar Operator != VariableName MemberState VariableName STABLE ReturnStatement return NullLiteral null ReturnStatement return VariableName generationVar
ReturnStatement return BooleanLiteral true
VariableName memoryrecordsbuilderVar MethodName abort
ReturnStatement return VariableName stateVar Operator == VariableName State VariableName ABORTABLE_ERROR Operator || VariableName stateVar Operator == VariableName State VariableName FATAL_ERROR
VariableName intVar Operator = VariableName intVar
ReturnStatement return VariableName intVar Operator != VariableName intVar
ReturnStatement return MethodName isTransactional Operator && VariableName stateVar Operator == VariableName State VariableName READY
ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap VariableName mapVar IfStatement if VariableName serializerVar Operator != NullLiteral null VariableName mapVar MethodName put VariableName stringVar VariableName serializerVar MethodName getClass IfStatement if VariableName serializerVar Operator != NullLiteral null VariableName mapVar MethodName put VariableName stringVar VariableName serializerVar MethodName getClass ReturnStatement return VariableName mapVar
IfStatement if Operator ! ThisExpression this VariableName booleanVar ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral
ParameterizedType Deque VariableName dequeVar VariableName mapVar MethodName get VariableName stringVar ReturnStatement return VariableName dequeVar Operator == NullLiteral null NumberLiteral numberLiteral VariableName dequeVar MethodName size
ReturnStatement return Name LOGMSG MethodName getBytes
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
ReturnStatement return VariableName threadlocalVar MethodName get MethodName format New new SimpleType Date
ReturnStatement return VariableName fastdateformatVar MethodName format New new SimpleType Date
ReturnStatement return New new SimpleType IllegalStateException StringLiteral stringLiteral
ReturnStatement return New new SimpleType Throwable MethodName getStackTrace NumberLiteral numberLiteral MethodName getClassName
ReturnStatement return New new SimpleType StringFormattedMessage StringLiteral stringLiteral VariableName randomintegerVar VariableName random
Modifier final ParameterizedType Constructor VariableName constructorVar TypeLiteral class MethodName getConstructor TypeLiteral class TypeLiteral class ReturnStatement return VariableName constructorVar MethodName newInstance StringLiteral stringLiteral ArrayType Object[] ArrayInitializer arrayInitializer
ReturnStatement return Name STR MethodName getBytes
ReturnStatement return Name PATTERN_M MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_SPACE MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_C MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_C_D MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_D MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_D_EX MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_EX MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_C_D_EX MethodName toByteArray VariableName logeventVar
VariableName asyncloggerconfigdelegateVar MethodName enqueueEvent VariableName logeventVar ThisExpression this
Modifier final PrimitiveType int VariableName intVar VariableName stringbuilderVar MethodName length VariableName logeventpatternconverterVar MethodName format VariableName logeventVar VariableName stringbuilderVar VariableName formattinginfoVar MethodName format VariableName intVar VariableName stringbuilderVar
ReturnStatement return New new SimpleType FixedFormatter VariableName fixeddateformatVar
ReturnStatement return VariableName mimemessageVar
ReturnStatement return VariableName appenderVar MethodName ignoreExceptions
ReturnStatement return VariableName atomiclongVar MethodName get
ReturnStatement return ThisExpression this VariableName intVar Operator == VariableName commitlogdescriptorVar VariableName intVar Operator && ThisExpression this VariableName longVar Operator == VariableName commitlogdescriptorVar VariableName longVar
ReturnStatement return VariableName uuidVar
IfStatement if Operator ! Name DatabaseDescriptor MethodName streamEntireSSTables Operator || VariableName refVar MethodName get MethodName getSSTableMetadata VariableName hasLegacyCounterShards ReturnStatement return BooleanLiteral false ReturnStatement return MethodName contained VariableName listVar VariableName refVar MethodName get
ReturnStatement return VariableName intVar Operator == VariableName intVar
ReturnStatement return VariableName stringVar
Name CacheService.instance.rowCache MethodName remove VariableName rowcachekeyVar
ReturnStatement return VariableName atomiclongVar MethodName get
EnhancedForStatement for SimpleType IResource VariableName iresourceVar Name Resources MethodName chain VariableName iresourceVar IfStatement if MethodName authorize VariableName r MethodName contains VariableName permissionVar ReturnStatement return ThrowStatement throw New new SimpleType UnauthorizedException Name String MethodName format StringLiteral stringLiteral VariableName authenticateduserVar MethodName getName VariableName permissionVar VariableName iresourceVar
IfStatement if Name DatabaseDescriptor MethodName getAuthenticator MethodName requireAuthentication Operator && VariableName authenticateduserVar Operator == NullLiteral null Operator || Operator ! VariableName authenticateduserVar MethodName isSuper ThrowStatement throw New new SimpleType UnauthorizedException VariableName stringVar
ReturnStatement return BooleanLiteral true
VariableName configurationVar MethodName set VariableName stringVar Operator + VariableName stringVar VariableName stringVar
VariableName configurationVar MethodName set VariableName stringVar Operator + VariableName stringVar VariableName stringVar
ReturnStatement return Name QueryProcessor MethodName preparedStatementsCount
ReturnStatement return Name Metrics MethodName meter VariableName metricnamefactoryVar MethodName createMetricName VariableName stringVar
ReturnStatement return New new SimpleType TreeRangeIterator
ReturnStatement return New new SimpleType TreeRangeIterator ThisExpression this
ReturnStatement return VariableName numbertypeVar MethodName mod VariableName numbertypeVar VariableName bytebufferVar VariableName numbertypeVar VariableName bytebufferVar
ReturnStatement return MethodName hasConditions MethodName executeInternalWithCondition VariableName querystateVar VariableName queryoptionsVar MethodName executeInternalWithoutCondition VariableName querystateVar VariableName queryoptionsVar Name System MethodName nanoTime
ParameterizedType SortedSet VariableName sortedsetVar VariableName statementrestrictionsVar MethodName getClusteringColumnsBounds VariableName Bound VariableName START VariableName queryoptionsVar ParameterizedType SortedSet VariableName sortedsetVar VariableName statementrestrictionsVar MethodName getClusteringColumnsBounds VariableName Bound VariableName END VariableName queryoptionsVar ReturnStatement return MethodName toSlices VariableName sortedsetVar VariableName sortedsetVar
SimpleType BatchQueryOptions VariableName batchqueryoptionsVar Name BatchQueryOptions MethodName withoutPerStatementVariables VariableName queryoptionsVar IfStatement if VariableName booleanVar ReturnStatement return MethodName executeInternalWithConditions VariableName batchqueryoptionsVar VariableName querystateVar MethodName executeInternalWithoutCondition VariableName querystateVar VariableName batchqueryoptionsVar Name System MethodName nanoTime ReturnStatement return New new SimpleType Void
ReturnStatement return Operator ! VariableName clusteringcolumnrestrictionsVar MethodName isEmpty
ReturnStatement return ThisExpression this
IfStatement if Operator ! VariableName auditlogfilterVar MethodName isFiltered VariableName auditlogentryVar VariableName iauditloggerVar MethodName log VariableName auditlogentryVar
ReturnStatement return Name Iterables MethodName transform VariableName immutablemapVar MethodName values VariableName view VariableName view VariableName metadata
MethodName deleteWithConfirm New new SimpleType File VariableName stringVar
ReturnStatement return VariableName indexsummaryVar MethodName size
ReturnStatement return VariableName memoryVar MethodName getInt VariableName intVar Operator << NumberLiteral numberLiteral
ReturnStatement return New new SimpleType EstimatedHistogram NumberLiteral numberLiteral
ReturnStatement return New new SimpleType EstimatedHistogram NumberLiteral numberLiteral
ReturnStatement return VariableName decoratedkeyVar
TryStatement try ReturnStatement return MethodName doCompute CatchClause catch SimpleType IndexOutOfBoundsException VariableName indexoutofboundsexceptionVar VariableName sstablereaderVar MethodName markSuspect ThrowStatement throw New new SimpleType CorruptSSTableException VariableName e VariableName stringVar CatchClause catch SimpleType IOError VariableName ioerrorVar IfStatement if VariableName e MethodName getCause Instanceof instanceof SimpleType IOException VariableName sstablereaderVar MethodName markSuspect ThrowStatement throw New new SimpleType CorruptSSTableException SimpleType Exception VariableName e MethodName getCause VariableName stringVar ThrowStatement throw VariableName e
ReturnStatement return VariableName configVar VariableName max_hints_delivery_threads
ReturnStatement return VariableName configVar VariableName incremental_backups
ReturnStatement return VariableName FBUtilities VariableName isWindows Operator - NumberLiteral numberLiteral VariableName configVar VariableName sstable_preemptive_open_interval_in_mb
VariableName configVar VariableName sstable_preemptive_open_interval_in_mb Operator = VariableName intVar
ReturnStatement return VariableName configVar VariableName enable_materialized_views
ReturnStatement return VariableName servletrequestVar
ReturnStatement return VariableName servletresponseVar
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName QUESTIONMARK ReturnStatement return BooleanLiteral true IfStatement if MethodName jj_3R_22 ReturnStatement return BooleanLiteral true IfStatement if MethodName jj_scan_token VariableName COLON ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_3R_25 ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName LPAREN ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName LBRACK ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName NULL ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName MINUS ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName FALSE ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName IDENTIFIER ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if TypeLiteral class MethodName getName MethodName equals MethodName getSslImplementationName ReturnStatement return StringLiteral stringLiteral ReturnStatement return StringLiteral stringLiteral
IfStatement if VariableName storedescriptionVar MethodName isAttributes MethodName printAttributes VariableName printwriterVar VariableName intVar BooleanLiteral false VariableName objectVar VariableName storedescriptionVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
MethodName getBind ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName rxtaskpoolVar
VariableName longVar Operator = VariableName longVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
IfStatement if MethodName checkEof ReturnStatement return Operator - NumberLiteral numberLiteral PrimitiveType int VariableName intVar VariableName intVar IfStatement if VariableName intVar Operator > MethodName getLength VariableName intVar Operator = MethodName getLength Name System MethodName arraycopy VariableName char[]Var VariableName start VariableName charVar VariableName intVar VariableName intVar VariableName start Operator += VariableName intVar ReturnStatement return VariableName intVar
IfStatement if MethodName checkEof ReturnStatement return Operator - NumberLiteral numberLiteral PrimitiveType int VariableName intVar VariableName intVar IfStatement if VariableName intVar Operator > MethodName getLength VariableName intVar Operator = MethodName getLength Name System MethodName arraycopy VariableName byte[]Var VariableName start VariableName byteVar VariableName intVar VariableName intVar VariableName start Operator += VariableName intVar ReturnStatement return VariableName intVar
IfStatement if MethodName checkEof ReturnStatement return Operator - NumberLiteral numberLiteral PrimitiveType int VariableName intVar Name Math MethodName min VariableName bytebufferVar MethodName remaining MethodName getLength VariableName bytebufferVar MethodName put VariableName byte[]Var VariableName start VariableName intVar VariableName bytebufferVar MethodName limit VariableName bytebufferVar MethodName position VariableName bytebufferVar MethodName position VariableName bytebufferVar MethodName position Operator - VariableName intVar VariableName start Operator += VariableName intVar ReturnStatement return VariableName intVar
SimpleType String VariableName stringVar VariableName mapVar MethodName put VariableName stringVar VariableName stringVar IfStatement if VariableName stringVar Operator != NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral VariableName stringVar VariableName stringVar VariableName stringVar VariableName setVar MethodName add VariableName stringVar
ThisExpression this VariableName stringVar MethodName add VariableName stringVar
ThisExpression this VariableName string[]Var NumberLiteral numberLiteral Operator = VariableName stringVar
ThisExpression this VariableName string[]Var NumberLiteral numberLiteral Operator = VariableName stringVar
VariableName threadlocalVar MethodName set VariableName Boolean VariableName TRUE
ReturnStatement return VariableName socketpropertiesVar MethodName getSoLingerTime
ReturnStatement return VariableName socketpropertiesVar MethodName getSoTimeout
VariableName socketpropertiesVar MethodName setSoTimeout VariableName intVar
ThisExpression this VariableName intVar Operator = VariableName intVar
IfStatement if VariableName column[]Var VariableName length Operator > NumberLiteral numberLiteral Operator && MethodName shouldGeneratePrimaryKeys VariableName column[]Var MethodName print StringLiteral stringLiteral MethodName printlnIdentifier MethodName getTableName VariableName tableVar MethodName printIndent MethodName print StringLiteral stringLiteral MethodName writePrimaryKeyStmt VariableName tableVar VariableName column[]Var MethodName printEndOfStatement
MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName printEndOfStatement
SimpleType String VariableName stringVar VariableName indexVar MethodName getName IfStatement if VariableName stringVar Operator != NullLiteral null Operator && VariableName stringVar MethodName startsWith StringLiteral stringLiteral TryStatement try Name Long MethodName parseLong VariableName stringVar MethodName substring NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ReturnStatement return BooleanLiteral false
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
IfStatement if MethodName getPlatformInfo MethodName isAlterTableForDropUsed MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar IfStatement if Operator ! MethodName getPlatformInfo MethodName isAlterTableForDropUsed MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
SimpleType String VariableName stringVar MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName print StringLiteral stringLiteral MethodName printAlwaysSingleQuotedIdentifier VariableName stringVar MethodName println StringLiteral stringLiteral MethodName printIndent MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier VariableName stringVar MethodName printEndOfStatement
SimpleType String VariableName stringVar MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName print StringLiteral stringLiteral MethodName printAlwaysSingleQuotedIdentifier VariableName stringVar MethodName println StringLiteral stringLiteral MethodName printIndent MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier VariableName stringVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName printEndOfStatement IfStatement if VariableName foreignkeyVar MethodName isAutoIndexPresent MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName printEndOfStatement
VariableName hashmapVar MethodName put VariableName stringVar VariableName objectVar
Name Preconditions MethodName checkNotNull VariableName listVar Name Preconditions MethodName checkArgument VariableName listVar MethodName size Operator == VariableName mapVar MethodName size StringLiteral stringLiteral ReturnStatement return VariableName mapVar MethodName get VariableName listVar
IfStatement if VariableName stringVar MethodName equals StringLiteral stringLiteral MethodName setTypeLT IfStatement if VariableName stringVar MethodName equals StringLiteral stringLiteral MethodName setTypeLTE IfStatement if VariableName stringVar MethodName equals StringLiteral stringLiteral MethodName setTypeEQ IfStatement if VariableName stringVar MethodName equals StringLiteral stringLiteral MethodName setTypeEQ IfStatement if VariableName stringVar MethodName equals StringLiteral stringLiteral MethodName setTypeGT IfStatement if VariableName stringVar MethodName equals StringLiteral stringLiteral MethodName setTypeGTE MethodName setTypeEQ
VariableName cacheVar MethodName asMap MethodName putAll VariableName mapVar
ReturnStatement return VariableName stringVar Operator + CharacterLiteral charLiteral Name System MethodName currentTimeMillis VariableName TMP_EXTENSION
SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral ReturnStatement return VariableName stringVar Operator + VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar
PrimitiveType int VariableName intVar NumberLiteral numberLiteral EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName concurrentmapVar MethodName entrySet SimpleType TaskWrapper VariableName taskwrapperVar VariableName e MethodName getValue IfStatement if VariableName task MethodName isInWaitQueue ContinueStatement continue SimpleType TaskRunnerCallable VariableName taskrunnercallableVar VariableName task MethodName getTaskRunnerCallable IfStatement if VariableName c Operator == NullLiteral null Operator || VariableName c MethodName getStartTime Operator == NumberLiteral numberLiteral ContinueStatement continue Operator ++ VariableName intVar ReturnStatement return VariableName intVar
SimpleType HiveConf VariableName hiveconfVar New new SimpleType HiveConf SimpleType BufferedRows VariableName bufferedrowsVar MethodName getConfInternal VariableName booleanVar WhileStatement while VariableName bufferedrowsVar Operator != NullLiteral null Operator && VariableName bufferedrowsVar MethodName hasNext MethodName addConf SimpleType Row VariableName bufferedrowsVar MethodName next VariableName hiveconfVar ReturnStatement return VariableName hiveconfVar
ReturnStatement return Name MetaStoreUtils MethodName getSchema VariableName tableVar MethodName getSd VariableName tableVar MethodName getSd VariableName tableVar MethodName getParameters VariableName tableVar MethodName getDbName VariableName tableVar MethodName getTableName VariableName tableVar MethodName getPartitionKeys
VariableName lockcomponentVar MethodName setType VariableName LockType VariableName SHARED_WRITE ReturnStatement return ThisExpression this
VariableName lockcomponentVar MethodName setType VariableName LockType VariableName SHARED_READ ReturnStatement return ThisExpression this
IfStatement if VariableName threadlocalVar MethodName get MethodName containsKey VariableName stringVar VariableName threadlocalVar MethodName get MethodName get VariableName stringVar MethodName close
ArrayType char[] VariableName char[]Var VariableName stringVar MethodName toCharArray PrimitiveType int VariableName intVar NumberLiteral numberLiteral ForStatement for VariableName intVar Operator < VariableName char[]Var VariableName length Operator && VariableName char[]Var VariableName intVar Operator == CharacterLiteral charLiteral Operator || Name Character MethodName isDigit VariableName char[]Var VariableName intVar VariableName intVar Operator ++ ReturnStatement return ArrayType String[] ArrayInitializer arrayInitializer
ThrowStatement throw New new SimpleType UnsupportedOperationException
SimpleType String VariableName stringVar VariableName string[]Var NumberLiteral numberLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral MethodName generateDecimalColumnCompare VariableName string[]Var VariableName stringVar
SimpleType String VariableName stringVar VariableName string[]Var NumberLiteral numberLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral MethodName generateDecimalColumnCompare VariableName string[]Var VariableName stringVar
SimpleType String VariableName stringVar VariableName string[]Var NumberLiteral numberLiteral SimpleType String VariableName stringVar StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral MethodName generateDecimalColumnCompare VariableName string[]Var VariableName stringVar
VariableName calendarVar MethodName setTimeInMillis VariableName longVar VariableName calendarVar MethodName add VariableName Calendar VariableName MONTH VariableName intVar ReturnStatement return VariableName calendarVar MethodName getTimeInMillis
VariableName writetypeVar Operator = VariableName writetypeVar
VariableName astnodeVar Operator = MethodName analyzeCreateTable VariableName astnodeVar MethodName getQB NullLiteral null IfStatement if VariableName astnodeVar Operator == NullLiteral null Name LOG MethodName error StringLiteral stringLiteral Operator + StringLiteral stringLiteral MethodName getAST MethodName dump ThrowStatement throw New new SimpleType SemanticException StringLiteral stringLiteral ReturnStatement return VariableName astnodeVar
ReturnStatement return VariableName booleanVar
SimpleType Result VariableName resultVar MethodName visitChild NumberLiteral numberLiteral VariableName projectVar MethodName getInput MethodName parseCorrelTable VariableName projectVar VariableName resultVar Modifier final SimpleType Builder VariableName builderVar VariableName resultVar MethodName builder VariableName projectVar VariableName Clause VariableName SELECT Modifier final ParameterizedType List VariableName listVar New new ParameterizedType ArrayList EnhancedForStatement for SimpleType RexNode VariableName rexnodeVar VariableName projectVar MethodName getChildExps SimpleType SqlNode VariableName sqlnodeVar VariableName builder.context MethodName toSql NullLiteral null VariableName ref MethodName addSelect VariableName listVar VariableName sqlExpr VariableName projectVar MethodName getRowType VariableName builderVar MethodName setSelect New new SimpleType SqlNodeList VariableName listVar VariableName POS ReturnStatement return VariableName builderVar MethodName result
ReturnStatement return NumberLiteral numberLiteral
SimpleType String VariableName stringVar Name Warehouse MethodName getQualifiedName VariableName tableVar MethodName getDbName MethodName toLowerCase VariableName tableVar MethodName getTableName MethodName toLowerCase SimpleType SessionState VariableName sessionstateVar Name SessionState MethodName get IfStatement if VariableName sessionstateVar Operator == NullLiteral null Name LOG MethodName warn StringLiteral stringLiteral Operator + VariableName stringVar ReturnStatement return VariableName sessionstateVar MethodName getTempPartitions MethodName remove Name Warehouse MethodName getQualifiedName VariableName tableVar
IfStatement if VariableName tableVar MethodName getPartitionKeysSize Operator <= NumberLiteral numberLiteral ThrowStatement throw New new SimpleType MetaException MethodName getCatalogQualifiedTableName VariableName tableVar Operator + StringLiteral stringLiteral
ReturnStatement return MethodName deriveResultDecimalTypeInfo
ReturnStatement return New new SimpleType GenericUDAFRankEvaluator
ReturnStatement return New new SimpleType GenericUDAFPercentRankEvaluator
ParameterizedType List VariableName listVar MethodName getRootOps VariableName planmapperVar ParameterizedType List VariableName listVar MethodName getRootOps VariableName planmapperVar ForStatement for ParameterizedType Iterator VariableName iteratorVar VariableName listVar MethodName iterator VariableName itL MethodName hasNext ParameterizedType Operator VariableName operatorVar VariableName itL MethodName next ForStatement for ParameterizedType Iterator VariableName iteratorVar VariableName listVar MethodName iterator VariableName itR MethodName hasNext ParameterizedType Operator VariableName operatorVar VariableName itR MethodName next IfStatement if VariableName opL MethodName logicalEqualsTree VariableName opR VariableName itL MethodName remove VariableName itR MethodName remove BreakStatement break ReturnStatement return VariableName listVar MethodName isEmpty Operator && VariableName listVar MethodName isEmpty
SimpleType VectorizedRowBatch VariableName vectorizedrowbatchVar SimpleType VectorizedRowBatch VariableName objectVar IfStatement if VariableName vectorizedrowbatchVar VariableName size Operator > NumberLiteral numberLiteral VariableName iprocessingmodeVar MethodName processBatch VariableName vectorizedrowbatchVar
ReturnStatement return VariableName vectorizationcontextVar
ReturnStatement return VariableName vectorizationcontextVar
ReturnStatement return VariableName vectorizationcontextVar
ReturnStatement return VariableName vectorizationcontextVar
ReturnStatement return VariableName vectorizationcontextVar
ReturnStatement return VariableName vectorizationcontextVar
ReturnStatement return VariableName vectorizationcontextVar
MethodName forward VariableName objectVar VariableName inputObjInspectors VariableName intVar
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
IfStatement if VariableName createtabledescVar Operator == NullLiteral null Operator || VariableName createtabledescVar MethodName getTblProps Operator == NullLiteral null ReturnStatement return BooleanLiteral false SimpleType String VariableName stringVar VariableName createtabledescVar MethodName getTblProps MethodName get VariableName hive_metastoreConstants VariableName TABLE_IS_TRANSACTIONAL IfStatement if VariableName stringVar Operator == NullLiteral null VariableName stringVar Operator = VariableName createtabledescVar MethodName getTblProps MethodName get VariableName hive_metastoreConstants.TABLE_IS_TRANSACTIONAL MethodName toUpperCase ReturnStatement return VariableName stringVar Operator != NullLiteral null Operator && VariableName stringVar MethodName equalsIgnoreCase StringLiteral stringLiteral Operator && Operator ! Name AcidUtils MethodName isInsertOnlyTable VariableName createtabledescVar MethodName getTblProps
ReturnStatement return ParameterizedType List Name VirtualColumn MethodName removeVirtualColumns Name StringUtils MethodName getStringCollection VariableName stringVar
MethodName verifyUser MethodName verifyParam VariableName stringVar StringLiteral stringLiteral SimpleType StatusDelegator VariableName statusdelegatorVar New new SimpleType StatusDelegator VariableName appconfigVar ReturnStatement return VariableName statusdelegatorVar MethodName run MethodName getDoAsUser VariableName stringVar
MethodName verifyUser MethodName verifyParam VariableName stringVar StringLiteral stringLiteral SimpleType DeleteDelegator VariableName deletedelegatorVar New new SimpleType DeleteDelegator VariableName appconfigVar ReturnStatement return VariableName deletedelegatorVar MethodName run MethodName getDoAsUser VariableName stringVar
PrimitiveType int VariableName intVar NumberLiteral numberLiteral ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName object[]Var VariableName length VariableName i Operator ++ PrimitiveType int VariableName intVar Name ObjectInspectorUtils MethodName hashCode VariableName object[]Var VariableName i VariableName objectinspector[]Var VariableName i VariableName intVar Operator = NumberLiteral numberLiteral Operator * VariableName intVar Operator + VariableName fieldHash ReturnStatement return VariableName intVar
ReturnStatement return VariableName byteVar Operator >> NumberLiteral numberLiteral Operator != NumberLiteral numberLiteral
MethodName initStats MethodName setModified VariableName mapVar MethodName put VariableName statVar MethodName getType VariableName statVar
ThisExpression this VariableName uriVar Operator = VariableName uriVar
ReturnStatement return ThisExpression this VariableName uriVar
ReturnStatement return BooleanLiteral true
ReturnStatement return VariableName listVar MethodName get VariableName intVar Operator == NullLiteral null Operator || VariableName listVar MethodName get VariableName intVar MethodName isNull
ReturnStatement return VariableName listVar MethodName get VariableName intVar
ReturnStatement return MethodName commitOutputData VariableName overridableconfVar BooleanLiteral true
ReturnStatement return ThisExpression this VariableName inetsocketaddressVar
ArrayType Expr[] VariableName expr[]Var ArrayType Expr[] VariableName row_value_predicand_listcontextVar MethodName row_value_predicand MethodName size ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName expr[]Var VariableName length VariableName i Operator ++ VariableName expr[]Var VariableName i Operator = MethodName visitRow_value_predicand VariableName row_value_predicand_listcontextVar MethodName row_value_predicand VariableName i ReturnStatement return VariableName expr[]Var
ArrayType ColumnReferenceExpr[] VariableName columnreferenceexpr[]Var ArrayType ColumnReferenceExpr[] VariableName column_reference_listcontextVar MethodName column_reference MethodName size ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName columnreferenceexpr[]Var VariableName length VariableName i Operator ++ VariableName columnreferenceexpr[]Var VariableName i Operator = MethodName visitColumn_reference VariableName column_reference_listcontextVar MethodName column_reference VariableName i ReturnStatement return VariableName columnreferenceexpr[]Var
IfStatement if Name NodeResources MethodName fitsIn VariableName noderesourceVar VariableName noderesourceVar Operator && MethodName checkFreeHeapMemory VariableName noderesourceVar Name NodeResources MethodName subtractFrom VariableName noderesourceVar VariableName noderesourceVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
VariableName lockVar MethodName lock TryStatement try ReturnStatement return VariableName statemachineVar MethodName getCurrentState VariableName lockVar MethodName unlock
ReturnStatement return VariableName schemaVar
VariableName logicalnodevisitorVar MethodName visit ThisExpression this
ReturnStatement return MethodName getInSchema
ReturnStatement return MethodName newAndGetBlock VariableName stringVar Operator + VariableName integerVar Operator ++
PrimitiveType int VariableName intVar VariableName integerVar Operator ++ ReturnStatement return VariableName charVar Operator + VariableName stringVar MethodName toLowerCase VariableName intVar Operator > NumberLiteral numberLiteral StringLiteral stringLiteral Operator + VariableName intVar StringLiteral stringLiteral
VariableName stackVar MethodName push VariableName distinctgroupbynodeVar SimpleType RESULT VariableName resultVar MethodName visit VariableName contextVar VariableName logicalplanVar VariableName queryblockVar VariableName distinctgroupbynodeVar MethodName getChild VariableName stackVar VariableName stackVar MethodName pop ReturnStatement return VariableName resultVar
VariableName evalnodevisitorVar MethodName visit ThisExpression this
VariableName evalnodevisitorVar MethodName visit ThisExpression this
VariableName listVar MethodName add New new SimpleType IfThenEval VariableName evalnodeVar VariableName evalnodeVar
ReturnStatement return VariableName charVar Operator == CharacterLiteral charLiteral
ReturnStatement return VariableName datum[]Var VariableName intVar Operator == NullLiteral null Operator || VariableName datum[]Var VariableName intVar MethodName isNull
ReturnStatement return VariableName intVar
ReturnStatement return VariableName mapVar MethodName size
Name TUtil MethodName putToNestedMap VariableName mapVar VariableName vVar VariableName vVar VariableName eVar Name TUtil MethodName putToNestedMap VariableName mapVar VariableName vVar VariableName vVar VariableName eVar
IfStatement if VariableName mapVar MethodName containsKey VariableName vVar VariableName mapVar MethodName get VariableName vVar MethodName remove VariableName vVar IfStatement if VariableName mapVar MethodName get VariableName vVar MethodName isEmpty VariableName mapVar MethodName remove VariableName vVar VariableName mapVar MethodName get VariableName vVar MethodName remove VariableName vVar IfStatement if VariableName mapVar MethodName get VariableName vVar MethodName isEmpty VariableName mapVar MethodName remove VariableName vVar ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral Operator + VariableName vVar StringLiteral stringLiteral VariableName vVar
ReturnStatement return VariableName mapVar MethodName containsKey VariableName vVar Operator && VariableName mapVar MethodName get VariableName vVar MethodName containsKey VariableName vVar
ReturnStatement return VariableName mapVar MethodName containsKey VariableName vVar Operator && VariableName mapVar MethodName get VariableName vVar MethodName containsKey VariableName vVar
ReturnStatement return VariableName mapVar MethodName remove VariableName stringVar
ReturnStatement return BooleanLiteral true
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder IfStatement if VariableName booleanVar MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesQuotedIdentifierAs VariableName stringbuilderVar MethodName insert NumberLiteral numberLiteral VariableName identifierpolicyVar MethodName getIdentifierQuoteString VariableName stringbuilderVar MethodName append VariableName identifierpolicyVar MethodName getIdentifierQuoteString MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesUnquotedIdentifierAs ReturnStatement return VariableName stringbuilderVar MethodName toString
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder IfStatement if VariableName booleanVar MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesQuotedIdentifierAs MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesUnquotedIdentifierAs ReturnStatement return VariableName stringbuilderVar MethodName toString
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName servletrequestVar
ReturnStatement return VariableName servletresponseVar
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName QUESTIONMARK ReturnStatement return BooleanLiteral true IfStatement if MethodName jj_3R_22 ReturnStatement return BooleanLiteral true IfStatement if MethodName jj_scan_token VariableName COLON ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName IDENTIFIER ReturnStatement return BooleanLiteral true IfStatement if MethodName jj_scan_token VariableName COLON ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_3R_25 ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName LPAREN ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName LBRACK ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName NULL ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName MINUS ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName FALSE ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Token VariableName tokenVar VariableName tokenVar Operator = VariableName jj_scanpos IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral VariableName jj_scanpos Operator = VariableName tokenVar IfStatement if MethodName jj_scan_token NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if MethodName jj_scan_token VariableName IDENTIFIER ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
VariableName string[]Var Operator = MethodName addStringArray VariableName string[]Var VariableName stringVar
VariableName threadlocalVar MethodName set VariableName Boolean VariableName TRUE
ReturnStatement return VariableName outputbufferVar MethodName getContentWritten
VariableName propertiesVar MethodName setProperty StringLiteral stringLiteral VariableName stringVar
ReturnStatement return VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral
VariableName propertiesVar MethodName setProperty StringLiteral stringLiteral VariableName stringVar
ReturnStatement return VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral
VariableName propertiesVar MethodName setProperty StringLiteral stringLiteral Name String MethodName valueOf VariableName intVar
VariableName propertiesVar MethodName setProperty StringLiteral stringLiteral Name String MethodName valueOf VariableName longVar
VariableName propertiesVar MethodName setProperty StringLiteral stringLiteral Name String MethodName valueOf VariableName longVar
ReturnStatement return VariableName intVar
ThisExpression this VariableName intVar Operator = VariableName intVar VariableName propertiesVar MethodName setProperty StringLiteral stringLiteral Name String MethodName valueOf VariableName intVar
ReturnStatement return VariableName intVar
ThisExpression this VariableName intVar Operator = VariableName intVar VariableName propertiesVar MethodName setProperty StringLiteral stringLiteral Name String MethodName valueOf VariableName intVar
MethodName getBind ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName rxtaskpoolVar
VariableName longVar Operator = VariableName longVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ParameterizedType ArrayList VariableName arraylistVar New new ParameterizedType ArrayList IfStatement if VariableName elementvalueVar Instanceof instanceof SimpleType ArrayElementValue ArrayType ElementValue[] VariableName elementvalue[]Var SimpleType ArrayElementValue VariableName elementvalueVar MethodName getElementValuesArray EnhancedForStatement for SimpleType ElementValue VariableName elementvalueVar VariableName arrayValues VariableName arraylistVar MethodName add VariableName value MethodName stringifyValue VariableName arraylistVar MethodName add VariableName elementvalueVar MethodName stringifyValue ArrayType String[] VariableName string[]Var ArrayType String[] VariableName arraylistVar MethodName size ReturnStatement return VariableName arraylistVar MethodName toArray VariableName string[]Var
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
IfStatement if StringLiteral stringLiteral MethodName equals VariableName stringVar ThisExpression this VariableName booleanVar Operator = BooleanLiteral true ArrayType String[] VariableName string[]Var ArrayType String[] VariableName string[]Var VariableName length Operator + NumberLiteral numberLiteral Name System MethodName arraycopy VariableName string[]Var NumberLiteral numberLiteral VariableName results NumberLiteral numberLiteral VariableName string[]Var VariableName length VariableName results VariableName string[]Var VariableName length Operator = Name UDecoder MethodName URLDecode VariableName stringVar VariableName string[]Var Operator = VariableName results
SimpleType String VariableName stringVar VariableName mapVar MethodName put VariableName stringVar VariableName stringVar IfStatement if VariableName stringVar Operator != NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral VariableName stringVar VariableName stringVar VariableName stringVar VariableName setVar MethodName add VariableName stringVar
ThisExpression this VariableName stringVar MethodName add VariableName stringVar
ThisExpression this VariableName string[]Var NumberLiteral numberLiteral Operator = VariableName stringVar
ThisExpression this VariableName string[]Var NumberLiteral numberLiteral Operator = VariableName stringVar
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return SimpleType String VariableName stringVar Name UDecoder MethodName URLDecode VariableName stringVar SimpleType String VariableName stringVar ArrayType String[] VariableName stringVar VariableName length Operator + NumberLiteral numberLiteral ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName stringVar VariableName length VariableName i Operator ++ VariableName stringVar VariableName i Operator = VariableName stringVar VariableName i VariableName stringVar VariableName stringVar VariableName length Operator = VariableName stringVar VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName mapVar MethodName get VariableName stringVar
ReturnStatement return NumberLiteral numberLiteral
SimpleType Expression VariableName expressionVar VariableName selectqueryVar MethodName getQualifier IfStatement if VariableName expressionVar Operator != NullLiteral null MethodName resolveAutoAliases VariableName expressionVar
ReturnStatement return Operator - NumberLiteral numberLiteral
ThisExpression this VariableName collectionVar MethodName addAll VariableName collectionVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName injectorVar MethodName getInstance TypeLiteral class MethodName createContext
ReturnStatement return VariableName injectorVar MethodName getInstance TypeLiteral class MethodName createContext VariableName datachannelVar
SimpleType Driver VariableName driverVar MethodName loadDriver ReturnStatement return New new SimpleType DriverDataSource VariableName driverVar VariableName stringVar VariableName stringVar VariableName stringVar
PrimitiveType int VariableName intVar VariableName expressionVar Operator != NullLiteral null VariableName expressionVar VariableName length NumberLiteral numberLiteral IfStatement if VariableName intVar Operator == NumberLiteral numberLiteral ReturnStatement return NullLiteral null SimpleType Expression VariableName expressionVar VariableName expressionVar NumberLiteral numberLiteral IfStatement if VariableName intVar Operator == NumberLiteral numberLiteral ReturnStatement return VariableName expressionVar SimpleType Expression VariableName expressionVar MethodName expressionOfType VariableName intVar ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName intVar VariableName i Operator ++ VariableName expressionVar MethodName setOperand VariableName i VariableName expressionVar VariableName i ReturnStatement return VariableName expressionVar
IfStatement if VariableName tokenVar Operator = VariableName tokenVar VariableName next Operator == NullLiteral null ReturnStatement return VariableName intVar Operator = VariableName tokenVar VariableName next Operator = VariableName expressionparsertokenmanagerVar MethodName getNextToken VariableName kind ReturnStatement return VariableName intVar Operator = VariableName tokenVar VariableName kind
VariableName lifecyclecallbackeventhandler[]Var VariableName lifecycleeventVar MethodName ordinal MethodName addListener VariableName classVar VariableName stringVar
ReturnStatement return VariableName ejbqlexpressionvisitorVar MethodName visitSelectExpression ThisExpression this
ReturnStatement return BooleanLiteral true
PrimitiveType int VariableName intVar MethodName getChildrenCount IfStatement if VariableName intVar Operator < NumberLiteral numberLiteral ReturnStatement return NullLiteral null ReturnStatement return MethodName jjtGetChild VariableName intVar Operator - NumberLiteral numberLiteral MethodName getText
ReturnStatement return VariableName mapVar Operator != NullLiteral null VariableName mapVar MethodName get VariableName stringVar NullLiteral null
ParameterizedType Map VariableName mapVar VariableName cayennepreferenceeditorVar MethodName getChangedPreferences MethodName get VariableName preferencesVar IfStatement if VariableName mapVar Operator == NullLiteral null VariableName mapVar Operator = New new ParameterizedType HashMap VariableName mapVar MethodName put VariableName stringVar VariableName stringVar VariableName cayennepreferenceeditorVar MethodName getChangedPreferences MethodName put VariableName preferencesVar VariableName mapVar
SimpleType DataChannelDescriptor VariableName datachanneldescriptorVar SimpleType DataChannelDescriptor MethodName getProject MethodName getRootNode ParameterizedType Collection VariableName collectionVar VariableName datachanneldescriptorVar MethodName getDataMaps ParameterizedType Iterator VariableName iteratorVar VariableName collectionVar MethodName iterator ParameterizedType ArrayList VariableName arraylistVar New new ParameterizedType ArrayList WhileStatement while VariableName iteratorVar MethodName hasNext VariableName arraylistVar MethodName addAll VariableName iteratorVar MethodName next MethodName getEmbeddables ReturnStatement return VariableName arraylistVar
PrimitiveType int VariableName intVar Operator - NumberLiteral numberLiteral ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < SuperMethodInvocation super MethodName getChildCount VariableName objectVar VariableName i Operator ++ SimpleType DefaultMutableTreeNode VariableName defaultmutabletreenodeVar SimpleType DefaultMutableTreeNode SuperMethodInvocation super MethodName getChild VariableName objectVar VariableName i IfStatement if VariableName filterVar MethodName pass VariableName child VariableName intVar Operator ++ IfStatement if VariableName child Operator == VariableName objectVar ReturnStatement return VariableName intVar ReturnStatement return VariableName intVar
ReturnStatement return VariableName queryVar
ReturnStatement return NullLiteral null
MethodName initStats MethodName setModified VariableName mapVar MethodName put VariableName statVar MethodName getType VariableName statVar
ReturnStatement return Name DataType MethodName newBuilder MethodName setType VariableName typeVar MethodName build
ArrayType DataType[] VariableName datatype[]Var ArrayType DataType[] VariableName typeVar VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName typeVar VariableName length VariableName i Operator ++ VariableName datatype[]Var VariableName i Operator = Name DataType MethodName newBuilder MethodName setType VariableName typeVar VariableName i MethodName build ReturnStatement return VariableName datatype[]Var
ReturnStatement return ThisExpression this VariableName inetsocketaddressVar
VariableName lockVar MethodName lock TryStatement try IfStatement if MethodName getState Operator == VariableName SubQueryState VariableName NEW ReturnStatement return NumberLiteral numberLiteral ReturnStatement return PrimitiveType float VariableName intVar Operator / PrimitiveType float VariableName intVar VariableName lockVar MethodName unlock
IfStatement if Operator ! VariableName catalogserviceVar MethodName existsTable VariableName stringVar VariableName verificationstateVar MethodName addVerification Name String MethodName format StringLiteral stringLiteral VariableName stringVar ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true
ReturnStatement return ThisExpression this VariableName target[]Var Operator != NullLiteral null
VariableName logicalnodevisitorVar MethodName visit ThisExpression this
ThisExpression this VariableName schemaVar Operator = VariableName schemaVar
ReturnStatement return ThisExpression this VariableName schemaVar
ReturnStatement return ThisExpression this VariableName target[]Var
ReturnStatement return MethodName newAndGetBlock VariableName stringVar Operator + VariableName integerVar Operator ++
PrimitiveType int VariableName intVar VariableName integerVar Operator ++ ReturnStatement return VariableName charVar Operator + VariableName stringVar MethodName toLowerCase VariableName intVar Operator > NumberLiteral numberLiteral StringLiteral stringLiteral Operator + VariableName intVar StringLiteral stringLiteral
ReturnStatement return VariableName mapVar MethodName size
Name TUtil MethodName putToNestedMap VariableName mapVar VariableName vVar VariableName vVar VariableName eVar Name TUtil MethodName putToNestedMap VariableName mapVar VariableName vVar VariableName vVar VariableName eVar
IfStatement if VariableName mapVar MethodName containsKey VariableName vVar VariableName mapVar MethodName get VariableName vVar MethodName remove VariableName vVar IfStatement if VariableName mapVar MethodName get VariableName vVar MethodName isEmpty VariableName mapVar MethodName remove VariableName vVar VariableName mapVar MethodName get VariableName vVar MethodName remove VariableName vVar IfStatement if VariableName mapVar MethodName get VariableName vVar MethodName isEmpty VariableName mapVar MethodName remove VariableName vVar ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral Operator + VariableName vVar StringLiteral stringLiteral VariableName vVar
ReturnStatement return VariableName mapVar MethodName containsKey VariableName vVar Operator && VariableName mapVar MethodName get VariableName vVar MethodName containsKey VariableName vVar
ReturnStatement return VariableName mapVar MethodName containsKey VariableName vVar Operator && VariableName mapVar MethodName get VariableName vVar MethodName containsKey VariableName vVar
SimpleType Builder VariableName builderVar MethodName newProperty SimpleType Builder VariableName builderVar Name JoinEnforce MethodName newBuilder VariableName builderVar MethodName setPid VariableName intVar VariableName builderVar MethodName setAlgorithm VariableName joinalgorithmVar VariableName builderVar MethodName setType VariableName EnforceType VariableName JOIN VariableName builderVar MethodName setJoin VariableName builderVar MethodName build Name TUtil MethodName putToNestedList VariableName mapVar VariableName builderVar MethodName getType VariableName builderVar MethodName build
SimpleType Builder VariableName builderVar MethodName newProperty SimpleType Builder VariableName builderVar Name SortEnforce MethodName newBuilder VariableName builderVar MethodName setPid VariableName intVar VariableName builderVar MethodName setAlgorithm VariableName sortalgorithmVar VariableName builderVar MethodName setType VariableName EnforceType VariableName SORT VariableName builderVar MethodName setSort VariableName builderVar MethodName build Name TUtil MethodName putToNestedList VariableName mapVar VariableName builderVar MethodName getType VariableName builderVar MethodName build
VariableName evalnodevisitorVar MethodName visit ThisExpression this
VariableName evalnodevisitorVar MethodName visit ThisExpression this
ReturnStatement return VariableName intVar
ReturnStatement return VariableName inetsocketaddressVar MethodName getAddress MethodName getHostAddress Operator + StringLiteral stringLiteral VariableName inetsocketaddressVar MethodName getPort
SimpleType String VariableName stringVar VariableName tajoconfVar MethodName getVar VariableName ConfVars VariableName ROOT_DIR Name Preconditions MethodName checkNotNull VariableName stringVar VariableName ConfVars VariableName ROOT_DIR VariableName varname Operator + StringLiteral stringLiteral ReturnStatement return New new SimpleType Path VariableName stringVar
SimpleType FlowHandler VariableName flowhandlerVar MethodName getFlowHandler VariableName httpservletrequestVar ReturnStatement return VariableName flowhandleradapterVar MethodName handle VariableName httpservletrequestVar VariableName httpservletresponseVar VariableName flowhandlerVar
ReturnStatement return VariableName autowirecapablebeanfactoryVar MethodName createBean VariableName classVar
SimpleType FlowModelHolder VariableName flowmodelholderVar VariableName mapVar MethodName get VariableName stringVar IfStatement if VariableName flowmodelholderVar Operator == NullLiteral null ThrowStatement throw New new SimpleType NoSuchFlowModelException VariableName stringVar ReturnStatement return VariableName flowmodelholderVar
ReturnStatement return VariableName servletcontextVar
ReturnStatement return VariableName httpservletrequestVar
ReturnStatement return VariableName httpservletresponseVar
TryStatement try ReturnStatement return Name Integer MethodName valueOf VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw New new SimpleType BadlyFormattedFlowExecutionKeyException VariableName stringVar Name CompositeFlowExecutionKey MethodName getFormat VariableName e
SimpleType Gson VariableName gsonVar New new SimpleType Gson ReturnStatement return VariableName gsonVar MethodName toJson VariableName objectVar
ReturnStatement return MethodName excluded VariableName stringVar VariableName stringVar
ReturnStatement return MethodName excluded VariableName stringVar VariableName stringVar
ReturnStatement return Name String MethodName format StringLiteral stringLiteral VariableName stringVar VariableName portmappingVar MethodName getProtocol VariableName portmappingVar MethodName getPort
ReturnStatement return Name String MethodName format StringLiteral stringLiteral VariableName portmappingVar MethodName getProtocol VariableName portmappingVar MethodName getPort
SimpleType String VariableName stringVar NullLiteral null TryStatement try VariableName stringVar Operator = MethodName readParameterValue StringLiteral stringLiteral CatchClause catch SimpleType ParameterNotFoundException VariableName parameternotfoundexceptionVar IfStatement if VariableName logVar MethodName isDebugEnabled VariableName logVar MethodName debug StringLiteral stringLiteral Operator + VariableName e MethodName getMessage IfStatement if VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName isEmpty ReturnStatement return NullLiteral null ReturnStatement return VariableName stringVar
VariableName navigablesetVar MethodName add VariableName kafkaspoutmessageidVar
ReturnStatement return StringLiteral stringLiteral Operator + StringLiteral stringLiteral Operator + VariableName timeintervalVar StringLiteral stringLiteral VariableName timeintervalVar StringLiteral stringLiteral VariableName intVar StringLiteral stringLiteral VariableName timeintervalVar CharacterLiteral charLiteral
IfStatement if VariableName nimbusclientVar Operator != NullLiteral null VariableName nimbusclientVar MethodName close VariableName nimbusclientVar Operator = NullLiteral null
SimpleType CgroupCommon VariableName cgroupcommonVar New new SimpleType CgroupCommon VariableName stringVar ThisExpression this VariableName hierarchyVar ThisExpression this VariableName cgroupcommonVar IfStatement if Operator ! ThisExpression this VariableName cgroupcommonVar MethodName getChildren MethodName contains VariableName cgroupcommonVar Name LOG MethodName warn StringLiteral stringLiteral VariableName cgroupcommonVar ReturnStatement return Name Collections MethodName emptySet ReturnStatement return VariableName cgroupcommonVar MethodName getPids
ReturnStatement return New new SimpleType GlobalStreamId MethodName getSourceComponent VariableName stringVar
IfStatement if VariableName groupinginfoVar Operator == NullLiteral null VariableName boltdeclarerVar MethodName shuffleGrouping VariableName nodeVar MethodName getComponentId VariableName stringVar VariableName groupinginfoVar MethodName declareGrouping VariableName boltdeclarerVar VariableName nodeVar MethodName getComponentId VariableName stringVar VariableName groupinginfoVar MethodName getFields
ReturnStatement return StringLiteral stringLiteral Operator + VariableName intVar
ReturnStatement return Name UUID MethodName randomUUID MethodName getLeastSignificantBits
IfStatement if Name System MethodName getenv StringLiteral stringLiteral Operator != NullLiteral null ReturnStatement return Name System MethodName getenv StringLiteral stringLiteral MethodName equals StringLiteral stringLiteral ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName stringVar
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet ArrayType String[] VariableName string[]Var VariableName stringVar MethodName split StringLiteral stringLiteral EnhancedForStatement for SimpleType String VariableName stringVar VariableName string[]Var SimpleType SubSystemType VariableName subsystemtypeVar Name SubSystemType MethodName getSubSystem VariableName subSystem IfStatement if VariableName type Operator != NullLiteral null VariableName setVar MethodName add VariableName type ReturnStatement return VariableName setVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder IfStatement if VariableName setVar MethodName size Operator == NumberLiteral numberLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString EnhancedForStatement for SimpleType SubSystemType VariableName subsystemtypeVar VariableName setVar VariableName stringbuilderVar MethodName append VariableName type MethodName name MethodName append StringLiteral stringLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString MethodName substring NumberLiteral numberLiteral VariableName stringbuilderVar MethodName length Operator - NumberLiteral numberLiteral
EnhancedForStatement for SimpleType SubSystemType VariableName subsystemtypeVar ThisExpression this VariableName setVar IfStatement if VariableName stringVar Operator == VariableName subsystemtypeVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
TryStatement try IfStatement if VariableName booleanVar ReturnStatement return Name ObjectUtils MethodName toCompressedBytes VariableName nodeVar ReturnStatement return Name ObjectUtils MethodName toBytes VariableName nodeVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName ioe CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName e
Modifier final SimpleType Node VariableName nodeVar New new SimpleType Node TryStatement try IfStatement if VariableName booleanVar Name ObjectUtils MethodName readCompressedObject VariableName byte[]Var NumberLiteral numberLiteral VariableName intVar VariableName nodeVar Name ObjectUtils MethodName readObject VariableName byte[]Var VariableName intVar VariableName nodeVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName ioe CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName e ReturnStatement return VariableName nodeVar
TryStatement try IfStatement if VariableName booleanVar ReturnStatement return Name ObjectUtils MethodName toCompressedBytes VariableName nodeVar ReturnStatement return Name ObjectUtils MethodName toBytes VariableName nodeVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName ioe CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName e
Modifier final SimpleType Node VariableName nodeVar New new SimpleType Node TryStatement try IfStatement if VariableName booleanVar Name ObjectUtils MethodName readCompressedObject VariableName byte[]Var NumberLiteral numberLiteral VariableName intVar VariableName nodeVar Name ObjectUtils MethodName readObject VariableName byte[]Var VariableName intVar VariableName nodeVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName ioe CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName e ReturnStatement return VariableName nodeVar
ReturnStatement return Name Math MethodName abs VariableName floatVar Operator - VariableName floatVar Operator - VariableName floatVar
IfStatement if VariableName doubleVar Operator < Operator - NumberLiteral numberLiteral Operator || VariableName doubleVar Operator > NumberLiteral numberLiteral ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName doubleVar ReturnStatement return PrimitiveType int MethodName floor VariableName doubleVar Operator + NumberLiteral numberLiteral Operator / NumberLiteral numberLiteral Operator * NumberLiteral numberLiteral Operator << VariableName intVar
ReturnStatement return New new SimpleType SimpleDateFormat StringLiteral stringLiteral MethodName format New new SimpleType Date
ReturnStatement return StringLiteral stringLiteral Operator + VariableName constraintviolationVar MethodName getInvalidValue Operator != NullLiteral null StringLiteral stringLiteral Operator + VariableName constraintviolationVar MethodName getInvalidValue MethodName toString StringLiteral stringLiteral StringLiteral stringLiteral StringLiteral stringLiteral VariableName constraintviolationVar MethodName getRootBeanClass MethodName getSimpleName StringLiteral stringLiteral VariableName constraintviolationVar MethodName getPropertyPath StringLiteral stringLiteral VariableName constraintviolationVar MethodName getMessage
ReturnStatement return VariableName multivaluedmapVar
VariableName schemaVar Operator = MethodName createSchema VariableName listVar VariableName stringVar VariableName busVar Operator == NullLiteral null Name BusFactory MethodName getThreadDefaultBus VariableName busVar
MethodName setServiceBeans Name Arrays MethodName asList VariableName objectVar
SimpleType String VariableName stringVar VariableName endpointinfoVar MethodName getAddress IfStatement if VariableName stringVar MethodName startsWith StringLiteral stringLiteral VariableName stringVar Operator = StringLiteral stringLiteral Operator + VariableName stringVar MethodName substring NumberLiteral numberLiteral ReturnStatement return VariableName stringVar
SimpleType String VariableName stringVar VariableName endpointinfoVar MethodName getAddress IfStatement if VariableName stringVar MethodName startsWith StringLiteral stringLiteral VariableName stringVar Operator = StringLiteral stringLiteral Operator + VariableName stringVar MethodName substring NumberLiteral numberLiteral ReturnStatement return VariableName stringVar
IfStatement if Operator ! VariableName exchangeVar MethodName isSynchronous Operator && VariableName stringVar Operator != NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral
SimpleType PolicyEngine VariableName policyengineVar VariableName busVar MethodName getExtension TypeLiteral class SynchronizedStatement synchronized VariableName policyengineVar VariableName policyengineVar MethodName setEnabled VariableName booleanVar VariableName policyengineVar MethodName setIgnoreUnknownAssertions VariableName booleanVar IfStatement if NullLiteral null Operator != VariableName alternativeselectorVar VariableName policyengineVar MethodName setAlternativeSelector VariableName alternativeselectorVar
MethodName setEncodedSignature Name Base64UrlUtility MethodName encode VariableName stringVar ReturnStatement return MethodName getSignedEncodedJws
MethodName setEncodedSignature Name Base64UrlUtility MethodName encode VariableName byte[]Var ReturnStatement return MethodName getSignedEncodedJws
VariableName encryptionpropertiesVar MethodName setEncryptionKeyIdType VariableName stringVar
SimpleType SecurityContext VariableName securitycontextVar VariableName containerrequestcontextVar MethodName getSecurityContext IfStatement if VariableName securitycontextVar Operator == NullLiteral null Operator || VariableName securitycontextVar MethodName getUserPrincipal Operator == NullLiteral null ThrowStatement throw Name ExceptionUtils MethodName toNotAuthorizedException NullLiteral null NullLiteral null
IfStatement if VariableName booleanVar VariableName uribuilderVar MethodName queryParam StringLiteral stringLiteral StringLiteral stringLiteral
ThisExpression this VariableName stringVar Operator = VariableName stringVar
VariableName oauthredirectionstateVar MethodName setClientCodeChallenge VariableName multivaluedmapVar MethodName getFirst VariableName OAuthConstants VariableName AUTHORIZATION_CODE_CHALLENGE
ThisExpression this VariableName authenticationmethodVar Operator = VariableName authenticationmethodVar
VariableName oauthdataproviderVar Operator = VariableName oauthdataproviderVar
SimpleType String VariableName stringVar VariableName requesttokenVar MethodName getCallback IfStatement if VariableName stringVar Operator == NullLiteral null VariableName stringVar Operator = VariableName requesttokenVar MethodName getClient MethodName getApplicationURI IfStatement if VariableName stringVar Operator == NullLiteral null ThrowStatement throw New new SimpleType OAuthProblemException VariableName OAuth VariableName Problems VariableName TOKEN_REJECTED ReturnStatement return VariableName stringVar
SimpleType String VariableName stringVar Name HttpUtils MethodName getPathToMatch VariableName messageVar BooleanLiteral true ParameterizedType List VariableName listVar Name JAXRSUtils MethodName getRootResources VariableName messageVar ParameterizedType Map VariableName mapVar Name JAXRSUtils MethodName selectResourceClass VariableName listVar VariableName stringVar VariableName messageVar IfStatement if VariableName mapVar Operator == NullLiteral null ReturnStatement return NullLiteral null ParameterizedType MultivaluedMap VariableName multivaluedmapVar New new ParameterizedType MetadataMap SimpleType OperationResourceInfo VariableName operationresourceinfoVar MethodName findPreflightMethod VariableName mapVar VariableName stringVar VariableName stringVar VariableName multivaluedmapVar VariableName messageVar ReturnStatement return VariableName operationresourceinfoVar Operator == NullLiteral null NullLiteral null VariableName operationresourceinfoVar MethodName getAnnotatedMethod
SimpleType KeyInfoBean VariableName keyinfobeanVar New new SimpleType KeyInfoBean IfStatement if VariableName x509certificateVar Operator != NullLiteral null VariableName keyinfobeanVar MethodName setCertificate VariableName x509certificateVar VariableName keyinfobeanVar MethodName setCertIdentifer VariableName CERT_IDENTIFIER VariableName X509_CERT IfStatement if VariableName publickeyVar Operator != NullLiteral null VariableName keyinfobeanVar MethodName setPublicKey VariableName publickeyVar VariableName keyinfobeanVar MethodName setCertIdentifer VariableName CERT_IDENTIFIER VariableName KEY_VALUE ReturnStatement return VariableName keyinfobeanVar
IfStatement if MethodName shouldValidate VariableName messageVar SimpleType Schema VariableName schemaVar Name EndpointReferenceUtils MethodName getSchema VariableName serviceVar MethodName getServiceInfos MethodName get NumberLiteral numberLiteral VariableName messageVar MethodName getExchange MethodName getBus VariableName datawriterVar MethodName setSchema VariableName schema
EnhancedForStatement for SimpleType XmlSchemaSequenceMember VariableName xmlschemasequencememberVar VariableName xmlschemasequenceVar MethodName getItems IfStatement if VariableName seqMember Instanceof instanceof SimpleType XmlSchemaElement MethodName addElementCrossImportsElement VariableName xmlschemaVar SimpleType XmlSchemaElement VariableName seqMember
ReturnStatement return New new ParameterizedType LocationSpec VariableName classVar
VariableName blobstoreVar MethodName removeBlob VariableName stringVar VariableName stringVar
ReturnStatement return VariableName threadlocalVar MethodName get
ReturnStatement return MethodName getKeyMaybeInternal VariableName configkeyVar VariableName name MethodName getStringKeyMaybe VariableName name VariableName booleanVar
IfStatement if VariableName mapVar MethodName containsKey VariableName stringVar IfStatement if VariableName booleanVar MethodName markUsed VariableName stringVar ReturnStatement return Name Maybe MethodName of VariableName mapVar MethodName get VariableName stringVar ReturnStatement return Name Maybe MethodName absent
IfStatement if VariableName booleanVar ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + VariableName configbagVar StringLiteral stringLiteral ThisExpression this StringLiteral stringLiteral MethodName putAll VariableName configbagVar MethodName getAllConfig MethodName markAll Name Sets MethodName difference VariableName configbagVar MethodName getAllConfig MethodName keySet VariableName configbagVar MethodName getUnusedConfig MethodName keySet MethodName setDescription VariableName configbagVar MethodName getDescription ReturnStatement return ThisExpression this
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
SynchronizedStatement synchronized VariableName mapVar VariableName mapVar MethodName put VariableName locationdefinitionVar MethodName getId VariableName locationdefinitionVar
ReturnStatement return MethodName getSpecResolver VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName managementnodestateVar
IfStatement if Operator ! MethodName isEntitled VariableName entitlementmanagerVar VariableName entitlementclassVar VariableName tVar ThrowStatement throw New new SimpleType NotEntitledException MethodName getEntitlementContext VariableName entitlementclassVar VariableName tVar
VariableName basicexecutionmanagerVar MethodName deleteTag VariableName entityVar VariableName basicexecutionmanagerVar MethodName deleteTag Name BrooklynTaskTags MethodName tagForContextEntity VariableName entityVar VariableName basicexecutionmanagerVar MethodName deleteTag Name BrooklynTaskTags MethodName tagForCallerEntity VariableName entityVar VariableName basicexecutionmanagerVar MethodName deleteTag Name BrooklynTaskTags MethodName tagForTargetEntity VariableName entityVar
IfStatement if VariableName stringVar Operator != NullLiteral null Operator && VariableName stringVar MethodName length Operator > NumberLiteral numberLiteral ReturnStatement return VariableName stringVar ReturnStatement return MethodName getClass MethodName getCanonicalName
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return New new SimpleType BasicTagSupport
SimpleType EntityDriver VariableName entitydriverVar VariableName downloadrequirementVar MethodName getEntityDriver SimpleType String VariableName stringVar VariableName downloadrequirementVar MethodName getAddonName ParameterizedType Map VariableName mapVar VariableName downloadrequirementVar MethodName getProperties IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return Name MutableMap MethodName builder MethodName putAll MethodName getBasicEntitySubstitutions VariableName entitydriverVar MethodName putAll VariableName mapVar MethodName build ReturnStatement return Name MutableMap MethodName builder MethodName putAll MethodName getBasicAddonSubstitutions VariableName entitydriverVar VariableName stringVar MethodName putAll VariableName mapVar MethodName build
ReturnStatement return New new SimpleType GetEntityAttributeFunction
ReturnStatement return New new SimpleType GetEntityConfigFunction
ReturnStatement return New new SimpleType GetEntityDisplayName
ReturnStatement return New new SimpleType GetIdFunction
ReturnStatement return New new SimpleType AppsSupplier
ReturnStatement return New new ParameterizedType EntityAndAttribute VariableName entityVar VariableName attributesensorVar
ReturnStatement return New new ParameterizedType BasicConfigKey VariableName classVar VariableName stringVar
ReturnStatement return New new ParameterizedType BasicConfigKey VariableName classVar VariableName stringVar VariableName stringVar
ReturnStatement return New new ParameterizedType BasicConfigKey VariableName typetokenVar VariableName stringVar VariableName stringVar
ReturnStatement return New new ParameterizedType BasicConfigKey VariableName classVar VariableName stringVar VariableName stringVar VariableName tVar
ReturnStatement return New new ParameterizedType BasicConfigKey VariableName typetokenVar VariableName stringVar VariableName stringVar VariableName tVar
ReturnStatement return New new ParameterizedType BasicConfigKey SimpleType Class Name Preconditions MethodName checkNotNull VariableName tVar StringLiteral stringLiteral MethodName getClass VariableName stringVar VariableName stringVar VariableName tVar
VariableName mapVar MethodName remove Name ConfigKeys MethodName newConfigKey TypeLiteral class VariableName stringVar
VariableName mapVar MethodName remove VariableName configkeyVar
ReturnStatement return VariableName stringVar
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null PrimitiveType int VariableName intVar VariableName stringVar MethodName lastIndexOf VariableName charVar IfStatement if VariableName intVar Operator != Operator - NumberLiteral numberLiteral ReturnStatement return VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName intVar ReturnStatement return NullLiteral null
ReturnStatement return VariableName stringVar
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ParameterizedType CatalogItemDo VariableName catalogitemdoVar MethodName getCatalogItemDo VariableName stringVar VariableName stringVar IfStatement if VariableName catalogitemdoVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return VariableName catalogitemdoVar MethodName getDto
IfStatement if VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ParameterizedType CatalogItem VariableName catalogitemVar MethodName getCatalogItem VariableName stringVar VariableName stringVar IfStatement if VariableName catalogitemVar Operator == NullLiteral null ReturnStatement return NullLiteral null IfStatement if VariableName classVar Operator == NullLiteral null Operator || VariableName classVar MethodName isAssignableFrom VariableName catalogitemVar MethodName getCatalogItemJavaType ReturnStatement return ParameterizedType CatalogItem VariableName catalogitemVar ReturnStatement return NullLiteral null
IfStatement if Operator ! MethodName getCatalog MethodName isLoaded VariableName loggerVar MethodName debug StringLiteral stringLiteral MethodName load ReturnStatement return Name ImmutableList MethodName copyOf SimpleType Iterable VariableName catalogdoVar MethodName getIdCache MethodName values
VariableName mapVar MethodName put VariableName classVar MethodName getName VariableName classVar
ReturnStatement return MethodName absent New new SimpleType IllegalStateExceptionSupplier VariableName stringVar
ReturnStatement return New new ParameterizedType Present VariableName tVar
IfStatement if MethodName isPresent ReturnStatement return Name Optional MethodName of MethodName get ReturnStatement return Name Optional MethodName absent
VariableName atomicbooleanVar MethodName set BooleanLiteral false MethodName interrupt
IfStatement if VariableName throwableVar Instanceof instanceof SimpleType NoClassDefFoundError ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType String VariableName stringVar Name System MethodName getProperty StringLiteral stringLiteral MethodName toLowerCase ReturnStatement return VariableName stringVar MethodName startsWith StringLiteral stringLiteral
IfStatement if MethodName isShorterThan VariableName durationVar ReturnStatement return VariableName durationVar ReturnStatement return ThisExpression this
IfStatement if MethodName isLongerThan VariableName durationVar ReturnStatement return VariableName durationVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName stopwatchVar MethodName isRunning
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return MethodName format StringLiteral stringLiteral VariableName stringVar VariableName stringVar
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return MethodName format StringLiteral stringLiteral VariableName stringVar VariableName stringVar
ReturnStatement return MethodName getConfig VariableName configkeyVar
ReturnStatement return MethodName getConfig VariableName configkeyVar
PrimitiveType long VariableName longVar MethodName getMaxReachedNotificationDelay MethodName toMilliseconds VariableName sizehistoryVar Operator = New new SimpleType SizeHistory VariableName longVar PrimitiveType long VariableName longVar Name Math MethodName max MethodName getResizeUpStabilizationDelay MethodName toMilliseconds MethodName getResizeDownStabilizationDelay MethodName toMilliseconds VariableName sizehistoryVar Operator = New new SimpleType SizeHistory VariableName longVar VariableName scheduledexecutorserviceVar Operator = Name Executors MethodName newSingleThreadScheduledExecutor MethodName newThreadFactory
VariableName booleanVar Operator = BooleanLiteral false IfStatement if VariableName jmxconnectorVar Operator != NullLiteral null IfStatement if Name LOG MethodName isDebugEnabled Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar TryStatement try VariableName jmxconnectorVar MethodName close CatchClause catch SimpleType Exception VariableName exceptionVar IfStatement if Name LOG MethodName isDebugEnabled Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar VariableName e MethodName getMessage IfStatement if Name LOG MethodName isTraceEnabled Name LOG MethodName trace StringLiteral stringLiteral VariableName e VariableName jmxconnectorVar Operator = NullLiteral null VariableName mbeanserverconnectionVar Operator = NullLiteral null
ReturnStatement return Name Urls MethodName mergePaths MethodName getRunDir MethodName getJmxAgentJarBasename
VariableName loggerVar MethodName debug StringLiteral stringLiteral MethodName getEntity MethodName getLocation ParameterizedType ProcessTaskWrapper VariableName processtaskwrapperVar Name Entities MethodName submit MethodName getEntity Name SshTasks MethodName newSshExecTaskFactory MethodName getLocation StringLiteral stringLiteral VariableName processtaskwrapperVar MethodName get SimpleType String VariableName stringVar VariableName processtaskwrapperVar MethodName getStdout MethodName trim IfStatement if Operator ! Name Strings MethodName isBlank VariableName stringVar VariableName loggerVar MethodName debug StringLiteral stringLiteral ArrayType Object[] ArrayInitializer arrayInitializer ReturnStatement return Name Optional MethodName of VariableName stringVar VariableName loggerVar MethodName debug StringLiteral stringLiteral MethodName getEntity MethodName getLocation ReturnStatement return Name Optional MethodName absent
VariableName mapVar MethodName put VariableName stringVar VariableName objectVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName isEmpty Operator || StringLiteral stringLiteral MethodName equalsIgnoreCase VariableName stringVar Operator || StringLiteral stringLiteral MethodName equalsIgnoreCase VariableName stringVar
ReturnStatement return VariableName httpservletrequestVar MethodName getSession MethodName getAttribute VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName uriVar
VariableName securityconstraintVar MethodName setDisplayName VariableName stringVar ReturnStatement return ThisExpression this
IfStatement if Name QUIT_CMD MethodName equalsIgnoreCase VariableName stringVar Operator || Name EXIT_CMD MethodName equalsIgnoreCase VariableName stringVar ReturnStatement return BooleanLiteral true VariableName stringVar Operator = New new SimpleType StringBuilder VariableName stringVar MethodName reverse MethodName toString ReturnStatement return Name QUIT_CMD MethodName equalsIgnoreCase VariableName stringVar Operator || Name EXIT_CMD MethodName equalsIgnoreCase VariableName stringVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName booleanVar Operator != NullLiteral null Operator && VariableName booleanVar
ThisExpression this VariableName classfiltertypeVar Operator = VariableName classfiltertypeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return MethodName getModuleContext MethodName getId
ReturnStatement return VariableName mapVar MethodName get VariableName appinfoVar
IfStatement if VariableName indexvaluelistVar Operator == NullLiteral null VariableName indexvaluelistVar Operator = New new ParameterizedType IndexValueList ReturnStatement return VariableName indexvaluelistVar
Modifier final ParameterizedType SecurityService VariableName securityserviceVar Name SystemInstance MethodName get MethodName getComponent TypeLiteral class IfStatement if VariableName securityserviceVar Operator != NullLiteral null ReturnStatement return VariableName securityserviceVar MethodName getCallerPrincipal ReturnStatement return NullLiteral null
IfStatement if VariableName objectVar Operator != NullLiteral null Operator && Operator ! VariableName objectVar Instanceof instanceof SimpleType WebBeansContext ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName objectVar MethodName getClass MethodName getName VariableName threadlocalVar MethodName set SimpleType WebBeansContext VariableName objectVar
MethodName cleanTimerData MethodName shutdownMyScheduler
IfStatement if ThisExpression this VariableName intVar Operator == NullLiteral null MethodName setPoolSize VariableName intVar
ReturnStatement return VariableName atomiclongVar MethodName get
ReturnStatement return VariableName listVar
Modifier final SimpleType PortEntity VariableName portentityVar MethodName createStateEntity VariableName portentityVar StringLiteral stringLiteral ReturnStatement return MethodName updateOutputPort VariableName portentityVar
TryStatement try ReturnStatement return Name Integer MethodName parseInt MethodName getProperty VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ReturnStatement return VariableName intVar
Modifier final ParameterizedType Iterator VariableName iteratorVar VariableName sortedmapVar MethodName entrySet MethodName iterator WhileStatement while VariableName iteratorVar MethodName hasNext Modifier final ParameterizedType Entry VariableName entryVar VariableName iteratorVar MethodName next Modifier final ParameterizedType List VariableName listVar VariableName entry MethodName getValue Modifier final SimpleType IndexLocation VariableName indexlocationVar New new SimpleType IndexLocation VariableName fileVar Name DirectoryUtils MethodName getIndexTimestamp VariableName fileVar VariableName fileVar MethodName getName VariableName locations MethodName remove VariableName locToRemove IfStatement if VariableName locations MethodName isEmpty VariableName iteratorVar MethodName remove
ReturnStatement return VariableName stringVar
ReturnStatement return New new SimpleType MqttClient VariableName stringVar VariableName stringVar VariableName memorypersistenceVar
Modifier final SimpleType RecordSchema VariableName recordschemaVar VariableName concurrentmapVar MethodName get VariableName stringVar IfStatement if VariableName recordschemaVar Operator == NullLiteral null ThrowStatement throw New new SimpleType SchemaNotFoundException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral ReturnStatement return VariableName recordschemaVar
SimpleType ComponentLog VariableName componentlogVar MethodName getLogger ParameterizedType Map VariableName mapVar VariableName actionVar MethodName getAttributes Modifier final SimpleType String VariableName stringVar VariableName mapVar MethodName get StringLiteral stringLiteral Modifier final SimpleType LogLevel VariableName loglevelVar MethodName getLogLevel VariableName stringVar Name LogLevel MethodName valueOf VariableName stringVar Modifier final SimpleType String VariableName stringVar Name StringUtils MethodName isNotEmpty VariableName mapVar MethodName get StringLiteral stringLiteral VariableName mapVar MethodName get StringLiteral stringLiteral VariableName stringVar Modifier final SimpleType String VariableName stringVar MethodName createFactsLogMessage VariableName mapVar VariableName stringVar VariableName componentlogVar MethodName log VariableName loglevelVar VariableName stringVar
ReturnStatement return New new SimpleType KerberosKeytabUser VariableName kerberoscredentialsserviceVar MethodName getPrincipal VariableName kerberoscredentialsserviceVar MethodName getKeytab
ReturnStatement return VariableName kerberosuserVar
ReturnStatement return VariableName atomicreferenceVar MethodName get MethodName isBatchSupported
ReturnStatement return VariableName tenantauthorizableVar
IfStatement if VariableName fileVar MethodName exists Operator && Operator ! VariableName fileVar MethodName isDirectory ThrowStatement throw New new SimpleType IOException VariableName fileVar MethodName getAbsolutePath Operator + StringLiteral stringLiteral IfStatement if Operator ! VariableName fileVar MethodName exists Modifier final PrimitiveType boolean VariableName booleanVar VariableName fileVar MethodName mkdirs IfStatement if Operator ! VariableName made ThrowStatement throw New new SimpleType IOException VariableName fileVar MethodName getAbsolutePath Operator + StringLiteral stringLiteral IfStatement if Operator ! VariableName fileVar MethodName canRead Operator && VariableName fileVar MethodName canWrite ThrowStatement throw New new SimpleType IOException VariableName fileVar MethodName getAbsolutePath Operator + StringLiteral stringLiteral
ReturnStatement return MethodName getExpandedInstallDir
SimpleType String VariableName stringVar VariableName entity MethodName getConfig VariableName MariaDbNode VariableName DATA_DIR ReturnStatement return VariableName stringVar Operator == NullLiteral null StringLiteral stringLiteral VariableName stringVar
ReturnStatement return MethodName getExpandedInstallDir
ReturnStatement return Name NaturalOrderComparator.INSTANCE MethodName compare MethodName getEntity MethodName getConfig VariableName CouchbaseNode VariableName SUGGESTED_VERSION StringLiteral stringLiteral Operator < NumberLiteral numberLiteral
ReturnStatement return New new ParameterizedType LocationSpec VariableName classVar
Name Iterables MethodName addAll ThisExpression this VariableName setVar VariableName iterableVar ReturnStatement return MethodName self
MethodName checkNotNull VariableName throwableVar StringLiteral stringLiteral SimpleType String VariableName stringVar Name Optional MethodName fromNullable VariableName throwableVar MethodName getMessage MethodName or VariableName throwableVar MethodName getClass MethodName getName ReturnStatement return MethodName builder MethodName message VariableName stringVar MethodName details Name Throwables MethodName getStackTraceAsString VariableName throwableVar
IfStatement if VariableName stringVar Operator == NullLiteral null VariableName stringVar Operator = StringLiteral stringLiteral VariableName blobstoreVar MethodName createContainerInLocation NullLiteral null VariableName stringVar SimpleType ByteSource VariableName bytesourceVar Name ByteSource MethodName wrap VariableName stringVar MethodName getBytes VariableName Charsets VariableName UTF_8 SimpleType Blob VariableName blobVar TryStatement try VariableName blobVar Operator = VariableName blobstoreVar MethodName blobBuilder VariableName stringVar MethodName payload VariableName bytesourceVar MethodName contentLength VariableName bytesourceVar MethodName size MethodName build CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw Name Throwables MethodName propagate VariableName e VariableName blobstoreVar MethodName putBlob VariableName stringVar VariableName blobVar
VariableName blobstoreVar MethodName removeBlob VariableName stringVar VariableName stringVar
ReturnStatement return VariableName threadlocalVar MethodName get
IfStatement if VariableName booleanVar ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + VariableName configbagVar StringLiteral stringLiteral ThisExpression this StringLiteral stringLiteral MethodName putAll VariableName configbagVar MethodName getAllConfig MethodName markAll Name Sets MethodName difference VariableName configbagVar MethodName getAllConfig MethodName keySet VariableName configbagVar MethodName getUnusedConfig MethodName keySet MethodName setDescription VariableName configbagVar MethodName getDescription ReturnStatement return ThisExpression this
ReturnStatement return MethodName isAnyTypeOrSuperSatisfying VariableName setVar Name Predicates MethodName assignableFrom VariableName classVar
ReturnStatement return VariableName mapVar MethodName get VariableName stringVar
ReturnStatement return MethodName getSpecResolver VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName managementnodestateVar
IfStatement if Operator ! MethodName isEntitled VariableName entitlementmanagerVar VariableName entitlementclassVar VariableName tVar ThrowStatement throw New new SimpleType NotEntitledException MethodName getEntitlementContext VariableName entitlementclassVar VariableName tVar
VariableName basicexecutionmanagerVar MethodName deleteTag VariableName entityVar VariableName basicexecutionmanagerVar MethodName deleteTag Name BrooklynTaskTags MethodName tagForContextEntity VariableName entityVar VariableName basicexecutionmanagerVar MethodName deleteTag Name BrooklynTaskTags MethodName tagForCallerEntity VariableName entityVar VariableName basicexecutionmanagerVar MethodName deleteTag Name BrooklynTaskTags MethodName tagForTargetEntity VariableName entityVar
IfStatement if VariableName stringVar Operator != NullLiteral null Operator && VariableName stringVar MethodName length Operator > NumberLiteral numberLiteral ReturnStatement return VariableName stringVar ReturnStatement return MethodName getClass MethodName getCanonicalName
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return New new SimpleType BasicTagSupport
SimpleType EntityDriver VariableName entitydriverVar VariableName downloadrequirementVar MethodName getEntityDriver SimpleType String VariableName stringVar VariableName downloadrequirementVar MethodName getAddonName ParameterizedType Map VariableName mapVar VariableName downloadrequirementVar MethodName getProperties IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return Name MutableMap MethodName builder MethodName putAll MethodName getBasicEntitySubstitutions VariableName entitydriverVar MethodName putAll VariableName mapVar MethodName build ReturnStatement return Name MutableMap MethodName builder MethodName putAll MethodName getBasicAddonSubstitutions VariableName entitydriverVar VariableName stringVar MethodName putAll VariableName mapVar MethodName build
ReturnStatement return New new SimpleType GetEntityAttributeFunction
ReturnStatement return New new SimpleType GetEntityConfigFunction
ReturnStatement return New new SimpleType GetEntityDisplayName
ReturnStatement return New new SimpleType GetIdFunction
ReturnStatement return New new SimpleType AppsSupplier
ReturnStatement return New new ParameterizedType EntityAndAttribute VariableName entityVar VariableName attributesensorVar
VariableName mapVar MethodName put VariableName configkeyVar VariableName objectVar ReturnStatement return ThisExpression this
ReturnStatement return New new ParameterizedType Present VariableName tVar
VariableName atomicbooleanVar MethodName set BooleanLiteral false MethodName interrupt
SimpleType String VariableName stringVar Name System MethodName getProperty StringLiteral stringLiteral MethodName toLowerCase ReturnStatement return VariableName stringVar MethodName startsWith StringLiteral stringLiteral
IfStatement if MethodName isShorterThan VariableName durationVar ReturnStatement return VariableName durationVar ReturnStatement return ThisExpression this
IfStatement if MethodName isLongerThan VariableName durationVar ReturnStatement return VariableName durationVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName stopwatchVar MethodName isRunning
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return MethodName format StringLiteral stringLiteral VariableName stringVar VariableName stringVar
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return MethodName format StringLiteral stringLiteral VariableName stringVar VariableName stringVar
ReturnStatement return MethodName getConfig VariableName configkeyVar
ReturnStatement return MethodName getConfig VariableName configkeyVar
PrimitiveType long VariableName longVar MethodName getMaxReachedNotificationDelay MethodName toMilliseconds VariableName sizehistoryVar Operator = New new SimpleType SizeHistory VariableName longVar PrimitiveType long VariableName longVar Name Math MethodName max MethodName getResizeUpStabilizationDelay MethodName toMilliseconds MethodName getResizeDownStabilizationDelay MethodName toMilliseconds VariableName sizehistoryVar Operator = New new SimpleType SizeHistory VariableName longVar VariableName scheduledexecutorserviceVar Operator = Name Executors MethodName newSingleThreadScheduledExecutor MethodName newThreadFactory
VariableName booleanVar Operator = BooleanLiteral false IfStatement if VariableName jmxconnectorVar Operator != NullLiteral null IfStatement if Name LOG MethodName isDebugEnabled Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar TryStatement try VariableName jmxconnectorVar MethodName close CatchClause catch SimpleType Exception VariableName exceptionVar IfStatement if Name LOG MethodName isDebugEnabled Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar VariableName e MethodName getMessage IfStatement if Name LOG MethodName isTraceEnabled Name LOG MethodName trace StringLiteral stringLiteral VariableName e VariableName jmxconnectorVar Operator = NullLiteral null VariableName mbeanserverconnectionVar Operator = NullLiteral null
ReturnStatement return Name Urls MethodName mergePaths MethodName getRunDir MethodName getJmxAgentJarBasename
VariableName loggerVar MethodName debug StringLiteral stringLiteral MethodName getEntity MethodName getLocation ParameterizedType ProcessTaskWrapper VariableName processtaskwrapperVar Name Entities MethodName submit MethodName getEntity Name SshTasks MethodName newSshExecTaskFactory MethodName getLocation StringLiteral stringLiteral VariableName processtaskwrapperVar MethodName get SimpleType String VariableName stringVar VariableName processtaskwrapperVar MethodName getStdout MethodName trim IfStatement if Operator ! Name Strings MethodName isBlank VariableName stringVar VariableName loggerVar MethodName debug StringLiteral stringLiteral ArrayType Object[] ArrayInitializer arrayInitializer ReturnStatement return Name Optional MethodName of VariableName stringVar VariableName loggerVar MethodName debug StringLiteral stringLiteral MethodName getEntity MethodName getLocation ReturnStatement return Name Optional MethodName absent
VariableName mapVar MethodName put VariableName stringVar VariableName objectVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName DavMethods VariableName METHOD_REPORT
ReturnStatement return MethodName count VariableName stringVar BooleanLiteral false VariableName longVar
ReturnStatement return VariableName booleanVar
VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return New new SimpleType ClassIntrospectorBuilder ThisExpression this
ReturnStatement return VariableName string[]Var
ReturnStatement return VariableName classVar Operator != TypeLiteral class Operator && Operator ! MethodName isSQLDateAndTimeTimeZoneSameAsNormal Operator && MethodName isSQLDateOrTimeClass VariableName classVar
ReturnStatement return VariableName booleanVar Operator && Operator ! MethodName isSQLDateAndTimeTimeZoneSameAsNormal
IfStatement if VariableName localcontextstackVar Operator != NullLiteral null ForStatement for PrimitiveType int VariableName intVar VariableName localcontextstackVar MethodName size Operator - NumberLiteral numberLiteral VariableName i Operator >= NumberLiteral numberLiteral VariableName i Operator -- SimpleType LocalContext VariableName localcontextVar VariableName localcontextstackVar MethodName get VariableName i SimpleType TemplateModel VariableName templatemodelVar VariableName lc MethodName getLocalVariable VariableName stringVar IfStatement if VariableName tm Operator != NullLiteral null ReturnStatement return VariableName tm ReturnStatement return VariableName contextVar Operator == NullLiteral null NullLiteral null VariableName contextVar MethodName getLocalVariable VariableName stringVar
ReturnStatement return VariableName configurationVar MethodName getIncompatibleImprovements MethodName intValue Operator < VariableName _TemplateAPI VariableName VERSION_INT_2_3_22
ReturnStatement return VariableName objectVar Instanceof instanceof SimpleType SettingExpression SimpleType SettingExpression VariableName objectVar MethodName eval VariableName objectVar
ReturnStatement return ThisExpression this Operator == VariableName RIGHT Operator || ThisExpression this Operator == VariableName RIGHT_PART
ParameterizedType ArrayList VariableName arraylistVar VariableName _liveOut Operator != NullLiteral null Operator && VariableName _updated Operator != NullLiteral null New new ParameterizedType ArrayList NullLiteral null IfStatement if VariableName _liveOut Operator != NullLiteral null Operator && VariableName _updated Operator != NullLiteral null EnhancedForStatement for SimpleType String VariableName stringVar VariableName _updated MethodName getVariables MethodName keySet IfStatement if VariableName _liveOut MethodName containsVariable VariableName varName VariableName arraylistVar MethodName add VariableName varName ReturnStatement return VariableName arraylistVar
ReturnStatement return VariableName reorgopVar
ReturnStatement return VariableName lopVar
VariableName lopVar Operator = VariableName lopVar
ReturnStatement return VariableName datatypeVar
VariableName datatypeVar Operator = VariableName datatypeVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName valuetypeVar
VariableName valuetypeVar Operator = VariableName valuetypeVar
SimpleType Hop VariableName hopVar MethodName createTranspose VariableName hopVar ReturnStatement return MethodName createMatrixMultiply VariableName booleanVar VariableName hopVar VariableName hopVar VariableName booleanVar VariableName hopVar VariableName hopVar
ReturnStatement return MethodName getDim NumberLiteral numberLiteral
PrimitiveType int VariableName intVar MethodName pos VariableName intVar PrimitiveType int VariableName intVar MethodName size VariableName intVar PrimitiveType int VariableName intVar Name Arrays MethodName binarySearch VariableName int[]Var VariableName intVar VariableName intVar Operator + VariableName intVar VariableName intVar IfStatement if VariableName intVar Operator >= NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral VariableName intVar Operator = Name Math MethodName abs VariableName intVar Operator + NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral
PrimitiveType int VariableName intVar MethodName pos VariableName intVar PrimitiveType int VariableName intVar MethodName size VariableName intVar PrimitiveType int VariableName intVar Name Arrays MethodName binarySearch VariableName int[]Var VariableName intVar VariableName intVar Operator + VariableName intVar VariableName intVar IfStatement if VariableName intVar Operator >= NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral VariableName intVar Operator = Name Math MethodName abs VariableName intVar Operator + NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral
VariableName int[]Var Operator = Name Arrays MethodName copyOf VariableName int[]Var VariableName intVar VariableName double[]Var Operator = Name Arrays MethodName copyOf VariableName double[]Var VariableName intVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder VariableName stringbuilderVar MethodName append VariableName longadderVar MethodName longValue VariableName stringbuilderVar MethodName append StringLiteral stringLiteral VariableName stringbuilderVar MethodName append VariableName longadderVar MethodName longValue VariableName stringbuilderVar MethodName append StringLiteral stringLiteral VariableName stringbuilderVar MethodName append VariableName longadderVar MethodName longValue ReturnStatement return VariableName stringbuilderVar MethodName toString
SimpleType FederatedRequest VariableName federatedrequestVar New new SimpleType FederatedRequest VariableName RequestType VariableName EXEC_INST Operator - NumberLiteral numberLiteral Name VariableCPInstruction MethodName prepareRemoveInstruction VariableName longVar MethodName toString VariableName federatedrequestVar MethodName setTID VariableName longVar ParameterizedType List VariableName listVar New new ParameterizedType ArrayList EnhancedForStatement for SimpleType FederatedData VariableName federateddataVar VariableName mapVar MethodName values VariableName listVar MethodName add VariableName fd MethodName executeFederatedOperation VariableName federatedrequestVar Name FederationUtils MethodName waitFor VariableName listVar
IfStatement if VariableName intVar Operator == VariableName Sizeof VariableName DOUBLE ReturnStatement return Name Pointer MethodName to ArrayType double[] ArrayInitializer arrayInitializer IfStatement if VariableName intVar Operator == VariableName Sizeof VariableName FLOAT ReturnStatement return Name Pointer MethodName to ArrayType float[] ArrayInitializer arrayInitializer ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral Operator + VariableName intVar
ReturnStatement return VariableName long[]Var
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
SimpleType String VariableName stringVar VariableName httpservletrequestVar MethodName getContextPath ReturnStatement return VariableName stringVar MethodName length Operator > NumberLiteral numberLiteral VariableName stringVar StringLiteral stringLiteral
ArrayType MessageMatcher VariableName messagematcherVar ArrayType MessageMatcher VariableName simpmessagetypeVar VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName simpmessagetypeVar VariableName length VariableName i Operator ++ SimpleType SimpMessageType VariableName simpmessagetypeVar VariableName simpmessagetypeVar VariableName i VariableName messagematcherVar VariableName i Operator = New new SimpleType SimpMessageTypeMatcher VariableName typeToMatch ReturnStatement return MethodName matchers VariableName messagematcherVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName stringVar VariableName length EnhancedForStatement for SimpleType String VariableName stringVar VariableName stringVar VariableName listVar MethodName add New new SimpleType PathMatcherMessageMatcherBuilder VariableName pattern VariableName simpmessagetypeVar ReturnStatement return New new SimpleType Constraint VariableName listVar
IfStatement if VariableName listVar MethodName size Operator == NumberLiteral numberLiteral ThisExpression this VariableName securityexpressionhandlerVar Operator = VariableName listVar MethodName get NumberLiteral numberLiteral
Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral StringLiteral stringLiteral Name System MethodName getProperties MethodName putAll VariableName propertiesVar
ReturnStatement return VariableName multikahadbtransactionstoreVar MethodName getJournalMaxWriteBatchSize
SimpleType FileInputStream VariableName fileinputstreamVar New new SimpleType FileInputStream VariableName fileVar SimpleType FileOutputStream VariableName fileoutputstreamVar New new SimpleType FileOutputStream VariableName fileVar MethodName copyInputStream VariableName fileinputstreamVar VariableName fileoutputstreamVar
ReturnStatement return VariableName consumerinfoVar MethodName getSubscriptionName Operator != NullLiteral null Operator && VariableName consumerinfoVar MethodName getSubscriptionName MethodName startsWith VariableName stringVar Operator && VariableName consumerinfoVar MethodName getClientId Operator == NullLiteral null Operator || VariableName consumerinfoVar MethodName getClientId MethodName startsWith VariableName networkbridgeconfigurationVar MethodName getName
ReturnStatement return VariableName consumerinfoVar MethodName getBrokerPath Operator != NullLiteral null Operator && VariableName consumerinfoVar MethodName getBrokerPath VariableName length Operator > NumberLiteral numberLiteral
ThrowStatement throw New new SimpleType BrokerStoppedException ThisExpression this VariableName stringVar
ReturnStatement return VariableName memoryusageVar
IfStatement if VariableName subscriptioninfoVar MethodName getSelector Operator != NullLiteral null Operator ^ VariableName consumerinfoVar MethodName getSelector Operator != NullLiteral null ReturnStatement return BooleanLiteral true IfStatement if VariableName subscriptioninfoVar MethodName getSelector Operator != NullLiteral null Operator && Operator ! VariableName subscriptioninfoVar MethodName getSelector MethodName equals VariableName consumerinfoVar MethodName getSelector ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType Destination VariableName destinationVar SimpleType Destination VariableName messagereferenceVar MethodName getRegionDestination VariableName destinationVar MethodName getDestinationStatistics MethodName getDispatched MethodName increment VariableName destinationVar MethodName getDestinationStatistics MethodName getInflight MethodName increment VariableName messagereferenceVar MethodName decrementReferenceCount
MethodName onDispatch VariableName messagereferenceVar VariableName messageVar
ReturnStatement return VariableName destinationVar MethodName getDestinationStatistics MethodName getMessages MethodName getCount
SimpleType ConsumerInfo VariableName consumerinfoVar MethodName getConsumerInfo IfStatement if VariableName consumerinfoVar Operator != NullLiteral null ReturnStatement return VariableName consumerinfoVar MethodName getConsumerId MethodName getValue ReturnStatement return NumberLiteral numberLiteral
SimpleType ConsumerInfo VariableName consumerinfoVar MethodName getConsumerInfo ReturnStatement return VariableName consumerinfoVar Operator != NullLiteral null VariableName consumerinfoVar MethodName getSubscriptionName NullLiteral null
VariableName timestatisticimplVar MethodName reset VariableName longVar Operator = Operator - NumberLiteral numberLiteral
SimpleType TopicSubscription VariableName topicsubscriptionVar MethodName getTopicSubscription ReturnStatement return VariableName topicsubscriptionVar Operator != NullLiteral null VariableName topicsubscriptionVar MethodName discarded NumberLiteral numberLiteral
ReturnStatement return VariableName qosVar
TryStatement try IfStatement if VariableName jmxconnectorVar Operator != NullLiteral null VariableName jmxconnectorVar MethodName close VariableName jmxconnectorVar Operator = NullLiteral null CatchClause catch SimpleType IOException VariableName ioexceptionVar
IfStatement if VariableName activemqdestinationVar MethodName isComposite ArrayType ActiveMQDestination[] VariableName activemqdestination[]Var VariableName activemqdestinationVar MethodName getCompositeDestinations ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName destinations VariableName length VariableName i Operator ++ SimpleType ActiveMQDestination VariableName activemqdestinationVar VariableName destinations VariableName i MethodName put VariableName childDestination VariableName objectVar ReturnStatement return ArrayType String[] VariableName string[]Var VariableName activemqdestinationVar MethodName getDestinationPaths MethodName getRootNode VariableName activemqdestinationVar MethodName add VariableName string[]Var NumberLiteral numberLiteral VariableName objectVar
IfStatement if VariableName activemqdestinationVar MethodName isComposite ArrayType ActiveMQDestination[] VariableName activemqdestination[]Var VariableName activemqdestinationVar MethodName getCompositeDestinations ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName destinations VariableName length VariableName i Operator ++ SimpleType ActiveMQDestination VariableName activemqdestinationVar VariableName destinations VariableName i MethodName remove VariableName childDestination VariableName objectVar ReturnStatement return ArrayType String[] VariableName string[]Var VariableName activemqdestinationVar MethodName getDestinationPaths MethodName getRootNode VariableName activemqdestinationVar MethodName remove VariableName string[]Var NumberLiteral numberLiteral VariableName objectVar
MethodName setProperty StringLiteral stringLiteral New new SimpleType Long VariableName longVar
ReturnStatement return MethodName makeTaskAttemptContext New new SimpleType Configuration
ReturnStatement return VariableName inetsocketaddressVar
ReturnStatement return VariableName systemtimeVar
IfStatement if VariableName longarraylistVar MethodName elements VariableName length Operator > NumberLiteral numberLiteral Operator * VariableName longarraylistVar MethodName size VariableName longarraylistVar MethodName trim VariableName longarraylistVar MethodName elements VariableName length Operator / NumberLiteral numberLiteral
IfStatement if VariableName longarraylistVar MethodName elements VariableName length Operator > NumberLiteral numberLiteral Operator * VariableName longarraylistVar MethodName size VariableName longarraylistVar MethodName trim VariableName longarraylistVar MethodName elements VariableName length Operator / NumberLiteral numberLiteral VariableName doublearraylistVar MethodName trim VariableName longarraylistVar MethodName elements VariableName length Operator / NumberLiteral numberLiteral
MethodName startJMapThread
MethodName joinJMapThread
MethodName startSupervisorThread
MethodName joinSupervisorThread
MethodName writeInternal VariableName dataoutputVar VariableName objectVar BooleanLiteral false
ReturnStatement return MethodName readInternal VariableName datainputVar NullLiteral null BooleanLiteral false
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
SimpleType LocalValidatorFactoryBean VariableName localvalidatorfactorybeanVar New new SimpleType LocalValidatorFactoryBean SimpleType ReloadableResourceBundleMessageSource VariableName reloadableresourcebundlemessagesourceVar New new SimpleType ReloadableResourceBundleMessageSource VariableName reloadableresourcebundlemessagesourceVar MethodName setBasename StringLiteral stringLiteral IfStatement if VariableName environmentVar MethodName acceptsProfiles StringLiteral stringLiteral VariableName reloadableresourcebundlemessagesourceVar MethodName setCacheSeconds NumberLiteral numberLiteral VariableName localvalidatorfactorybeanVar MethodName setValidationMessageSource VariableName reloadableresourcebundlemessagesourceVar ReturnStatement return VariableName localvalidatorfactorybeanVar
SimpleType ProvideCapabilityHeader VariableName providecapabilityheaderVar SimpleType ProvideCapabilityHeader VariableName bundlemanifestVar MethodName getHeader VariableName ProvideCapabilityHeader VariableName NAME IfStatement if VariableName providecapabilityheaderVar Operator != NullLiteral null EnhancedForStatement for SimpleType Clause VariableName clauseVar VariableName providecapabilityheaderVar MethodName getClauses VariableName listVar MethodName add New new SimpleType ProvideCapabilityCapability VariableName clause ThisExpression this
SimpleType RequireCapabilityHeader VariableName requirecapabilityheaderVar SimpleType RequireCapabilityHeader VariableName bundlemanifestVar MethodName getHeader VariableName RequireCapabilityHeader VariableName NAME IfStatement if VariableName requirecapabilityheaderVar Operator != NullLiteral null EnhancedForStatement for SimpleType Clause VariableName clauseVar VariableName requirecapabilityheaderVar MethodName getClauses VariableName listVar MethodName add New new SimpleType RequireCapabilityRequirement VariableName clause ThisExpression this
ReturnStatement return TypeLiteral class
MethodName resolveArguments VariableName blueprintregistryVar MethodName resolveFields VariableName blueprintregistryVar MethodName resolveMethods VariableName blueprintregistryVar
IfStatement if VariableName eVar Operator == NullLiteral null ThrowStatement throw New new SimpleType NullPointerException SynchronizedStatement synchronized VariableName objectVar VariableName listVar MethodName add VariableName intVar VariableName eVar ForStatement for ParameterizedType Iterator VariableName iteratorVar VariableName listVar MethodName iterator VariableName it MethodName hasNext SimpleType DynamicIterator VariableName dynamiciteratorVar VariableName it MethodName next MethodName get IfStatement if VariableName i Operator == NullLiteral null VariableName it MethodName remove VariableName i MethodName addedIndex VariableName intVar
IfStatement if VariableName beanmetadataVar Instanceof instanceof SimpleType ExtendedBeanMetadata ReturnStatement return SimpleType ExtendedBeanMetadata VariableName beanmetadataVar MethodName getFieldInjection ReturnStatement return BooleanLiteral false
IfStatement if VariableName beanmetadataVar Instanceof instanceof SimpleType ExtendedBeanMetadata ReturnStatement return SimpleType ExtendedBeanMetadata VariableName beanmetadataVar MethodName getRawConversion ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName aggregateconverterVar
ThisExpression this VariableName targetVar Operator = VariableName targetVar
ReturnStatement return VariableName throwableVar Instanceof instanceof SimpleType RuntimeException Operator || VariableName throwableVar Instanceof instanceof SimpleType Error
ParameterizedType List VariableName listVar Name ManifestProcessor MethodName split VariableName stringVar StringLiteral stringLiteral EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar VariableName listVar MethodName add New new SimpleType DeploymentContentImpl VariableName s
ReturnStatement return MethodName createDeploymentMetadata Name ManifestProcessor MethodName parseManifest VariableName inputstreamVar
ParameterizedType Set VariableName setVar New new ParameterizedType LinkedHashSet EnhancedForStatement for SimpleType Artifact VariableName artifactVar VariableName setVar SimpleType String VariableName stringVar VariableName artifact MethodName getScope IfStatement if VariableName scope Operator == NullLiteral null Operator || Name Artifact.SCOPE_COMPILE MethodName equals VariableName scope Operator || Name Artifact.SCOPE_RUNTIME MethodName equals VariableName scope IfStatement if VariableName artifact MethodName getType Operator == NullLiteral null Operator || Operator ! VariableName artifact MethodName getType MethodName equals StringLiteral stringLiteral VariableName setVar MethodName add VariableName artifact ReturnStatement return VariableName setVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName MRJobConfig VariableName MRR_INTERMEDIATE_STAGE_PREFIX Operator + VariableName intVar StringLiteral stringLiteral VariableName stringVar
ReturnStatement return VariableName teztaskattemptidVar MethodName getId
IfStatement if Operator ! MethodName isFinished ReturnStatement return NumberLiteral numberLiteral PrimitiveType long VariableName longVar NumberLiteral numberLiteral EnhancedForStatement for SimpleType TaskAttempt VariableName taskattemptVar VariableName mapVar MethodName values IfStatement if VariableName longVar Operator < VariableName at MethodName getFinishTime VariableName longVar Operator = VariableName at MethodName getFinishTime ReturnStatement return VariableName longVar
ReturnStatement return VariableName booleanVar Operator && VariableName intVar Operator >= VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName modeledcacheimplVar
ReturnStatement return New new ParameterizedType ModelSpecImpl VariableName zpathVar VariableName modelserializerVar VariableName createmodeVar VariableName listVar VariableName setVar VariableName setVar VariableName longVar
TryStatement try IfStatement if VariableName mongoclientVar Operator == NullLiteral null VariableName mongoclientVar Operator = MethodName createMongoClient VariableName mongodbconfigurationVar VariableName mongodatabaseVar Operator = MethodName extractDatabase VariableName mongoclientVar VariableName mongodbconfigurationVar CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw VariableName logVar MethodName unableToStartDatastoreProvider VariableName e
ReturnStatement return VariableName tavernaserversupportVar MethodName getMaxSimultaneousRuns
ReturnStatement return VariableName tavernaserversupportVar MethodName getPermittedWorkflowURIs
ParameterizedType List VariableName listVar VariableName tavernaserversupportVar MethodName getListenerTypes ReturnStatement return VariableName listVar MethodName toArray ArrayType String[] VariableName listVar MethodName size
ParameterizedType List VariableName listVar VariableName notificationengineVar MethodName listAvailableDispatchers ReturnStatement return VariableName listVar MethodName toArray ArrayType String[] VariableName listVar MethodName size
ReturnStatement return VariableName tavernaserversupportVar MethodName getAllowNewWorkflowRuns StringLiteral stringLiteral StringLiteral stringLiteral
IfStatement if VariableName logVar MethodName isDebugEnabled VariableName logVar MethodName debug StringLiteral stringLiteral ReturnStatement return ParameterizedType List MethodName namedQuery StringLiteral stringLiteral MethodName execute
ReturnStatement return ParameterizedType List MethodName namedQuery StringLiteral stringLiteral MethodName execute
ReturnStatement return ParameterizedType List MethodName namedQuery StringLiteral stringLiteral MethodName execute
ThisExpression this VariableName jmsbindingVar Operator = VariableName jmsbindingVar 
SimpleType CamelContext VariableName camelcontextVar MethodName getCamelContext IfStatement if VariableName camelcontextVar Operator == NullLiteral null SimpleType ActiveMQConnection VariableName activemqconnectionVar VariableName activemqsessionVar MethodName getConnection IfStatement if VariableName connection Instanceof instanceof SimpleType CamelConnection SimpleType CamelConnection VariableName camelconnectionVar SimpleType CamelConnection VariableName connection VariableName camelcontextVar Operator = VariableName camelConnection MethodName getCamelContext IfStatement if VariableName camelcontextVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral ReturnStatement return VariableName camelcontextVar 
IfStatement if VariableName exchangeVar Operator != NullLiteral null SimpleType Message VariableName messageVar VariableName cameldestinationVar MethodName getBinding MethodName makeJmsMessage VariableName exchangeVar VariableName activemqsessionVar ReturnStatement return VariableName message ReturnStatement return NullLiteral null 
ReturnStatement return StringLiteral stringLiteral Operator + VariableName activemqtopicVar MethodName getPhysicalName 
ReturnStatement return VariableName camelcontextVar 
ReturnStatement return New new SimpleType CamelQueueSender ThisExpression this MethodName resolveEndpoint VariableName activemqsessionVar VariableName activemqsessionVar 
SynchronizedStatement synchronized VariableName hashmapVar SimpleType SharedBroker VariableName sharedbrokerVar Name SHARED_BROKER_MAP MethodName get VariableName resourceVar MethodName getFilename IfStatement if VariableName sharedBroker Operator != NullLiteral null VariableName sharedBroker VariableName refCount Operator -- IfStatement if VariableName sharedBroker VariableName refCount Operator == NumberLiteral numberLiteral VariableName sharedBroker.factory MethodName destroy Name SHARED_BROKER_MAP MethodName remove VariableName resourceVar MethodName getFilename 
ReturnStatement return BooleanLiteral true 
SimpleType Properties VariableName propertiesVar New new SimpleType Properties TryStatement try VariableName propertiesVar MethodName putAll MethodName retrieveClassProperties StringLiteral stringLiteral VariableName objectVar MethodName getClass VariableName objectVar CatchClause catch SimpleType Exception VariableName exceptionVar Name LOG MethodName warn VariableName e MethodName toString ReturnStatement return VariableName propertiesVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
MethodName getXstream MethodName toXML VariableName messageVar VariableName printwriterVar 
IfStatement if VariableName redeliverypolicyVar Operator == NullLiteral null ReturnStatement return NumberLiteral numberLiteral ReturnStatement return VariableName redeliverypolicyVar MethodName getInitialRedeliveryDelay 
ReturnStatement return MethodName getConnection MethodName getExceptionListener 
TryStatement try MethodName getSession MethodName run CatchClause catch SimpleType JMSException VariableName jmsexceptionVar ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral Operator + VariableName e VariableName e 
IfStatement if VariableName booleanVar VariableName transactioncontextVar MethodName addSynchronization VariableName synchronizationVar SuperMethodInvocation super MethodName addSynchronization VariableName synchronizationVar 
ReturnStatement return VariableName socketVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return MethodName toOffset VariableName atomiclongVar MethodName get 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName metadataVar VariableName binCapacity 
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList MethodName getFiles VariableName fileVar VariableName listVar VariableName filenamefilterVar ReturnStatement return VariableName listVar 
ReturnStatement return VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar 
IfStatement if VariableName memorytransactionstoreVar Operator == NullLiteral null VariableName memorytransactionstoreVar Operator = New new SimpleType MemoryTransactionStore ThisExpression this ReturnStatement return VariableName memorytransactionstoreVar 
ReturnStatement return VariableName loggerVar 
ThisExpression this VariableName longVar Operator = VariableName longVar 
ThrowStatement throw New new SimpleType BrokerStoppedException ThisExpression this VariableName stringVar 
ThrowStatement throw New new SimpleType BrokerStoppedException ThisExpression this VariableName stringVar 
SimpleType ActiveMQDestination VariableName activemqdestinationVar VariableName producerinfoVar MethodName getDestination IfStatement if VariableName activemqdestinationVar Operator != NullLiteral null Operator && VariableName activemqdestinationVar MethodName isComposite ArrayType ActiveMQDestination[] VariableName activemqdestination[]Var VariableName activemqdestinationVar MethodName getCompositeDestinations ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName destinations VariableName length VariableName i Operator ++ SimpleType ProducerInfo VariableName producerinfoVar VariableName producerinfoVar MethodName copy VariableName copy MethodName setDestination VariableName destinations VariableName i VariableName next MethodName addProducer VariableName connectioncontextVar VariableName copy VariableName next MethodName addProducer VariableName connectioncontextVar VariableName producerinfoVar 
ForStatement for ParameterizedType Iterator VariableName iteratorVar VariableName setVar MethodName iterator VariableName i MethodName hasNext SimpleType TransportConnection VariableName transportconnectionVar VariableName i MethodName next IfStatement if VariableName tc MethodName isMarkedCandidate IfStatement if VariableName tc MethodName isBlockedCandidate VariableName setVar MethodName remove VariableName tc MethodName doCollection VariableName tc VariableName tc MethodName doMark VariableName setVar MethodName remove VariableName tc 
ThisExpression this VariableName intVar Operator = VariableName intVar 
ReturnStatement return VariableName destination 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName consumerinfoVar 
IfStatement if Operator ! VariableName messagereferenceVar MethodName isPersistent VariableName pendingmessagecursorVar MethodName remove VariableName messagereferenceVar VariableName queuestoreprefetchVar MethodName remove VariableName messagereferenceVar VariableName intVar Operator -- 
ReturnStatement return VariableName pendinglistVar MethodName size 
ReturnStatement return BooleanLiteral true 
ReturnStatement return VariableName destinationVar MethodName getDestinationStatistics MethodName getDequeues MethodName getCount 
ReturnStatement return VariableName booleanVar 
SimpleType Queue VariableName queueVar SimpleType Queue VariableName destination IfStatement if VariableName queueVar MethodName getMessages Operator != NullLiteral null ReturnStatement return VariableName queueVar MethodName getMessages MethodName hasMessagesBufferedToDeliver ReturnStatement return BooleanLiteral false 
ReturnStatement return VariableName booleanVar 
ThisExpression this VariableName transportserverVar Operator = VariableName transportserverVar 
IfStatement if VariableName uriVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral ReturnStatement return Name TransportFactory MethodName bind VariableName uriVar 
ThisExpression this VariableName journalVar Operator = VariableName journalVar 
SynchronizedStatement synchronized ThisExpression this VariableName lastLocation Operator = VariableName recordlocationVar VariableName hashmapVar MethodName put VariableName subscriptionkeyVar VariableName messageidVar 
ThisExpression this VariableName intVar Operator = VariableName intVar 
ReturnStatement return VariableName stringVar MethodName startsWith StringLiteral stringLiteral Operator || Operator ! VariableName stringVar MethodName startsWith StringLiteral stringLiteral 
ReturnStatement return VariableName stringVar 
IfStatement if VariableName mapVar Operator == NullLiteral null Operator || VariableName mapVar MethodName isEmpty ReturnStatement return VariableName listVar SimpleType List VariableName listVar New new SimpleType ArrayList ForStatement for SimpleType Iterator VariableName iteratorVar VariableName listVar MethodName iterator VariableName i MethodName hasNext SimpleType Object VariableName objectVar VariableName i MethodName next IfStatement if MethodName matches VariableName dataElem VariableName mapVar VariableName listVar MethodName add VariableName dataElem ReturnStatement return VariableName listVar 
VariableName setVar MethodName add VariableName fileVar 
VariableName printstreamVar MethodName println VariableName stringVar 
IfStatement if VariableName booleanstreamVar MethodName readBoolean VariableName dataoutputVar MethodName writeInt VariableName bytesequenceVar MethodName getLength VariableName dataoutputVar MethodName write VariableName bytesequenceVar MethodName getData VariableName bytesequenceVar MethodName getOffset VariableName bytesequenceVar MethodName getLength 
SimpleType ActiveMQDestination VariableName activemqdestinationVar SimpleType ActiveMQDestination VariableName objectVar PrimitiveType int VariableName intVar SuperMethodInvocation super MethodName tightMarshal1 VariableName openwireformatVar VariableName objectVar VariableName booleanstreamVar VariableName intVar Operator += MethodName tightMarshalString1 VariableName activemqdestinationVar MethodName getPhysicalName VariableName booleanstreamVar ReturnStatement return VariableName intVar Operator + NumberLiteral numberLiteral 
IfStatement if VariableName usagecapacityVar MethodName getLimit Operator == NumberLiteral numberLiteral ReturnStatement return NumberLiteral numberLiteral ReturnStatement return PrimitiveType int MethodName retrieveUsage Operator * NumberLiteral numberLiteral Operator / VariableName usagecapacityVar MethodName getLimit Operator / VariableName intVar Operator * VariableName intVar 
SimpleType String VariableName stringVar VariableName stringVar SimpleType ExpressionListenerSet VariableName expressionlistenersetVar VariableName mapVar MethodName get VariableName stringVar IfStatement if VariableName expressionlistenersetVar Operator == NullLiteral null ReturnStatement return BooleanLiteral false IfStatement if Operator ! VariableName d.listeners MethodName remove VariableName expressionlistenerVar ReturnStatement return BooleanLiteral false IfStatement if VariableName d.listeners MethodName size Operator == NumberLiteral numberLiteral MethodName removeFromCache SimpleType CacheExpression VariableName expressionlistenersetVar VariableName expression VariableName mapVar MethodName remove VariableName stringVar ReturnStatement return BooleanLiteral true 
ReturnStatement return New new SimpleType ArithmeticExpression VariableName expressionVar VariableName expressionVar IfStatement if VariableName lvalue Instanceof instanceof SimpleType Number ReturnStatement return MethodName multiply SimpleType Number VariableName lvalue MethodName asNumber VariableName rvalue ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral Operator + VariableName lvalue StringLiteral stringLiteral VariableName rvalue ReturnStatement return StringLiteral stringLiteral 
MethodName writeLongBig VariableName bytesequenceVar Name Double MethodName doubleToLongBits VariableName doubleVar 
IfStatement if VariableName intVar Operator < VariableName intVar VariableName intVar Operator = Name Math MethodName min VariableName intVar VariableName intVar Operator - VariableName intVar IfStatement if VariableName intVar Operator > NumberLiteral numberLiteral Name System MethodName arraycopy VariableName byteVar VariableName intVar VariableName byteVar VariableName intVar VariableName intVar VariableName intVar Operator += VariableName intVar ReturnStatement return VariableName intVar ReturnStatement return Operator - NumberLiteral numberLiteral 
Operator -- VariableName intVar 
ReturnStatement return VariableName activemqconnectionVar 
IfStatement if VariableName objectVar Operator != NullLiteral null ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName objectVar MethodName sendWriteBuffer VariableName intVar VariableName replayAddress VariableName data BooleanLiteral true IfStatement if Name LOG MethodName isWarnEnabled Name LOG MethodName warn StringLiteral stringLiteral Operator + VariableName intVar StringLiteral stringLiteral 
ThisExpression this VariableName intVar Operator = VariableName intVar 
IfStatement if VariableName longVar Operator <= NumberLiteral numberLiteral ReturnStatement return NumberLiteral numberLiteral PrimitiveType long VariableName longVar VariableName intVar Operator - VariableName intVar IfStatement if VariableName longVar Operator <= NumberLiteral numberLiteral ReturnStatement return VariableName in MethodName skip VariableName longVar PrimitiveType long VariableName longVar VariableName longVar Operator < VariableName longVar VariableName longVar VariableName longVar VariableName intVar Operator += VariableName longVar ReturnStatement return VariableName longVar 
TryStatement try ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap Name URISupport MethodName parseParameters VariableName uriVar SimpleType ServerSocketFactory VariableName serversocketfactoryVar MethodName createServerSocketFactory SimpleType TcpTransportServer VariableName tcptransportserverVar MethodName createTcpTransportServer VariableName uriVar VariableName serverSocketFactory VariableName server MethodName setWireFormatFactory MethodName createWireFormatFactory VariableName options Name IntrospectionSupport MethodName setProperties VariableName server VariableName options ParameterizedType Map VariableName mapVar Name IntrospectionSupport MethodName extractProperties VariableName options StringLiteral stringLiteral VariableName server MethodName setTransportOption VariableName transportOptions VariableName server MethodName bind ReturnStatement return VariableName server CatchClause catch SimpleType URISyntaxException VariableName urisyntaxexceptionVar ThrowStatement throw Name IOExceptionSupport MethodName create VariableName e 
VariableName transportlistenerVar MethodName transportResumed 
IfStatement if Operator ! VariableName selectorVar MethodName isOpen ThrowStatement throw New new SimpleType IOException StringLiteral stringLiteral IfStatement if Operator ! VariableName bytebufferVar MethodName hasRemaining TryStatement try MethodName fill NumberLiteral numberLiteral CatchClause catch SimpleType ClosedChannelException VariableName closedchannelexceptionVar MethodName close ReturnStatement return Operator - NumberLiteral numberLiteral ReturnStatement return VariableName bytebufferVar MethodName get Operator & NumberLiteral numberLiteral 
ReturnStatement return ThisExpression this VariableName intVar 
TryStatement try ReturnStatement return MethodName createTransport VariableName uriVar CatchClause catch SimpleType URISyntaxException VariableName urisyntaxexceptionVar ThrowStatement throw New new SimpleType IOException StringLiteral stringLiteral Operator + VariableName uriVar 
ThisExpression this VariableName intVar Operator = VariableName intVar 
ReturnStatement return BooleanLiteral true 
ReturnStatement return VariableName pollcountstatisticimplVar 
TryStatement try VariableName countdownlatchVar MethodName await NumberLiteral numberLiteral VariableName TimeUnit VariableName SECONDS IfStatement if VariableName brokerinfoVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return VariableName brokerinfoVar MethodName getBrokerName CatchClause catch SimpleType InterruptedException VariableName interruptedexceptionVar Name Thread MethodName currentThread MethodName interrupt ReturnStatement return NullLiteral null 
ForStatement for ParameterizedType Iterator VariableName iteratorVar VariableName copyonwritearraylistVar MethodName iterator VariableName iter MethodName hasNext SimpleType TransportListener VariableName transportlistenerVar VariableName iter MethodName next VariableName listener MethodName transportResumed 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return New new SimpleType BlobTransferPolicy 
ReturnStatement return VariableName bytesequenceVar 
VariableName bytesequenceVar Operator = NullLiteral null VariableName mapVar Operator = NullLiteral null 
ReturnStatement return VariableName byteVar 
ReturnStatement return BooleanLiteral true 
ThisExpression this VariableName byteVar Operator = VariableName byteVar 
ReturnStatement return ThisExpression this VariableName booleanVar 
ThisExpression this VariableName longVar Operator = VariableName longVar 
ReturnStatement return VariableName commandvisitorVar MethodName processConsumerControl ThisExpression this 
ThisExpression this VariableName endpointVar Operator = VariableName endpointVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName booleanVar 
ThrowStatement throw New new SimpleType OperationNotSupportedException 
SimpleType ConsumerControl VariableName consumercontrolVar SimpleType ConsumerControl VariableName objectVar PrimitiveType int VariableName intVar SuperMethodInvocation super MethodName tightMarshal1 VariableName openwireformatVar VariableName objectVar VariableName booleanstreamVar VariableName booleanstreamVar MethodName writeBoolean VariableName consumercontrolVar MethodName isClose VariableName intVar Operator += MethodName tightMarshalNestedObject1 VariableName openwireformatVar SimpleType DataStructure VariableName consumercontrolVar MethodName getConsumerId VariableName booleanstreamVar VariableName booleanstreamVar MethodName writeBoolean VariableName consumercontrolVar MethodName isFlush VariableName booleanstreamVar MethodName writeBoolean VariableName consumercontrolVar MethodName isStart VariableName booleanstreamVar MethodName writeBoolean VariableName consumercontrolVar MethodName isStop ReturnStatement return VariableName intVar Operator + NumberLiteral numberLiteral 
SimpleType MultiWindowDimensionAggregation VariableName multiwindowdimensionaggregationVar VariableName dagVar MethodName addOperator VariableName stringVar TypeLiteral class VariableName multiwindowdimensionaggregationVar MethodName setWindowSize NumberLiteral numberLiteral ParameterizedType List VariableName listVar New new ParameterizedType ArrayList ArrayType int[] VariableName int[]Var ArrayInitializer arrayInitializer VariableName listVar MethodName add VariableName int[]Var VariableName multiwindowdimensionaggregationVar MethodName setDimensionArray VariableName listVar VariableName multiwindowdimensionaggregationVar MethodName setTimeBucket Name TIME_BUCKETS.m MethodName name VariableName multiwindowdimensionaggregationVar MethodName setDimensionKeyVal StringLiteral stringLiteral VariableName multiwindowdimensionaggregationVar MethodName setOperationType VariableName AggregateOperation VariableName AVERAGE VariableName multiwindowdimensionaggregationVar MethodName setWindowSize NumberLiteral numberLiteral ReturnStatement return VariableName multiwindowdimensionaggregationVar 
VariableName logstreamwidgetoutputoperatorVar VariableName topNTopic Operator = VariableName stringVar ReturnStatement return ThisExpression this 
PrimitiveType long VariableName longVar IfStatement if VariableName stringVar Operator == NullLiteral null VariableName longVar Operator = VariableName longVar Operator >>> NumberLiteral numberLiteral Operator * NumberLiteral numberLiteral Operator + VariableName longVar Operator * VariableName longVar Operator & NumberLiteral numberLiteral VariableName longVar Operator = SimpleType Long VariableName mapVar MethodName get VariableName stringVar ReturnStatement return VariableName longVar 
EnhancedForStatement for SimpleType K VariableName kVar VariableName arraylistVar MethodName processTuple VariableName e 
ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral 
ReturnStatement return New new ParameterizedType Distinct 
ThisExpression this VariableName intVar Operator = VariableName intVar 
VariableName readerVar MethodName close 
MethodName upperBound VariableName byte[]Var NumberLiteral numberLiteral VariableName byte[]Var VariableName length 
VariableName outputstreamVar MethodName write VariableName byte[]Var VariableName intVar VariableName intVar ReturnStatement return VariableName intVar 
VariableName dataoutputVar MethodName write VariableName byte[]Var 
VariableName hashmapVar MethodName clear 
TryStatement try VariableName connectionVar MethodName close CatchClause catch SimpleType SQLException VariableName sqlexceptionVar ThrowStatement throw New new SimpleType RuntimeException VariableName ex 
ThisExpression this VariableName conditionVar Operator = VariableName conditionVar 
IfStatement if VariableName conditionVar Operator != NullLiteral null Operator && Operator ! VariableName conditionVar MethodName isValidRow VariableName mapVar VariableName outport MethodName emit VariableName mapVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName stringVar 
MethodName checkIsImplementation VariableName classVar TypeLiteral class MethodName checkIsNewStyleImplementation VariableName classVar 
SuperMethodInvocation super MethodName configure VariableName configkeyVar VariableName vVar ReturnStatement return MethodName self 
ThisExpression this VariableName setVar Operator = VariableName setVar ReturnStatement return ThisExpression this 
IfStatement if VariableName imageVar MethodName getName Operator == NullLiteral null ReturnStatement return BooleanLiteral false ReturnStatement return VariableName imageVar MethodName getName MethodName contains VariableName stringVar 
ReturnStatement return New new SimpleType PropagatorBuilder VariableName sensorVar 
ReturnStatement return MethodName findFieldForFlagInternal VariableName stringVar VariableName objectVar MethodName getAllFields VariableName objectVar MethodName getClass 
ReturnStatement return Name Iterables MethodName filter VariableName iterableVar New new ParameterizedType Predicate ReturnStatement return VariableName input MethodName isError 
ReturnStatement return VariableName integerVar 
ReturnStatement return SuperMethodInvocation super MethodName toString Operator + StringLiteral stringLiteral VariableName mapVar MethodName size StringLiteral stringLiteral VariableName mapVar MethodName values StringLiteral stringLiteral 
MethodName checkNotNull VariableName objectVar StringLiteral stringLiteral MethodName checkNotNull VariableName objectVar StringLiteral stringLiteral VariableName manifestVar MethodName getMainAttributes MethodName put VariableName objectVar VariableName objectVar ReturnStatement return ThisExpression this 
ReturnStatement return VariableName intVar 
VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return MethodName dirty 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar ReturnStatement return MethodName dirty 
ReturnStatement return MethodName sanitize MethodName generateNewIdReservingLength VariableName configbagVar MethodName getLengthForMachineUniqueNameSalt VariableName configbagVar BooleanLiteral true MethodName toLowerCase 
PrimitiveType long VariableName longVar MethodName currentTimeMillis SimpleType Builder VariableName builderVar Name BasicManagementNodeSyncRecord MethodName builder MethodName brooklynVersion Name BrooklynVersion MethodName get MethodName nodeId VariableName stringVar MethodName status MethodName getNodeState MethodName priority MethodName getPriority MethodName localTimestamp VariableName longVar MethodName uri VariableName managementcontextinternalVar MethodName getManagementNodeUri MethodName orNull IfStatement if VariableName booleanVar VariableName builderVar MethodName remoteTimestamp VariableName longVar IfStatement if VariableName tickerVar Operator != NullLiteral null VariableName builderVar MethodName remoteTimestamp VariableName tickerVar MethodName read ReturnStatement return VariableName builderVar MethodName build 
SimpleType SubscriptionHandle VariableName subscriptionhandleVar VariableName subscriptioncontextVar MethodName subscribeToChildren VariableName entityVar VariableName sensorVar VariableName sensoreventlistenerVar SynchronizedStatement synchronized VariableName setmultimapVar VariableName setmultimapVar MethodName put VariableName entityVar VariableName subscriptionhandleVar ReturnStatement return VariableName subscriptionhandleVar 
MethodName checkInitialManagementContextReal ReturnStatement return VariableName managementcontextinternalVar MethodName lookup VariableName stringVar VariableName classVar 
ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + ThisExpression this StringLiteral stringLiteral 
ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + ThisExpression this StringLiteral stringLiteral 
IfStatement if MethodName isInitialManagementContextReal ReturnStatement return VariableName managementcontextVar MethodName getLocationManager MethodName getLocations ReturnStatement return Name Collections MethodName emptyList 
VariableName nondeploymentmanagementcontextVar MethodName setMode VariableName NonDeploymentManagementContextMode VariableName MANAGEMENT_REBINDING 
ReturnStatement return VariableName atomiclongVar MethodName get 
ReturnStatement return VariableName atomicintegerVar MethodName get Operator < NumberLiteral numberLiteral Operator || VariableName atomicintegerVar MethodName get Operator % NumberLiteral numberLiteral Operator == NumberLiteral numberLiteral 
ReturnStatement return MethodName fromPersistedMap VariableName mapVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName basicconfigurationsupportVar 
ReturnStatement return New new SimpleType PersistencePathResolver VariableName managementcontextVar MethodName getConfig 
ReturnStatement return SuperMethodInvocation super MethodName toStringOtherFields MethodName appendIfNotNull VariableName stringVar 
EnhancedForStatement for ParameterizedType AttributePollHandler VariableName attributepollhandlerVar VariableName listVar VariableName delegate MethodName onException VariableName exceptionVar 
ReturnStatement return SimpleType F ThisExpression this 
ReturnStatement return ThisExpression this VariableName predicateVar Operator != NullLiteral null 
ReturnStatement return SimpleType T VariableName Marker VariableName NULL 
VariableName builderVar MethodName blockingDetails VariableName stringVar ReturnStatement return ThisExpression this 
ReturnStatement return VariableName listVar 
ReturnStatement return VariableName managementcontextVar MethodName getApplications 
ReturnStatement return MethodName call VariableName entityVar VariableName mapVar 
ReturnStatement return New new ParameterizedType MapModificationBase VariableName mapVar BooleanLiteral false Modifier private Modifier static Modifier final PrimitiveType long VariableName longVar NumberLiteral numberLiteral ReturnStatement return VariableName key MethodName applyValueToMap Name Jsonya MethodName of VariableName key MethodName rawValue VariableName target MethodName add ThisExpression this MethodName getRootMap VariableName target 
ThrowStatement throw MethodName getException 
ReturnStatement return VariableName supplierVar MethodName get 
MethodName getDelegate MethodName println VariableName intVar 
PrimitiveType long VariableName longVar VariableName timeunitVar MethodName toNanos VariableName longVar ReturnStatement return MethodName makeTimeStringNanoExact VariableName longVar 
IfStatement if VariableName numberVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return VariableName numberVar MethodName doubleValue Operator + VariableName doubleVar 
ReturnStatement return StringLiteral stringLiteral 
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder TryStatement try MethodName wrapJavaString VariableName stringVar VariableName stringbuilderVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw Name Exceptions MethodName propagate VariableName e ReturnStatement return VariableName stringbuilderVar MethodName toString 
Name Preconditions MethodName checkArgument VariableName intVar Operator > NumberLiteral numberLiteral StringLiteral stringLiteral VariableName intVar ThisExpression this VariableName intVar Operator = VariableName intVar ReturnStatement return ThisExpression this 
ReturnStatement return New new SimpleType MavenRetriever MethodName getLocalUrl VariableName mavenartifactVar 
IfStatement if Operator ! VariableName iteratorVar MethodName hasNext ReturnStatement return MethodName of ReturnStatement return New new ParameterizedType Builder MethodName addAll VariableName iteratorVar MethodName build 
IfStatement if VariableName charVar Operator > NumberLiteral numberLiteral Operator || VariableName charVar Operator < NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true ReturnStatement return StringLiteral stringLiteral Operator + StringLiteral stringLiteral MethodName indexOf VariableName charVar Operator >= NumberLiteral numberLiteral 
ReturnStatement return VariableName stringVar 
ParameterizedType Map VariableName mapVar New new ParameterizedType LinkedHashMap EnhancedForStatement for SimpleType ContainerType VariableName containertypeVar VariableName setVar VariableName mapVar MethodName put VariableName node MethodName getTotalWorkrate VariableName node ReturnStatement return VariableName mapVar 
ReturnStatement return VariableName longVar Operator == NullLiteral null VariableName longVar VariableName longVar Operator - VariableName longVar 
ReturnStatement return StringLiteral stringLiteral Operator + MethodName getObject StringLiteral stringLiteral MethodName getWeight StringLiteral stringLiteral 
VariableName pollhandlerVar MethodName onSuccess VariableName notificationVar 
IfStatement if Name EnumSet MethodName of VariableName JmxAgentModes VariableName JMXMP_AND_RMI VariableName JmxAgentModes VariableName JMXMP VariableName JmxAgentModes VariableName JMX_RMI_CUSTOM_AGENT MethodName contains MethodName getJmxAgentMode Name Tasks MethodName setBlockingDetails StringLiteral stringLiteral TryStatement try MethodName getMachine MethodName get MethodName copyTo Name ResourceUtils MethodName create ThisExpression this MethodName getResourceFromUrl MethodName getJmxAgentJarUrl MethodName getJmxAgentJarDestinationFilePath Name Tasks MethodName resetBlockingDetails IfStatement if MethodName isSecure MethodName getJmxSslSupport MethodName install 
ReturnStatement return VariableName stringVar 
ParameterizedType Map VariableName mapVar Name Maps MethodName newLinkedHashMap VariableName mapVar MethodName putAll Name Maps MethodName newLinkedHashMap VariableName machineprovisioninglocationVar MethodName getProvisioningFlags Name ImmutableList MethodName of VariableName entityVar MethodName getEntityType MethodName getName VariableName mapVar MethodName putAll VariableName entityVar MethodName getConfig VariableName SameServerEntity VariableName PROVISIONING_PROPERTIES EnhancedForStatement for SimpleType Entity VariableName entityVar VariableName entityVar MethodName getChildren VariableName mapVar MethodName putAll MethodName obtainProvisioningFlags VariableName child VariableName machineprovisioninglocationVar ReturnStatement return VariableName mapVar 
ReturnStatement return Name HttpTool MethodName httpGet VariableName httpclientVar VariableName uriVar Name MutableMap MethodName of 
ReturnStatement return VariableName stringVar MethodName replaceAll StringLiteral stringLiteral StringLiteral stringLiteral Operator + StringLiteral stringLiteral VariableName stringVar 
ReturnStatement return New new SimpleType BrooklynLauncher 
MethodName check ThisExpression this MethodName setCustomAttribute VariableName stringVar VariableName objectVar ReturnStatement return MethodName thisBuilder 
ReturnStatement return New new ParameterizedType ArrayList VariableName mapVar MethodName values 
SimpleType String VariableName stringVar Name String MethodName format VariableName stringVar VariableName objectVar IfStatement if VariableName loggerVar MethodName isDebugEnabled VariableName loggerVar MethodName debug StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral ThrowStatement throw New new SimpleType WebApplicationException Name Response MethodName status VariableName Response VariableName Status VariableName PRECONDITION_FAILED MethodName type VariableName MediaType VariableName APPLICATION_JSON_TYPE MethodName entity Name ApiErrorDto MethodName builder MethodName message VariableName stringVar MethodName build MethodName build 
ThisExpression this VariableName routeVar Operator = VariableName routeVar 
IfStatement if Operator ! MethodName isSupportRedelivery ReturnStatement return BooleanLiteral false SimpleType RedeliveryErrorHandler VariableName redeliveryerrorhandlerVar SimpleType RedeliveryErrorHandler VariableName processorVar ReturnStatement return VariableName redeliveryerrorhandlerVar MethodName getDeadLetter Operator != NullLiteral null 
ReturnStatement return VariableName componentVar MethodName getCamelContext MethodName getName 
MethodName getEventNotifier MethodName setIgnoreCamelContextEvents VariableName booleanVar 
ReturnStatement return MethodName evaluate VariableName exchangeVar TypeLiteral class 
ThrowStatement throw New new SimpleType OperationNotSupportedException 
SimpleType String VariableName stringVar MethodName toString VariableName domsourceVar VariableName exchangeVar ReturnStatement return New new SimpleType StringSource VariableName stringVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
PrimitiveType int VariableName intVar NumberLiteral numberLiteral IfStatement if VariableName objectVar Operator != NullLiteral null VariableName intVar Operator = VariableName objectVar MethodName hashCode IfStatement if VariableName intVar Operator > NumberLiteral numberLiteral VariableName intVar Operator = VariableName intVar Operator % VariableName intVar ReturnStatement return VariableName intVar 
IfStatement if Operator ! MethodName hasNext ReturnStatement return NullLiteral null ParameterizedType List VariableName listVar New new ParameterizedType ArrayList NumberLiteral numberLiteral VariableName listVar MethodName add VariableName processorVar ReturnStatement return VariableName listVar 
ReturnStatement return VariableName processorVar 
ReturnStatement return VariableName camelcontextVar 
MethodName doCreate VariableName EventOperation VariableName not ReturnStatement return ThisExpression this 
ReturnStatement return VariableName descriptiondefinitionVar 
MethodName setUriDelimiter VariableName stringVar ReturnStatement return ThisExpression this 
SimpleType Expression VariableName expressionVar Name ExpressionBuilder MethodName constantExpression Name Boolean MethodName toString VariableName booleanVar ReturnStatement return MethodName handled VariableName expressionVar 
ReturnStatement return StringLiteral stringLiteral Operator + MethodName getType StringLiteral stringLiteral 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName aggregationstrategyVar 
ReturnStatement return StringLiteral stringLiteral Operator + MethodName getExpression StringLiteral stringLiteral MethodName getOutputs StringLiteral stringLiteral 
ThisExpression this VariableName sipproviderVar Operator = VariableName sipproviderVar 
ThisExpression this VariableName contactheaderVar Operator = VariableName contactheaderVar 
IfStatement if Name LOG MethodName isWarnEnabled Name LOG MethodName warn StringLiteral stringLiteral 
ReturnStatement return VariableName dateVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName longVar 
ReturnStatement return VariableName cxfbindingVar 
ReturnStatement return VariableName serverVar 
IfStatement if VariableName jmsoperationsVar Operator == NullLiteral null VariableName jmsoperationsVar Operator = VariableName jmsendpointVar MethodName createInOnlyTemplate ReturnStatement return VariableName jmsoperationsVar 
ReturnStatement return VariableName charVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName stringVar 
MethodName setServerName VariableName stringVar ReturnStatement return ThisExpression this 
VariableName mapVar MethodName putAll VariableName mapVar 
ThisExpression this VariableName camelcontextVar Operator = VariableName camelcontextVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
SimpleType NamedNodeMap VariableName namednodemapVar VariableName elementVar MethodName getAttributes ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName namednodemapVar MethodName getLength VariableName i Operator ++ SimpleType Attr VariableName attrVar SimpleType Attr VariableName namednodemapVar MethodName item VariableName i SimpleType String VariableName stringVar VariableName node MethodName getValue SimpleType String VariableName stringVar VariableName node MethodName getLocalName IfStatement if VariableName name MethodName equals StringLiteral stringLiteral Operator || VariableName name MethodName equals StringLiteral stringLiteral VariableName beandefinitionbuilderVar MethodName addPropertyReference VariableName name VariableName val MethodName mapToProperty VariableName beandefinitionbuilderVar VariableName name VariableName val 
IfStatement if VariableName springwebserviceconfigurationVar MethodName getEndpointMapping Operator != NullLiteral null VariableName springwebserviceconfigurationVar MethodName getEndpointMapping MethodName addConsumer VariableName springwebserviceconfigurationVar MethodName getEndpointMappingKey ThisExpression this SuperMethodInvocation super MethodName doStart 
IfStatement if Operator ! Name ObjectHelper MethodName equal VariableName objectVar VariableName objectVar MethodName fail VariableName stringVar Operator + StringLiteral stringLiteral VariableName objectVar StringLiteral stringLiteral VariableName objectVar StringLiteral stringLiteral 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName booleanVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName configurationVar MethodName get VariableName stringVar 
ReturnStatement return Name RegexUtil MethodName getPackagePath VariableName stringVar 
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName clear 
ParameterizedType Map VariableName mapVar ParameterizedType Map VariableName objectVar IfStatement if VariableName mapVar MethodName size Operator > VariableName intVar ReturnStatement return BooleanLiteral false ParameterizedType Map VariableName mapVar ParameterizedType Map VariableName objectVar EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName mapVar MethodName entrySet SimpleType Object VariableName objectVar VariableName entry MethodName getKey SimpleType Object VariableName objectVar VariableName entry MethodName getValue IfStatement if Operator ! Name Util MethodName nullSafeEquals VariableName value VariableName mapVar MethodName get VariableName key ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true 
SimpleType ObjAttribute VariableName objattributeVar VariableName attributepropertyVar MethodName getAttribute VariableName datarowVar MethodName put VariableName objattributeVar MethodName getDbAttributePath VariableName attributepropertyVar MethodName readPropertyDirectly VariableName persistentVar ReturnStatement return BooleanLiteral true 
MethodName flushToParent BooleanLiteral false 
IfStatement if VariableName intVar Operator < NumberLiteral numberLiteral VariableName ejbqltranslationcontextVar MethodName append StringLiteral stringLiteral IfStatement if VariableName intVar Operator + NumberLiteral numberLiteral Operator == VariableName ejbqlexpressionVar MethodName getChildrenCount VariableName ejbqltranslationcontextVar MethodName append StringLiteral stringLiteral VariableName ejbqltranslationcontextVar MethodName append CharacterLiteral charLiteral ReturnStatement return BooleanLiteral true 
ReturnStatement return VariableName classVar MethodName getName 
ReturnStatement return BooleanLiteral true 
IfStatement if Operator ! VariableName querymetadataVar MethodName isFetchingDataRows SimpleType GenericResponse VariableName genericresponseVar New new SimpleType GenericResponse ForStatement for VariableName queryresponseVar MethodName reset VariableName queryresponseVar MethodName next IfStatement if VariableName queryresponseVar MethodName isList SimpleType List VariableName listVar VariableName queryresponseVar MethodName currentList VariableName clientResponse MethodName addResultList MethodName toClientObjects VariableName serverObjects VariableName clientResponse MethodName addBatchUpdateCount VariableName queryresponseVar MethodName currentUpdateCount ThisExpression this VariableName queryresponseVar Operator = VariableName clientResponse 
ReturnStatement return MethodName getAdapter MethodName externalTypesForJdbcType VariableName intVar 
ThisExpression this VariableName objectVar Operator = VariableName objectVar 
ReturnStatement return VariableName Expression VariableName OR 
MethodName addTarget VariableName objectVar VariableName objectVar BooleanLiteral false 
ReturnStatement return SuperMethodInvocation super MethodName visitChild VariableName ejbqlexpressionvisitorVar VariableName intVar Operator && VariableName ejbqlexpressionvisitorVar MethodName visitLength ThisExpression this VariableName intVar 
ReturnStatement return VariableName NOT_PRIORITY 
ReturnStatement return SuperMethodInvocation super MethodName visitChild VariableName ejbqlexpressionvisitorVar VariableName intVar Operator && VariableName ejbqlexpressionvisitorVar MethodName visitFromItem ThisExpression this VariableName intVar 
ReturnStatement return SuperMethodInvocation super MethodName visitChild VariableName ejbqlexpressionvisitorVar VariableName intVar Operator && VariableName ejbqlexpressionvisitorVar MethodName visitSubtract ThisExpression this VariableName intVar 
ReturnStatement return VariableName ejbqlexpressionvisitorVar MethodName visitCurrentTime ThisExpression this 
ReturnStatement return VariableName connectionVar MethodName getMetaData 
ReturnStatement return VariableName datachanneldescriptorVar 
ReturnStatement return VariableName configurationnodevisitorVar MethodName visitObjRelationship ThisExpression this 
ReturnStatement return VariableName attributeVar 
TryStatement try ReturnStatement return MethodName object StringLiteral stringLiteral CatchClause catch SimpleType ParseException VariableName parseexceptionVar ReturnStatement return NullLiteral null 
ReturnStatement return New new SimpleType URL VariableName urlVar VariableName stringVar Operator + StringLiteral stringLiteral MethodName openStream 
SimpleType ItemEventBinding VariableName itemeventbindingVar New new SimpleType ItemEventBinding VariableName abstractbuttonVar VariableName stringVar ReturnStatement return MethodName prepareBinding VariableName itemeventbindingVar 
IfStatement if VariableName componentVar Instanceof instanceof SimpleType JTextPane PrimitiveType int VariableName intVar MethodName lineNumberWidth SimpleType JTextPane VariableName componentVar VariableName insetsVar VariableName left Operator = VariableName width ReturnStatement return VariableName insetsVar 
IfStatement if Operator ! VariableName modelUpdateDisabled MethodName updateModel 
SimpleType DefaultMutableTreeNode VariableName defaultmutabletreenodeVar MethodName getProjectModel MethodName getNodeForObjectPath ArrayType Object[] ArrayInitializer arrayInitializer IfStatement if VariableName defaultmutabletreenodeVar Operator == NullLiteral null ReturnStatement return SimpleType Procedure VariableName procedureVar VariableName procedureeventVar MethodName getProcedure SimpleType DefaultMutableTreeNode VariableName defaultmutabletreenodeVar New new SimpleType DefaultMutableTreeNode VariableName procedureVar BooleanLiteral false MethodName positionNode VariableName defaultmutabletreenodeVar VariableName defaultmutabletreenodeVar Name Comparators MethodName getDataMapChildrenComparator MethodName showNode VariableName defaultmutabletreenodeVar 
IfStatement if MethodName getName Operator == NullLiteral null Name JOptionPane MethodName showMessageDialog VariableName datasourcecreatorviewVar StringLiteral stringLiteral NullLiteral null VariableName JOptionPane VariableName WARNING_MESSAGE IfStatement if VariableName mapVar MethodName containsKey MethodName getName Name JOptionPane MethodName showMessageDialog VariableName datasourcecreatorviewVar StringLiteral stringLiteral Operator + MethodName getName StringLiteral stringLiteral NullLiteral null VariableName JOptionPane VariableName WARNING_MESSAGE VariableName booleanVar Operator = BooleanLiteral false VariableName datasourcecreatorviewVar MethodName dispose 
IfStatement if Operator ! VariableName objattributeinfodialogviewVar MethodName getAttributeName MethodName getText MethodName equals VariableName objattributeVar MethodName getName MethodName setEnabledSaveButton 
ReturnStatement return VariableName jlabelVar 
ReturnStatement return BooleanLiteral true 
ReturnStatement return BooleanLiteral false 
ReturnStatement return TypeLiteral class 
SimpleType Ordering VariableName orderingVar MethodName getOrdering VariableName intVar SwitchStatement switch VariableName intVar SwitchCase case NumberLiteral numberLiteral ReturnStatement return VariableName orderingVar MethodName getSortSpecString SwitchCase case NumberLiteral numberLiteral ReturnStatement return VariableName orderingVar MethodName isAscending VariableName Boolean VariableName TRUE VariableName Boolean VariableName FALSE SwitchCase case NumberLiteral numberLiteral ReturnStatement return VariableName orderingVar MethodName isCaseInsensitive VariableName Boolean VariableName TRUE VariableName Boolean VariableName FALSE SwitchCase default ThrowStatement throw New new SimpleType IndexOutOfBoundsException StringLiteral stringLiteral Operator + VariableName intVar 
ReturnStatement return VariableName jtextfieldVar 
MethodName verifyTextChange VariableName documenteventVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName filefilterVar 
ReturnStatement return New new SimpleType File VariableName fileVar VariableName stringVar 
IfStatement if Operator ! VariableName listcellrendererVar Instanceof instanceof SimpleType MultiColumnBrowserRenderer MethodName setRenderer New new SimpleType MultiColumnBrowserRenderer 
ReturnStatement return VariableName treemodelVar MethodName getChild VariableName objectVar VariableName intVar 
ReturnStatement return VariableName booleanVar VariableName stringVar VariableName stringVar 
IfStatement if VariableName configurationnodeVar Operator == NullLiteral null ReturnStatement return BooleanLiteral false ReturnStatement return SimpleType Entity VariableName configurationnodeVar MethodName getDataMap Operator != NullLiteral null 
ReturnStatement return VariableName datachannelVar 
ReturnStatement return VariableName listVar MethodName addAll VariableName collectionVar 
ReturnStatement return VariableName listVar MethodName isEmpty 
VariableName selectqueryVar MethodName setRoot VariableName objectVar 
VariableName backgroundingVar Operator = New new SimpleType Backgrounding VariableName curatorframeworkimplVar VariableName backgroundcallbackVar VariableName objectVar VariableName executorVar ReturnStatement return ThisExpression this 
ReturnStatement return VariableName ensembleproviderVar 
ThisExpression this VariableName longVar Operator = VariableName longVar ReturnStatement return ThisExpression this 
MethodName validatePath VariableName booleanVar VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar 
ThisExpression this VariableName curatorframeworkVar Operator = VariableName curatorframeworkVar ReturnStatement return ThisExpression this 
ParameterizedType Entry VariableName entryVar VariableName concurrentmapVar MethodName get VariableName serviceinstanceVar MethodName getId IfStatement if VariableName entryVar Operator == NullLiteral null ThrowStatement throw New new SimpleType Exception StringLiteral stringLiteral Operator + VariableName serviceinstanceVar SynchronizedStatement synchronized VariableName entryVar VariableName entryVar VariableName serviceinstanceVar Operator = VariableName serviceinstanceVar ArrayType byte[] VariableName byte[]Var VariableName instanceserializerVar MethodName serialize VariableName serviceinstanceVar SimpleType String VariableName stringVar MethodName pathForInstance VariableName serviceinstanceVar MethodName getName VariableName serviceinstanceVar MethodName getId VariableName curatorframeworkVar MethodName setData MethodName forPath VariableName path VariableName bytes 
EnhancedForStatement for Modifier final ParameterizedType Entry VariableName entryVar VariableName concurrentmapVar MethodName values SynchronizedStatement synchronized VariableName entry MethodName internalRegisterService VariableName entry VariableName service 
Name Preconditions MethodName checkNotNull VariableName integerVar StringLiteral stringLiteral ArrayType byte[] VariableName byte[]Var ArrayType byte[] NumberLiteral numberLiteral SimpleType ByteBuffer VariableName bytebufferVar Name ByteBuffer MethodName wrap VariableName byte[]Var VariableName bytebufferVar MethodName putInt VariableName integerVar ReturnStatement return VariableName byte[]Var 
VariableName promotedtolockVar Operator = New new SimpleType PromotedToLock Name PathUtils MethodName validatePath VariableName stringVar VariableName promotedtolockVar VariableName longVar VariableName promotedtolockVar VariableName timeunitVar VariableName promotedtolockVar VariableName retrypolicyVar ReturnStatement return ThisExpression this 
VariableName promotedtolockVar Operator = New new SimpleType PromotedToLock VariableName promotedtolockVar VariableName stringVar VariableName promotedtolockVar VariableName longVar VariableName promotedtolockVar VariableName timeunitVar VariableName retrypolicyVar ReturnStatement return ThisExpression this 
Operator ++ VariableName intVar 
IfStatement if VariableName stringVar Operator == NullLiteral null VariableName stringVar Operator = Name ZKPaths MethodName makePath VariableName stringVar VariableName stringVar Operator + Name UUID MethodName randomUUID MethodName toString IfStatement if Operator ! VariableName concurrentmapVar MethodName containsKey VariableName stringVar SimpleType T VariableName tVar VariableName queueallocatorVar MethodName allocateQueue VariableName curatorframeworkVar VariableName stringVar IfStatement if VariableName concurrentmapVar MethodName putIfAbsent VariableName stringVar VariableName queue Operator == NullLiteral null VariableName queue MethodName start VariableName setVar MethodName add VariableName stringVar 
MethodName putMulti VariableName multiitemVar VariableName longVar NumberLiteral numberLiteral NullLiteral null 
TryStatement try IfStatement if VariableName booleanVar MethodName processWithLockSafety VariableName itemNode VariableName ProcessType VariableName NORMAL MethodName processNormally VariableName itemNode VariableName ProcessType VariableName NORMAL CatchClause catch SimpleType Exception VariableName exceptionVar Name ThreadUtils MethodName checkInterrupted VariableName e VariableName loggerVar MethodName error StringLiteral stringLiteral Operator + VariableName itemNode VariableName e VariableName semaphoreVar MethodName release 
ReturnStatement return VariableName distributedqueueVar MethodName getLastMessageCount 
SimpleType SendMeshInterfaceObjectsRequest VariableName sendmeshinterfaceobjectsrequestVar New new SimpleType SendMeshInterfaceObjectsRequest VariableName sendmeshinterfaceobjectsrequestVar MethodName setSize VariableName intVar SimpleType SendMeshInterfaceObjectsResponse VariableName sendmeshinterfaceobjectsresponseVar VariableName benchmarkVar MethodName sendMeshInterfaceObjects VariableName sendmeshinterfaceobjectsrequestVar ReturnStatement return VariableName sendmeshinterfaceobjectsresponseVar MethodName getSendMeshInterfaceObjectsReturn MethodName getItem 
VariableName genericapplicationcontextVar MethodName stop VariableName genericapplicationcontextVar MethodName start 
ArrayType long[] VariableName long[]Var ArrayInitializer arrayInitializer ReturnStatement return VariableName long[]Var 
ArrayType long[] VariableName long[]Var ArrayInitializer arrayInitializer ReturnStatement return VariableName long[]Var 
ArrayType long[] VariableName long[]Var ArrayInitializer arrayInitializer ReturnStatement return VariableName long[]Var 
ThisExpression this VariableName processorenvironmentVar Operator = VariableName processorenvironmentVar 
SimpleType Definition VariableName definitionVar VariableName wsdlschemamanagerVar MethodName createWSDLDefinition VariableName xmlschemaVar MethodName getTargetNamespace VariableName wsdlschemamanagerVar MethodName attachSchemaToWSDL VariableName definitionVar VariableName xmlschemaVar BooleanLiteral true MethodName writeSchemaDefinition VariableName definitionVar VariableName writerVar ReturnStatement return BooleanLiteral true 
SimpleType Types VariableName typesVar VariableName definitionVar MethodName getTypes IfStatement if VariableName typesVar Operator != NullLiteral null ParameterizedType List VariableName listVar Name CastUtils MethodName cast VariableName typesVar MethodName getExtensibilityElements IfStatement if VariableName l Operator == NullLiteral null ReturnStatement return NullLiteral null EnhancedForStatement for SimpleType ExtensibilityElement VariableName extensibilityelementVar VariableName l IfStatement if VariableName e Instanceof instanceof SimpleType Schema SimpleType Schema VariableName schemaVar SimpleType Schema VariableName e ReturnStatement return VariableName sc MethodName getElement ReturnStatement return NullLiteral null 
VariableName printwriterVar MethodName println MethodName indent Operator + VariableName stringVar StringLiteral stringLiteral MethodName localName StringLiteral stringLiteral MethodName indentMore SuperMethodInvocation super MethodName write VariableName printwriterVar MethodName indentLess VariableName printwriterVar MethodName println MethodName indent Operator + StringLiteral stringLiteral 
ReturnStatement return VariableName intVar 
ReturnStatement return Name ToolConstants.JAXB_BINDINGS MethodName equals VariableName xmlstreamreaderVar MethodName getName Operator || Name ToolConstants.SCHEMA MethodName equals VariableName xmlstreamreaderVar MethodName getName 
VariableName stringVar Operator = SimpleType String VariableName toolcontextVar MethodName get VariableName ToolConstants VariableName CFG_XSDURL IfStatement if Operator ! VariableName toolcontextVar MethodName optionSet VariableName ToolConstants VariableName CFG_NAME VariableName toolcontextVar MethodName put VariableName ToolConstants VariableName CFG_NAME VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName stringVar MethodName length Operator - NumberLiteral numberLiteral 
SimpleType BindingOutput VariableName bindingoutputVar VariableName wsdlDefinition MethodName createBindingOutput VariableName bindingoutputVar MethodName setName VariableName outputVar MethodName getName VariableName bindingoutputVar MethodName addExtensibilityElement MethodName getXMLBody TypeLiteral class VariableName stringVar ReturnStatement return VariableName bindingoutputVar 
SimpleType File VariableName fileVar MethodName buildDir VariableName stringVar SimpleType File VariableName fileVar New new SimpleType File VariableName fileVar VariableName stringVar IfStatement if VariableName fileVar MethodName exists Operator && Operator ! VariableName fileVar MethodName delete ThrowStatement throw New new SimpleType IOException VariableName fileVar Operator + StringLiteral stringLiteral ReturnStatement return VariableName fileVar 
IfStatement if VariableName intVar Operator == NumberLiteral numberLiteral ReturnStatement return VariableName string[]Var VariableName intVar ReturnStatement return VariableName string[]Var VariableName intVar Operator - NumberLiteral numberLiteral 
VariableName stringVar Operator = MethodName formatJavaDoc VariableName stringVar StringLiteral stringLiteral 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return ThisExpression this VariableName stringVar 
ReturnStatement return ThisExpression this VariableName styleVar Operator == VariableName Style VariableName INOUT 
MethodName toString 
ReturnStatement return MethodName newBuilder MethodName getStyle 
ReturnStatement return VariableName stringVar 
SimpleType Boolean VariableName booleanVar SimpleType Boolean VariableName env MethodName get VariableName ToolConstants VariableName GEN_FROM_SEI ReturnStatement return Operator ! Operator ! VariableName booleanVar Operator && VariableName env MethodName optionSet VariableName ToolConstants VariableName CFG_CLIENT Operator ! VariableName env MethodName optionSet VariableName ToolConstants VariableName SEI_CLASS 
ReturnStatement return VariableName locationVar 
ThisExpression this VariableName listVar Operator = VariableName listVar 
IfStatement if Name WSDL11 MethodName equals VariableName stringVar ReturnStatement return VariableName WSDLVersion VariableName stringVar IfStatement if Name WSDL20 MethodName equals VariableName stringVar ReturnStatement return VariableName WSDLVersion VariableName stringVar ReturnStatement return VariableName WSDLVersion VariableName UNKNOWN 
ParameterizedType Class VariableName classVar MethodName getServiceClass IfStatement if VariableName classVar MethodName isInterface ReturnStatement return NullLiteral null ReturnStatement return New new SimpleType FactoryInvoker New new SimpleType SingletonFactory MethodName getServiceClass 
ThisExpression this VariableName listVar Operator = VariableName listVar 
ReturnStatement return MethodName encryptSequence VariableName stringVar VariableName keyVar NullLiteral null 
ReturnStatement return VariableName stringVar 
SuperMethodInvocation super MethodName doParse VariableName elementVar VariableName parsercontextVar VariableName beandefinitionbuilderVar VariableName beandefinitionbuilderVar MethodName setInitMethodName StringLiteral stringLiteral VariableName beandefinitionbuilderVar MethodName setDestroyMethodName StringLiteral stringLiteral VariableName beandefinitionbuilderVar MethodName setLazyInit BooleanLiteral false 
ReturnStatement return BooleanLiteral true 
ReturnStatement return MethodName createUnmarshaller VariableName classVar VariableName typeVar BooleanLiteral false 
ReturnStatement return Name TransformUtils MethodName createTransformWriterIfNeeded VariableName xmlstreamwriterVar VariableName outputstreamVar VariableName mapVar VariableName booleanVar VariableName listVar NullLiteral null VariableName mapVar VariableName booleanVar NullLiteral null 
IfStatement if Operator ! VariableName booleanVar VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return StringLiteral stringLiteral ReturnStatement return SuperMethodInvocation super MethodName getNamespaceURI 
ReturnStatement return TypeLiteral class Operator == VariableName classVar 
ReturnStatement return VariableName RuntimeType VariableName SERVER 
ReturnStatement return VariableName classVar 
SimpleType Object VariableName objectVar VariableName multivaluedmapVar MethodName getFirst VariableName HttpHeaders VariableName ETAG ReturnStatement return VariableName objectVar Operator == NullLiteral null Operator || VariableName objectVar Instanceof instanceof SimpleType EntityTag SimpleType EntityTag VariableName objectVar Name EntityTag MethodName valueOf VariableName objectVar MethodName toString 
ReturnStatement return MethodName get MethodName addFilter VariableName stringVar VariableName stringVar 
ReturnStatement return MethodName get MethodName addFilter VariableName stringVar VariableName classVar 
MethodName get MethodName flushBuffer 
ReturnStatement return MethodName get MethodName getBufferSize 
ReturnStatement return VariableName responseimplVar MethodName getMediaType 
ReturnStatement return MethodName doPath VariableName stringVar BooleanLiteral true 
ReturnStatement return MethodName createConstructorArguments VariableName constructorVar VariableName messageVar VariableName booleanVar NullLiteral null 
VariableName serviceFactory MethodName setResourceClasses VariableName listVar 
ReturnStatement return VariableName classresourceinfoVar 
ReturnStatement return VariableName annotation[][]Var 
ReturnStatement return VariableName classVar 
VariableName httpexchangeVar MethodName addResponseHeader VariableName stringVar VariableName stringVar 
ReturnStatement return Name JaxWsEndpointImplFactory MethodName getSingleton 
SimpleType JaxWsSoapBindingConfiguration VariableName jaxwssoapbindingconfigurationVar New new SimpleType JaxWsSoapBindingConfiguration SimpleType JaxWsServiceFactoryBean MethodName getServiceFactory IfStatement if VariableName transportId Operator != NullLiteral null VariableName jaxwssoapbindingconfigurationVar MethodName setTransportURI VariableName transportId ReturnStatement return VariableName jaxwssoapbindingconfigurationVar 
IfStatement if VariableName classVar Operator != TypeLiteral class ThrowStatement throw New new SimpleType WebServiceException StringLiteral stringLiteral Operator + VariableName classVar ReturnStatement return VariableName classVar MethodName cast MethodName getEndpointReference 
ReturnStatement return VariableName listVar 
IfStatement if Name LOG MethodName isLoggable VariableName Level VariableName FINE Name LOG MethodName log VariableName Level VariableName FINE StringLiteral stringLiteral Operator + VariableName listVar MethodName size IfStatement if MethodName isClosed ReturnStatement return MethodName invokeReversedClose 
ReturnStatement return VariableName handlerresolverVar 
ReturnStatement return VariableName listVar MethodName size 
VariableName iobufferVar MethodName put ArrayType byte[] ArrayInitializer arrayInitializer NumberLiteral numberLiteral NumberLiteral numberLiteral 
IfStatement if VariableName booleanVar ReturnStatement return VariableName booleanVar Operator = BooleanLiteral true MethodName send VariableName outputstreamVar MethodName close 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
SimpleType JMSConfiguration VariableName jmsconfigurationVar Name JMSConfigFactory MethodName createFromEndpointInfo VariableName busVar VariableName endpointinfoVar NullLiteral null ReturnStatement return New new SimpleType JMSDestination VariableName busVar VariableName endpointinfoVar VariableName jmsconfigurationVar 
ThisExpression this VariableName jmsexchangesenderVar MethodName sendExchange VariableName exchangeVar MethodName getBytes 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return ThisExpression this VariableName httpentityVar 
IfStatement if ThisExpression this VariableName mapVar Operator == NullLiteral null ThisExpression this VariableName mapVar Operator = New new ParameterizedType HashMap ThisExpression this VariableName mapVar MethodName put VariableName stringVar VariableName objectVar 
IfStatement if MethodName isCommitted ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral ThisExpression this VariableName nettyservletoutputstreamVar MethodName resetBuffer 
ReturnStatement return ThisExpression this VariableName nettyservletinputstreamVar 
VariableName channelhandlercontextVar MethodName flush 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName setVar 
SimpleType HTTPServerPolicyAssertion VariableName httpserverpolicyassertionVar New new SimpleType HTTPServerPolicyAssertion VariableName httpserverpolicyassertionVar MethodName setData MethodName getData ReturnStatement return VariableName httpserverpolicyassertionVar 
ReturnStatement return ThisExpression this VariableName stringVar 
ArrayType MBeanParameterInfo[] VariableName mbeanparameterinfo[]Var NullLiteral null IfStatement if VariableName string[]Var Operator != NullLiteral null VariableName mbeanparameterinfo[]Var Operator = ArrayType MBeanParameterInfo[] VariableName string[]Var VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName string[]Var VariableName length VariableName i Operator ++ VariableName mbeanparameterinfo[]Var VariableName i Operator = New new SimpleType MBeanParameterInfo VariableName string[]Var VariableName i VariableName string[]Var VariableName i VariableName string[]Var VariableName i VariableName mapVar MethodName put VariableName stringVar New new SimpleType ModelMBeanOperationInfo VariableName stringVar VariableName stringVar VariableName mbeanparameterinfo[]Var VariableName stringVar VariableName MBeanOperationInfo VariableName ACTION VariableName descriptorVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName object[]Var 
ReturnStatement return VariableName operationinfoVar MethodName getName MethodName equals VariableName operationinfoVar MethodName getName Operator && MethodName isSameMessageInfo VariableName operationinfoVar MethodName getInput VariableName operationinfoVar MethodName getInput MethodName isSameMessageInfo VariableName operationinfoVar MethodName getOutput VariableName operationinfoVar MethodName getOutput MethodName isSameFaultInfo VariableName operationinfoVar MethodName getFaults VariableName operationinfoVar MethodName getFaults 
SimpleType SoapFault VariableName soapfaultVar New new SimpleType SoapFault VariableName jmsfaultVar MethodName getReason VariableName jmsfaultVar MethodName isSender VariableName soapversionVar MethodName getSender VariableName soapversionVar MethodName getReceiver SimpleType QName VariableName qnameVar VariableName jmsfaultVar MethodName getSubCode VariableName soapfaultVar MethodName setSubCode VariableName qnameVar SimpleType Object VariableName objectVar VariableName jmsfaultVar MethodName getDetail IfStatement if NullLiteral null Operator == VariableName objectVar ReturnStatement return VariableName soapfaultVar MethodName setDetail VariableName soapfaultVar VariableName objectVar ReturnStatement return VariableName soapfaultVar 
IfStatement if VariableName stringVar MethodName startsWith StringLiteral stringLiteral ReturnStatement return StringLiteral stringLiteral ReturnStatement return StringLiteral stringLiteral 
IfStatement if VariableName listVar Operator == NullLiteral null ReturnStatement return Name Collections MethodName emptyList ReturnStatement return Name Collections MethodName unmodifiableList VariableName listVar 
TryStatement try SimpleType XMLStreamWriter VariableName xmlstreamwriterVar VariableName soapmessageVar MethodName getContent TypeLiteral class IfStatement if VariableName xtw Operator != NullLiteral null VariableName xtw MethodName writeEndElement VariableName xtw MethodName writeEndElement VariableName xtw MethodName writeEndDocument VariableName xtw MethodName flush CatchClause catch SimpleType XMLStreamException VariableName xmlstreamexceptionVar IfStatement if VariableName e MethodName getCause Instanceof instanceof SimpleType EOFException SimpleType SoapVersion VariableName soapversionVar VariableName soapmessageVar MethodName getVersion ThrowStatement throw New new SimpleType SoapFault New new SimpleType Message StringLiteral stringLiteral VariableName resourcebundleVar VariableName e VariableName soapVersion MethodName getSender 
ThisExpression this VariableName mapVar Operator = VariableName mapVar 
TryStatement try VariableName xmlstreamwriterVar MethodName writeEndElement CatchClause catch SimpleType XMLStreamException VariableName xmlstreamexceptionVar ThrowStatement throw New new SimpleType DatabindingException StringLiteral stringLiteral VariableName e 
SimpleType MessageWriter VariableName messagewriterVar MethodName getAttributeWriter StringLiteral stringLiteral VariableName Constants VariableName URI_2001_SCHEMA_XSI VariableName messagewriterVar MethodName writeValue StringLiteral stringLiteral VariableName messagewriterVar MethodName close 
ThisExpression this VariableName intVar Operator = VariableName intVar 
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet VariableName setVar MethodName add MethodName getComponentType ReturnStatement return VariableName setVar 
SimpleType Integer VariableName integerVar SimpleType Integer VariableName inttypeVar MethodName readObject VariableName messagereaderVar VariableName contextVar ReturnStatement return Name Character MethodName valueOf PrimitiveType char VariableName integerVar MethodName intValue 
SimpleType AegisType VariableName aegistypeVar VariableName mapVar MethodName get VariableName qnameVar IfStatement if VariableName aegistypeVar Operator == NullLiteral null Operator && VariableName typemappingVar Operator != NullLiteral null VariableName aegistypeVar Operator = VariableName typemappingVar MethodName getType VariableName qnameVar ReturnStatement return VariableName aegistypeVar 
ReturnStatement return VariableName aegistypeVar 
ReturnStatement return BooleanLiteral true 
SimpleType TypeClassInfo VariableName typeclassinfoVar MethodName createBasicClassInfo VariableName fieldVar MethodName getType VariableName typeclassinfoVar MethodName setDescription StringLiteral stringLiteral Operator + VariableName fieldVar MethodName getName StringLiteral stringLiteral VariableName fieldVar MethodName getDeclaringClass ReturnStatement return VariableName typeclassinfoVar 
IfStatement if VariableName xpathutilsVar Operator == NullLiteral null VariableName xpathutilsVar Operator = New new SimpleType XPathUtils ReturnStatement return VariableName xpathutilsVar 
Name LOG MethodName log VariableName Level VariableName INFO MethodName errorMessage VariableName saxparseexceptionVar VariableName saxparseexceptionVar 
ReturnStatement return BooleanLiteral false 
IfStatement if VariableName objectVar Instanceof instanceof SimpleType XMLStreamReader Operator && VariableName qnameVar Operator != NullLiteral null SimpleType XMLStreamReader VariableName xmlstreamreaderVar SimpleType XMLStreamReader VariableName objectVar SimpleType String VariableName stringVar VariableName reader MethodName getAttributeValue VariableName Constants VariableName URI_2001_SCHEMA_XSI StringLiteral stringLiteral IfStatement if Name StringUtils MethodName isEmpty VariableName type VariableName objectVar Operator = New new SimpleType AddXSITypeStreamReader VariableName reader VariableName qnameVar ReturnStatement return VariableName objectVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
IfStatement if VariableName orig Operator != NullLiteral null VariableName orig MethodName establishTrust VariableName stringVar VariableName urlconnectioninfoVar VariableName messageVar SimpleType HttpsURLConnectionInfo VariableName httpsurlconnectioninfoVar SimpleType HttpsURLConnectionInfo VariableName urlconnectioninfoVar IfStatement if VariableName httpsurlconnectioninfoVar MethodName getLocalCertificates Operator == NullLiteral null Operator || VariableName httpsurlconnectioninfoVar MethodName getLocalCertificates VariableName length Operator == NumberLiteral numberLiteral ThrowStatement throw New new SimpleType UntrustedURLConnectionIOException StringLiteral stringLiteral Operator + StringLiteral stringLiteral StringLiteral stringLiteral 
ReturnStatement return VariableName stringVar 
MethodName getInFaultInterceptors MethodName addAll VariableName listVar 
ParameterizedType List VariableName listVar VariableName descriptioninfoVar MethodName getExtensors TypeLiteral class IfStatement if VariableName listVar Operator != NullLiteral null EnhancedForStatement for SimpleType UnknownExtensibilityElement VariableName unknownextensibilityelementVar VariableName listVar IfStatement if Name Constants MethodName isPolicyElement VariableName e MethodName getElementType Operator && VariableName stringVar MethodName equals VariableName e MethodName getElement MethodName getAttributeNS VariableName PolicyConstants VariableName WSU_NAMESPACE_URI VariableName PolicyConstants VariableName WSU_ID_ATTR_NAME ReturnStatement return VariableName policybuilderVar MethodName getPolicy VariableName e MethodName getElement ReturnStatement return NullLiteral null 
IfStatement if VariableName effectivepolicyVar Operator == NullLiteral null Operator || VariableName effectivepolicyVar MethodName getChosenAlternative Operator == NullLiteral null ReturnStatement return NullLiteral null ParameterizedType Collection VariableName collectionVar New new ParameterizedType ArrayList EnhancedForStatement for SimpleType Assertion VariableName assertionVar VariableName effectivepolicyVar MethodName getChosenAlternative IfStatement if VariableName Constants VariableName TYPE_ASSERTION Operator == VariableName assertion MethodName getType IfStatement if VariableName booleanVar Operator || Operator ! VariableName assertion MethodName isOptional VariableName collectionVar MethodName add VariableName assertion MethodName addAssertions VariableName assertion VariableName booleanVar VariableName collectionVar ReturnStatement return VariableName collectionVar 
SimpleType T VariableName tVar NullLiteral null EnhancedForStatement for SimpleType T VariableName tVar VariableName listVar IfStatement if NullLiteral null Operator == VariableName tVar VariableName tVar Operator = VariableName p IfStatement if VariableName tVar Operator != VariableName p VariableName tVar Operator = VariableName policycalculatorVar MethodName intersect VariableName p VariableName tVar IfStatement if NullLiteral null Operator == VariableName tVar MethodName logAndThrowPolicyException VariableName p ReturnStatement return VariableName tVar 
ParameterizedType JAXBElement VariableName jaxbelementVar ParameterizedType JAXBElement ThisExpression this MethodName getDelivery MethodName getContent MethodName get NumberLiteral numberLiteral ReturnStatement return VariableName jaxbelementVar MethodName getValue MethodName getAddress MethodName getValue MethodName trim 
ReturnStatement return VariableName stringVar MethodName equals VariableName stringVar 
SuperMethodInvocation super MethodName parseChildElements VariableName elementVar VariableName parsercontextVar VariableName mutablebeanmetadataVar VariableName mutablebeanmetadataVar MethodName setInitMethod StringLiteral stringLiteral VariableName mutablebeanmetadataVar MethodName setDestroyMethod StringLiteral stringLiteral 
ReturnStatement return New new SimpleType PolicyContainingPrimitiveAssertion VariableName RM11Constants VariableName WSRMP_RMASSERTION_QNAME MethodName isOptional VariableName elementVar MethodName isIgnorable VariableName elementVar VariableName mapVar VariableName policyVar 
SimpleType Assertion VariableName assertionVar NullLiteral null IfStatement if Name WSMC_NAMESPACE MethodName equals VariableName elementVar MethodName getNamespaceURI Operator && Name MCSUPPORTED_NAME MethodName equals VariableName elementVar MethodName getLocalName PrimitiveType boolean VariableName booleanVar Name XMLPrimitiveAssertionBuilder MethodName isOptional VariableName elementVar VariableName assertionVar Operator = New new SimpleType PrimitiveAssertion VariableName qnameVar VariableName optional ReturnStatement return VariableName assertionVar 
Name LOG MethodName fine StringLiteral stringLiteral SimpleType RMConstants VariableName rmconstantsVar VariableName protocolvariationVar MethodName getConstants Modifier final SimpleType OperationInfo VariableName operationinfoVar VariableName rmendpointVar MethodName getEndpoint VariableName protocolvariationVar MethodName getEndpointInfo MethodName getService MethodName getInterface MethodName getOperation VariableName rmconstantsVar MethodName getCreateSequenceResponseOnewayOperationName MethodName invoke VariableName operationinfoVar VariableName protocolvariationVar ArrayType Object[] ArrayInitializer arrayInitializer 
IfStatement if VariableName createsequenceresponsetypeVar Operator == NullLiteral null ReturnStatement return NullLiteral null SimpleType CreateSequenceResponseType VariableName createsequenceresponsetypeVar New new SimpleType CreateSequenceResponseType VariableName createsequenceresponsetypeVar MethodName setAccept MethodName convert VariableName createsequenceresponsetypeVar MethodName getAccept VariableName createsequenceresponsetypeVar MethodName setExpires MethodName convert VariableName createsequenceresponsetypeVar MethodName getExpires VariableName createsequenceresponsetypeVar MethodName setIdentifier MethodName convert VariableName createsequenceresponsetypeVar MethodName getIdentifier MethodName addAll VariableName createsequenceresponsetypeVar MethodName getAny VariableName createsequenceresponsetypeVar MethodName getAny MethodName putAll VariableName createsequenceresponsetypeVar MethodName getOtherAttributes VariableName createsequenceresponsetypeVar MethodName getOtherAttributes ReturnStatement return VariableName createsequenceresponsetypeVar 
VariableName xmlstreamwriterVar MethodName flush VariableName xmlstreamwriterVar MethodName close ReturnStatement return VariableName loadingbytearrayoutputstreamVar 
SimpleType SecurityContext VariableName securitycontextVar VariableName containerrequestcontextVar MethodName getSecurityContext IfStatement if Operator ! VariableName securitycontextVar Instanceof instanceof SimpleType OidcSecurityContext Operator && VariableName securitycontextVar MethodName getUserPrincipal Operator != NullLiteral null ThrowStatement throw Name ExceptionUtils MethodName toNotAuthorizedException NullLiteral null NullLiteral null 
ReturnStatement return VariableName stringVar 
SuperMethodInvocation super MethodName setProperty VariableName stringVar VariableName listVar 
ReturnStatement return Name StringUtils MethodName toBytesUTF8 MethodName getDecodedJwsPayload 
ReturnStatement return VariableName SignatureAlgorithm VariableName NONE Operator == MethodName getAlgorithm 
Modifier final SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getAlgorithm MethodName getJwaName IfStatement if Name SIGNATURE_LENGTH_MAP MethodName get VariableName stringVar Operator != VariableName byte[]Var VariableName length Name LOG MethodName warning StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral Name SIGNATURE_LENGTH_MAP MethodName get VariableName stringVar StringLiteral stringLiteral VariableName byte[]Var VariableName length ThrowStatement throw New new SimpleType JwsException VariableName JwsException VariableName Error VariableName INVALID_SIGNATURE ArrayType byte[] VariableName byte[]Var MethodName signatureToDer VariableName byte[]Var ReturnStatement return SuperMethodInvocation super MethodName verify VariableName jwsheadersVar VariableName stringVar VariableName byte[]Var 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return Name SAMLUtils MethodName createAssertion VariableName messageVar 
VariableName securitycontextproviderVar Operator = VariableName securitycontextproviderVar 
ReturnStatement return VariableName stringVar Operator != NullLiteral null Operator && VariableName stringVar MethodName startsWith StringLiteral stringLiteral 
IfStatement if VariableName jwssignatureverifierVar Operator != NullLiteral null ReturnStatement return VariableName jwssignatureverifierVar ReturnStatement return Name JwsUtils MethodName loadSignatureVerifier VariableName booleanVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
SimpleType SecurityContext VariableName securitycontextVar MethodName getMessageContext MethodName getSecurityContext IfStatement if Operator ! VariableName securitycontextVar MethodName isSecure Operator && VariableName booleanVar Name LOG MethodName warning StringLiteral stringLiteral Name AuthorizationUtils MethodName throwAuthorizationFailure VariableName supportedSchemes VariableName realm IfStatement if VariableName securitycontextVar MethodName getUserPrincipal Operator == NullLiteral null Operator && VariableName booleanVar Name LOG MethodName warning StringLiteral stringLiteral Name AuthorizationUtils MethodName throwAuthorizationFailure VariableName supportedSchemes VariableName realm 
ArrayType String[] VariableName string[]Var MethodName getParts VariableName stringVar SimpleType ServerAccessToken VariableName serveraccesstokenVar MethodName recreateAccessToken VariableName oauthdataproviderVar VariableName stringVar VariableName string[]Var ReturnStatement return New new SimpleType RefreshToken VariableName serveraccesstokenVar VariableName stringVar MethodName parseSimpleList VariableName string[]Var VariableName string[]Var VariableName length Operator - NumberLiteral numberLiteral 
ReturnStatement return VariableName clientVar 
IfStatement if Operator ! MethodName isDuplicate VariableName stringVar VariableName stringVar VariableName clientstateVar MethodName getRequestHeaders MethodName add VariableName stringVar VariableName stringVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName stringVar 
VariableName h Operator = NullLiteral null ReturnStatement return Name HttpUtils MethodName getModifiableHeaders VariableName m 
IfStatement if VariableName stringVar Operator == NullLiteral null Operator || Name JAXB_DEFAULT_NAMESPACE MethodName equals VariableName stringVar Operator || VariableName stringVar MethodName length Operator == NumberLiteral numberLiteral ReturnStatement return NullLiteral null IfStatement if VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName length Operator == NumberLiteral numberLiteral ReturnStatement return NullLiteral null IfStatement if Name JAXB_DEFAULT_NAME MethodName equals VariableName stringVar VariableName stringVar Operator = Name StringUtils MethodName uncapitalize VariableName classVar MethodName getSimpleName SimpleType String VariableName stringVar MethodName getPrefix VariableName stringVar VariableName mapVar ReturnStatement return New new SimpleType QName VariableName stringVar VariableName stringVar VariableName stringVar 
SimpleType Method VariableName methodVar VariableName operationresourceinfoVar MethodName getAnnotatedMethod ReturnStatement return VariableName methodVar Operator != NullLiteral null VariableName methodVar VariableName operationresourceinfoVar MethodName getMethodToInvoke 
ReturnStatement return VariableName mapVar MethodName containsKey VariableName stringVar 
ThisExpression this VariableName mapVar Operator = VariableName mapVar 
ReturnStatement return Operator - NumberLiteral numberLiteral 
IfStatement if VariableName stringVar Operator != NullLiteral null VariableName booleanVar Operator = BooleanLiteral true VariableName listVar MethodName add NumberLiteral numberLiteral VariableName booleanVar VariableName stringVar Operator = NullLiteral null VariableName booleanVar Operator = BooleanLiteral false SuperMethodInvocation super MethodName writeStartElement VariableName stringVar 
ReturnStatement return VariableName classVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return MethodName condition VariableName FiqlParser VariableName GE VariableName stringVar 
ReturnStatement return MethodName getVisitorState MethodName get 
ReturnStatement return Name Collections MethodName unmodifiableList VariableName listVar 
ReturnStatement return VariableName abstractcreatepullpointVar 
VariableName notificationconsumerVar MethodName notify VariableName notifyVar 
TryStatement try ReturnStatement return New new SimpleType ObjectName StringLiteral stringLiteral CatchClause catch SimpleType Exception VariableName exceptionVar ReturnStatement return NullLiteral null 
Modifier final ArrayType Class VariableName classVar ArrayType Class VariableName listVar MethodName size ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName listVar MethodName size VariableName i Operator ++ VariableName classVar VariableName i Operator = Name Class MethodName forName VariableName listVar MethodName get VariableName i ReturnStatement return VariableName classVar 
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName listVar MethodName add New new SimpleType X509AppId VariableName Applications VariableName ISSUER VariableName stringVar VariableName listVar MethodName add New new SimpleType X509AppId VariableName Applications VariableName SERIAL VariableName bigintegerVar MethodName toString NumberLiteral numberLiteral ReturnStatement return MethodName getCertificate VariableName listVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
IfStatement if VariableName dispatchVar Operator != NullLiteral null SimpleType Closeable VariableName dispatchVar MethodName close VariableName dispatchVar Operator = NullLiteral null VariableName serviceimplVar Operator = NullLiteral null 
ThisExpression this VariableName byte[]Var Operator = VariableName byte[]Var 
ThisExpression this VariableName listVar Operator = VariableName listVar 
ThisExpression this VariableName samlcustomhandlerVar Operator = VariableName samlcustomhandlerVar 
ThisExpression this VariableName principalVar Operator = VariableName principalVar 
ThisExpression this VariableName longVar Operator = VariableName longVar 
SimpleType ProcessedClaim VariableName processedclaimVar NullLiteral null IfStatement if VariableName processedclaimVar Operator != NullLiteral null VariableName processedclaimVar Operator = VariableName processedclaimVar MethodName clone IfStatement if VariableName processedclaimVar MethodName getValues Operator != NullLiteral null ParameterizedType List VariableName listVar VariableName processedclaimVar MethodName getValues ParameterizedType Set VariableName setVar New new ParameterizedType LinkedHashSet VariableName oldValues VariableName processedclaimVar MethodName getValues MethodName clear VariableName processedclaimVar MethodName getValues MethodName addAll VariableName distincValues ReturnStatement return VariableName processedclaimVar 
VariableName conduitselectorVar Operator = VariableName conduitselectorVar 
EnhancedForStatement for SimpleType DataFlavor VariableName dataflavorVar VariableName dataflavor[]Var IfStatement if VariableName f MethodName equals VariableName dataflavorVar ReturnStatement return MethodName getContent VariableName datasourceVar ReturnStatement return NullLiteral null 
EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName mapVar MethodName entrySet IfStatement if VariableName e MethodName getValue MethodName equals VariableName stringVar ReturnStatement return VariableName e MethodName getKey IfStatement if VariableName namespacecontextVar Operator != NullLiteral null ReturnStatement return VariableName namespacecontextVar MethodName getPrefix VariableName stringVar ReturnStatement return NullLiteral null 
VariableName xmlstreamwriterVar MethodName writeEmptyElement VariableName stringVar 
IfStatement if VariableName listVar Operator != NullLiteral null EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar SimpleType QName VariableName qnameVar Name DOMUtils MethodName convertStringToQName VariableName entry VariableName setVar MethodName add VariableName name 
IfStatement if VariableName listVar Operator == NullLiteral null ReturnStatement return Name Collections MethodName emptyList ReturnStatement return Name Collections MethodName unmodifiableList VariableName listVar 
ReturnStatement return VariableName stringVar 
SimpleType DestinationFactory VariableName destinationfactoryVar VariableName mapVar MethodName get VariableName stringVar IfStatement if VariableName destinationfactoryVar Operator == NullLiteral null Operator && Operator ! VariableName setVar MethodName contains VariableName stringVar VariableName destinationfactoryVar Operator = New new ParameterizedType TransportFinder VariableName busVar VariableName mapVar VariableName setVar TypeLiteral class MethodName findTransportForNamespace VariableName stringVar IfStatement if VariableName destinationfactoryVar Operator == NullLiteral null VariableName setVar MethodName add VariableName stringVar ThrowStatement throw New new SimpleType BusException New new SimpleType Message StringLiteral stringLiteral VariableName resourcebundleVar VariableName stringVar ReturnStatement return VariableName destinationfactoryVar 
ReturnStatement return MethodName createBus VariableName urlVar MethodName defaultBusNotExists 
SimpleType ExtensionManagerBus VariableName extensionmanagerbusVar New new SimpleType ExtensionManagerBus VariableName mapVar VariableName mapVar MethodName possiblySetDefaultBus VariableName extensionmanagerbusVar MethodName initializeBus VariableName extensionmanagerbusVar VariableName extensionmanagerbusVar MethodName initialize ReturnStatement return VariableName extensionmanagerbusVar 
EnhancedForStatement for ParameterizedType Class VariableName classVar VariableName classVar SimpleType Annotation VariableName annotationVar VariableName cls MethodName getAnnotation VariableName classVar IfStatement if VariableName annotation Operator != NullLiteral null ReturnStatement return MethodName initializeAnnotationObjects VariableName annotation VariableName classVar ReturnStatement return NullLiteral null 
VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return Name Base64UrlUtility MethodName encode MethodName getDigestBytes 
IfStatement if VariableName xmlschemaelementVar MethodName isRef ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral IfStatement if VariableName xmlschemaelementVar MethodName getForm MethodName equals VariableName XmlSchemaForm VariableName QUALIFIED ReturnStatement return BooleanLiteral true IfStatement if VariableName xmlschemaelementVar MethodName getForm MethodName equals VariableName XmlSchemaForm VariableName UNQUALIFIED ReturnStatement return BooleanLiteral false ReturnStatement return VariableName xmlschemaVar MethodName getElementFormDefault MethodName equals VariableName XmlSchemaForm VariableName QUALIFIED 
SimpleType Object VariableName objectVar VariableName jaxbcontextproxyVar MethodName getBeanInfo VariableName classVar IfStatement if VariableName objectVar Operator == NullLiteral null ReturnStatement return NullLiteral null IfStatement if VariableName objectVar Instanceof instanceof SimpleType JAXBBeanInfo ReturnStatement return SimpleType JAXBBeanInfo VariableName objectVar ReturnStatement return Name ReflectionInvokationHandler MethodName createProxyWrapper VariableName objectVar TypeLiteral class 
ReturnStatement return VariableName Names VariableName WSA_ADDRESS_QNAME 
IfStatement if VariableName threadpoolexecutorVar Operator == NullLiteral null ReturnStatement return NumberLiteral numberLiteral ReturnStatement return VariableName threadpoolexecutorVar MethodName getPoolSize 
VariableName messageVar Operator = VariableName messageVar IfStatement if NullLiteral null Operator != VariableName messageVar VariableName messageVar MethodName setExchange ThisExpression this 
MethodName removeDir VariableName fileVar BooleanLiteral true 
ForStatement for PrimitiveType int VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral VariableName i Operator >= NumberLiteral numberLiteral VariableName i Operator -- ParameterizedType List VariableName listVar VariableName listVar MethodName get VariableName i ParameterizedType ListIterator VariableName listiteratorVar VariableName scope MethodName listIterator WhileStatement while VariableName lsIterator MethodName hasNext SimpleType NSDecl VariableName nsdeclVar VariableName lsIterator MethodName next IfStatement if VariableName nsd MethodName getUri MethodName equals VariableName stringVar ReturnStatement return VariableName nsd MethodName getPrefix ReturnStatement return NullLiteral null 
IfStatement if VariableName elementVar MethodName getNamespaceURI Operator != NullLiteral null Operator && VariableName stringVar MethodName equals VariableName elementVar MethodName getLocalName Operator && VariableName stringVar MethodName contains VariableName elementVar MethodName getNamespaceURI VariableName listVar MethodName add VariableName elementVar SimpleType Element VariableName elementVar MethodName getFirstElement VariableName elementVar WhileStatement while VariableName elementVar Operator != NullLiteral null MethodName findAllElementsByTagNameNS VariableName elementVar VariableName stringVar VariableName stringVar VariableName listVar VariableName elementVar Operator = MethodName getNextElement VariableName elementVar 
VariableName outputstreamVar MethodName flush VariableName outputstreamVar MethodName close 
ReturnStatement return VariableName booleanVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
SimpleType Exception VariableName exceptionVar NullLiteral null IfStatement if MethodName getCause Instanceof instanceof SimpleType Exception VariableName exceptionVar Operator = SimpleType Exception MethodName getCause ReturnStatement return VariableName exceptionVar 
IfStatement if VariableName resultsetVar Operator == NullLiteral null ReturnStatement return BooleanLiteral false TryStatement try SimpleType Statement VariableName statementVar VariableName resultsetVar MethodName getStatement SimpleType Connection VariableName connectionVar VariableName stmt MethodName getConnection ReturnStatement return Operator ! VariableName conn MethodName isClosed CatchClause catch SimpleType SQLException VariableName sqlexceptionVar ReturnStatement return BooleanLiteral false 
ReturnStatement return VariableName stringVar 
ReturnStatement return New new SimpleType DelegateWorkerSendFunctions VariableName arraylistVar 
ParameterizedType Reducer VariableName reducerVar MethodName getOrThrow VariableName mapVar StringLiteral stringLiteral VariableName stringVar SynchronizedStatement synchronized VariableName reducerVar VariableName reducerVar MethodName reduceMerge VariableName writableVar 
IfStatement if VariableName index Operator >= VariableName intVar Operator || Name Boolean.TRUE MethodName equals VariableName supplierVar MethodName get ReturnStatement return MethodName endOfData VariableName index Operator ++ ReturnStatement return VariableName blockVar MethodName iterator 
ReturnStatement return VariableName blockmasterapiVar MethodName getTotalNumEdges 
ParameterizedType Iterator VariableName iteratorVar VariableName supplierfromvertexVar MethodName get VariableName vertexVar SimpleType M VariableName mVar VariableName supplierfromvertexVar MethodName get VariableName vertexVar IfStatement if VariableName mVar Operator != NullLiteral null Operator && VariableName iteratorVar Operator != NullLiteral null Operator && VariableName iteratorVar MethodName hasNext VariableName blockworkersendapiVar MethodName sendMessageToMultipleEdges VariableName iteratorVar VariableName mVar 
ReturnStatement return VariableName strconfoptionVar MethodName get VariableName configurationVar 
ThisExpression this VariableName setVar Operator = VariableName setVar 
SimpleType AggregatedValue VariableName aggregatedvalueVar SimpleType AggregatedValue VariableName generatedmessageVar ThisExpression this VariableName writableVar Operator = SimpleType Writable Name Class MethodName forName VariableName aggregatedvalueVar MethodName getWritableClass MethodName newInstance Name WritableUtils MethodName readFieldsFromByteArray VariableName aggregatedvalueVar MethodName getValue MethodName toByteArray ThisExpression this VariableName writableVar ThisExpression this VariableName stringVar Operator = VariableName aggregatedvalueVar MethodName getKey 
Name LOG MethodName info StringLiteral stringLiteral Operator + VariableName throwableVar MethodName getMessage StringLiteral stringLiteral ParameterizedType GiraphVertexScenarioWrapper VariableName giraphvertexscenariowrapperVar MethodName getGiraphVertexScenario VariableName vertexVar MethodName getPreviousVertexValue VariableName iterableVar SimpleType ExceptionWrapper VariableName exceptionwrapperVar New new SimpleType ExceptionWrapper VariableName throwableVar MethodName getMessage Name ExceptionUtils MethodName getStackTrace VariableName throwableVar VariableName giraphvertexscenariowrapperVar MethodName setExceptionWrapper VariableName exceptionwrapperVar Name COMMON_VERTEX_MASTER_INTERCEPTING_UTIL MethodName saveScenarioWrapper VariableName giraphvertexscenariowrapperVar Name DebuggerUtils MethodName getFullTraceFileName VariableName DebugTrace VariableName VERTEX_EXCEPTION Name COMMON_VERTEX_MASTER_INTERCEPTING_UTIL MethodName getJobId MethodName getSuperstep VariableName vertexVar MethodName getId MethodName toString 
ReturnStatement return NumberLiteral numberLiteral 
SimpleType WorkerInfo VariableName workerinfoVar Name AggregatorUtils MethodName getOwner VariableName stringVar VariableName centralizedserviceworkerVar MethodName getWorkerInfoList IfStatement if MethodName isThisWorker VariableName workerinfoVar ReturnStatement return BooleanLiteral false PrimitiveType int VariableName intVar VariableName sendglobalcommcacheVar MethodName addValue VariableName workerinfoVar MethodName getTaskId VariableName stringVar VariableName GlobalCommType VariableName REDUCED_VALUE VariableName writableVar IfStatement if VariableName currentSize Operator >= VariableName intVar MethodName flushAggregatorsToWorker VariableName workerinfoVar ReturnStatement return BooleanLiteral true 
SimpleType DataInputOutput VariableName datainputoutputVar MethodName getPartitionMap VariableName iVar MethodName get VariableName iVar IfStatement if VariableName datainputoutputVar Operator == NullLiteral null ReturnStatement return Name EmptyIterable MethodName get ReturnStatement return New new ParameterizedType MessagesIterable VariableName datainputoutputVar VariableName messagevaluefactoryVar 
ReturnStatement return MethodName getPyObject MethodName __hash__ MethodName asInt 
ReturnStatement return New new ParameterizedType UnmodifiableIterator Modifier private Modifier final ParameterizedType ObjectIterator VariableName objectiteratorVar VariableName long2doubleopenhashmapVar MethodName long2DoubleEntrySet MethodName fastIterator Modifier private Modifier final ParameterizedType ReusableEdge VariableName reusableedgeVar Name EdgeFactory MethodName createReusable New new SimpleType LongWritable New new SimpleType DoubleWritable ReturnStatement return VariableName mapIterator MethodName hasNext SimpleType Entry VariableName entryVar VariableName mapIterator MethodName next VariableName representativeEdge MethodName getTargetVertexId MethodName set VariableName entryVar MethodName getLongKey VariableName representativeEdge MethodName getValue MethodName set VariableName entryVar MethodName getDoubleValue ReturnStatement return VariableName representativeEdge 
ReturnStatement return VariableName intVar 
VariableName iteratorimplVar MethodName reset ReturnStatement return VariableName iteratorimplVar 
ReturnStatement return New new ParameterizedType ResettableIterator Modifier private PrimitiveType int VariableName intVar ReturnStatement return VariableName pos Operator < VariableName warraylistVar MethodName size IfStatement if Operator ! MethodName hasNext ThrowStatement throw New new SimpleType NoSuchElementException VariableName warraylistVar MethodName getIntoW VariableName pos VariableName tVar VariableName pos Operator ++ ReturnStatement return VariableName tVar VariableName pos Operator = NumberLiteral numberLiteral ThrowStatement throw New new SimpleType UnsupportedOperationException 
ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < MethodName size Operator ++ VariableName i VariableName floatconsumerVar MethodName apply MethodName getFloat VariableName i 
ReturnStatement return VariableName int2objectopenhashmapVar MethodName put VariableName intwritableVar MethodName get VariableName vVar 
ReturnStatement return Name Maps MethodName newConcurrentMap 
ReturnStatement return VariableName timeUnit 
IfStatement if VariableName intVar Operator + VariableName intVar Operator > VariableName count ThrowStatement throw New new SimpleType IndexOutOfBoundsException Name String MethodName format StringLiteral stringLiteral Operator + StringLiteral stringLiteral VariableName intVar VariableName intVar VariableName count ReturnStatement return Name Arrays MethodName copyOfRange VariableName buf VariableName intVar VariableName intVar 
WhileStatement while BooleanLiteral true PrimitiveType int VariableName intVar PrimitiveType int VariableName longVar Operator & NumberLiteral numberLiteral VariableName longVar Operator >>>= NumberLiteral numberLiteral IfStatement if VariableName longVar Operator == NumberLiteral numberLiteral VariableName dataoutputVar MethodName writeByte PrimitiveType byte VariableName bits ReturnStatement return VariableName dataoutputVar MethodName writeByte PrimitiveType byte VariableName bits Operator | NumberLiteral numberLiteral 
PrimitiveType byte VariableName byteVar VariableName datainputVar MethodName readByte SimpleType SerializedMessageClass VariableName serializedmessageclassVar Name SerializedMessageClass MethodName values VariableName byteVar ParameterizedType VertexIdMessages VariableName vertexidmessagesVar SwitchStatement switch VariableName serializedmessageclassVar SwitchCase case VariableName BYTE_ARRAY_VERTEX_ID_MESSAGES VariableName vertexidmessagesVar Operator = New new ParameterizedType ByteArrayVertexIdMessages VariableName messagevaluefactoryVar VariableName vertexidmessagesVar MethodName setConf VariableName immutableclassesgiraphconfigurationVar BreakStatement break SwitchCase case VariableName BYTE_ARRAY_ONE_MESSAGE_TO_MANY_IDS VariableName vertexidmessagesVar Operator = New new ParameterizedType ByteArrayOneMessageToManyIds VariableName messagevaluefactoryVar VariableName vertexidmessagesVar MethodName setConf VariableName immutableclassesgiraphconfigurationVar BreakStatement break SwitchCase default ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + StringLiteral stringLiteral VariableName vertexidmessagesVar MethodName readFields VariableName datainputVar ReturnStatement return VariableName vertexidmessagesVar 
VariableName dataoutputVar MethodName writeLong VariableName longVar VariableName dataoutputVar MethodName writeLong VariableName longVar VariableName dataoutputVar MethodName writeLong VariableName longVar VariableName dataoutputVar MethodName writeLong VariableName longVar VariableName dataoutputVar MethodName writeLong VariableName longVar VariableName dataoutputVar MethodName writeLong VariableName longVar VariableName dataoutputVar MethodName writeLong VariableName longVar VariableName dataoutputVar MethodName writeInt VariableName intVar VariableName dataoutputVar MethodName writeBoolean VariableName booleanVar VariableName dataoutputVar MethodName writeBoolean VariableName checkpointstatusVar Operator != NullLiteral null IfStatement if VariableName checkpointstatusVar Operator != NullLiteral null VariableName dataoutputVar MethodName writeInt VariableName checkpointstatusVar MethodName ordinal 
ParameterizedType Vertex VariableName vertexVar MethodName getConf MethodName createVertex VariableName vertexVar MethodName initialize VariableName iVar VariableName vVar VariableName outedgesVar VariableName workerclientrequestprocessorVar MethodName addVertexRequest VariableName vertexVar 
ReturnStatement return VariableName valuefactoriesVar MethodName getVertexIdFactory 
ReturnStatement return Name WritableUtils MethodName createWritable MethodName getMappingTargetClass 
Name VERTEX_OUTPUT_FORMAT_THREAD_SAFE MethodName set ThisExpression this VariableName booleanVar 
Name ZOOKEEPER_LIST MethodName set ThisExpression this VariableName stringVar Name ZOOKEEPER_IS_EXTERNAL MethodName set ThisExpression this BooleanLiteral false 
ReturnStatement return VariableName classVar Operator == NullLiteral null StringLiteral stringLiteral VariableName classVar MethodName getSimpleName 
ReturnStatement return VariableName arraylistVar MethodName get VariableName intVar 
ThisExpression this VariableName iVar Operator = VariableName iVar 
ReturnStatement return VariableName graphtaskmanagerVar 
ReturnStatement return VariableName workerclientVar 
SimpleType String VariableName stringVar MethodName pathToDirString VariableName configurationVar VariableName pathVar SimpleType String VariableName stringVar VariableName configurationVar MethodName get VariableName stringVar VariableName configurationVar MethodName set VariableName stringVar VariableName stringVar Operator == NullLiteral null VariableName stringVar VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar 
ReturnStatement return New new SimpleType PseudoRandomVertexReader 
ReturnStatement return VariableName profilereferenceVar 
SimpleType String VariableName stringVar MethodName displayNameFor VariableName resultsetVar MethodName getString StringLiteral stringLiteral ReturnStatement return New new SimpleType ConnectedProfile VariableName stringVar VariableName resultsetVar MethodName getString StringLiteral stringLiteral 
VariableName modelVar MethodName addAttribute StringLiteral stringLiteral New new ParameterizedType FieldModel 
SimpleType SimpleMailMessage VariableName simplemailmessageVar VariableName converterVar MethodName convert VariableName resetpasswordrequestVar VariableName mailsenderVar MethodName send VariableName simplemailmessageVar 
ReturnStatement return VariableName intVar 
VariableName mappingrulevalidationcontextVar MethodName validateQueuePath ThisExpression this VariableName stringVar 
ThisExpression this VariableName ioerrorVar Operator = VariableName ioerrorVar ReturnStatement return ThisExpression this 
ThisExpression this VariableName ioerrorVar Operator = VariableName ioerrorVar ReturnStatement return ThisExpression this 
ReturnStatement return ThisExpression this VariableName ioerrorVar 
ReturnStatement return VariableName listVar MethodName get VariableName intVar 
VariableName booleanVar Operator = VariableName booleanVar Operator || VariableName booleanVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return ThisExpression this VariableName tablerecordreaderimplVar MethodName nextKeyValue 
IfStatement if ThisExpression this Operator == VariableName objectVar ReturnStatement return BooleanLiteral true IfStatement if VariableName objectVar Operator == NullLiteral null Operator || MethodName getClass Operator != VariableName objectVar MethodName getClass ReturnStatement return BooleanLiteral false ParameterizedType Option VariableName optionVar ParameterizedType Option VariableName objectVar IfStatement if Operator ! MethodName getOptionIdentifier MethodName equals VariableName optionVar MethodName getOptionIdentifier ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true 
ReturnStatement return VariableName tuplecontextVar 
ReturnStatement return MethodName getTableName 
ReturnStatement return StringLiteral stringLiteral Operator + Name Arrays MethodName toString VariableName string[]Var StringLiteral stringLiteral VariableName entitykeymetadataVar StringLiteral stringLiteral 
VariableName persistenceunitinfoVar MethodName addTransformer VariableName classtransformerVar 
TryStatement try ReturnStatement return VariableName statementVar MethodName getMoreResults CatchClause catch SimpleType Throwable VariableName throwableVar ReturnStatement return BooleanLiteral false 
SimpleType Job VariableName jobVar New new SimpleType Job VariableName jobconfVar SimpleType JobContext VariableName jobcontextVar Name ShimLoader MethodName getHadoopShims MethodName newJobContext VariableName jobVar MethodName checkOutputSpecs VariableName jobcontextVar 
ReturnStatement return VariableName errorMessage 
VariableName keyVar MethodName getColumnFamily VariableName textVar VariableName keyVar MethodName getColumnQualifier VariableName textVar ReturnStatement return VariableName textVar MethodName equals VariableName textVar Operator && VariableName textVar MethodName equals VariableName textVar 
MethodName drop_table_with_environment_context VariableName stringVar VariableName stringVar VariableName booleanVar NullLiteral null 
ThisExpression this VariableName longVar Operator = VariableName longVar 
ReturnStatement return StringLiteral stringLiteral 
IfStatement if VariableName byteVar Operator == NumberLiteral numberLiteral ReturnStatement return NumberLiteral numberLiteral IfStatement if VariableName shortVar Operator == NumberLiteral numberLiteral PrimitiveType long VariableName longVar VariableName ret Operator = ThisExpression this VariableName unsignedint128Var MethodName getV1 VariableName ret Operator <<= NumberLiteral numberLiteral VariableName ret Operator |= VariableName SqlMathUtil VariableName LONG_MASK Operator & ThisExpression this VariableName unsignedint128Var MethodName getV0 IfStatement if VariableName byteVar Operator >= NumberLiteral numberLiteral ReturnStatement return VariableName ret ReturnStatement return Operator - VariableName ret SimpleType HiveDecimal VariableName hivedecimalVar Name HiveDecimal MethodName create ThisExpression this MethodName toBigDecimal ReturnStatement return VariableName hd MethodName longValue 
TryStatement try SimpleType Table VariableName tableVar New new SimpleType TableWrapper VariableName predroptableeventVar MethodName getTable EnhancedForStatement for SimpleType HiveMetastoreAuthorizationProvider VariableName hivemetastoreauthorizationproviderVar VariableName threadlocalVar MethodName get VariableName authorizer MethodName authorize VariableName wrappedTable Name HiveOperation.DROPTABLE MethodName getInputRequiredPrivileges Name HiveOperation.DROPTABLE MethodName getOutputRequiredPrivileges CatchClause catch SimpleType AuthorizationException VariableName authorizationexceptionVar ThrowStatement throw MethodName invalidOperationException VariableName e CatchClause catch SimpleType HiveException VariableName hiveexceptionVar ThrowStatement throw MethodName metaException VariableName e 
ThisExpression this VariableName hiveauthenticationproviderVar Operator = VariableName hiveauthenticationproviderVar 
SimpleType Schema VariableName schemaVar New new SimpleType Schema SimpleType FieldSchema VariableName fieldschemaVar New new SimpleType FieldSchema VariableName fieldschemaVar MethodName setName VariableName SET_COLUMN_NAME VariableName fieldschemaVar MethodName setType VariableName STRING_TYPE_NAME VariableName schemaVar MethodName putToProperties VariableName SERIALIZATION_NULL_FORMAT VariableName defaultNullString VariableName schemaVar MethodName addToFieldSchemas VariableName fieldschemaVar ReturnStatement return VariableName schemaVar 
IfStatement if VariableName partitionVar Operator != NullLiteral null ReturnStatement return VariableName partitionVar MethodName getParameters ReturnStatement return VariableName tableVar MethodName getParameters 
ReturnStatement return VariableName booleanVar 
SimpleType GroupByOperator VariableName groupbyoperatorVar SimpleType GroupByOperator VariableName stackVar MethodName get VariableName stackVar MethodName size Operator - NumberLiteral numberLiteral SimpleType GroupByOptimizerContext VariableName groupbyoptimizercontextVar SimpleType GroupByOptimizerContext VariableName nodeprocessorctxVar IfStatement if Operator ! MethodName checkGroupByOperatorProcessed VariableName groupbyoptimizercontextVar VariableName groupbyoperatorVar MethodName processGroupBy VariableName groupbyoptimizercontextVar VariableName stackVar VariableName groupbyoperatorVar NumberLiteral numberLiteral ReturnStatement return NullLiteral null 
ReturnStatement return VariableName intVar 
ReturnStatement return VariableName hashsetVar 
ReturnStatement return VariableName parsecontextVar 
SimpleType ASTBuilder VariableName astbuilderVar Name ASTBuilder MethodName construct VariableName HiveParser VariableName DOT StringLiteral stringLiteral MethodName add Name ASTBuilder MethodName construct VariableName HiveParser VariableName TOK_TABLE_OR_COL StringLiteral stringLiteral MethodName add VariableName HiveParser VariableName Identifier VariableName stringVar MethodName add VariableName HiveParser VariableName Identifier VariableName stringVar ReturnStatement return VariableName astbuilderVar MethodName node 
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName structtypeinfoVar MethodName getAllStructFieldTypeInfos MethodName size EnhancedForStatement for SimpleType TypeInfo VariableName typeinfoVar VariableName structtypeinfoVar MethodName getAllStructFieldTypeInfos VariableName listVar MethodName add MethodName convert VariableName ti VariableName reldatatypefactoryVar ReturnStatement return VariableName reldatatypefactoryVar MethodName createStructType VariableName listVar VariableName structtypeinfoVar MethodName getAllStructFieldNames 
ForStatement for PrimitiveType int VariableName intVar VariableName immutablebitsetVar MethodName nextSetBit NumberLiteral numberLiteral VariableName i Operator >= NumberLiteral numberLiteral VariableName i Operator ++ VariableName i Operator = VariableName immutablebitsetVar MethodName nextSetBit VariableName i Operator + NumberLiteral numberLiteral IfStatement if Operator ! VariableName immutablemapVar MethodName containsKey VariableName i ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true 
ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator <= VariableName intVar VariableName i Operator ++ IfStatement if VariableName i Operator > NumberLiteral numberLiteral MethodName sleep VariableName longVar SimpleType HiveLock VariableName hivelockVar MethodName lockPrimitive VariableName hivelockobjectVar VariableName hivelockmodeVar IfStatement if VariableName lock Operator != NullLiteral null ReturnStatement return VariableName lock ReturnStatement return NullLiteral null 
TryStatement try Name Thread MethodName sleep VariableName longVar CatchClause catch SimpleType InterruptedException VariableName interruptedexceptionVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
IfStatement if VariableName bytewritableVar Operator == NullLiteral null Operator || VariableName bytewritableVar Operator == NullLiteral null ReturnStatement return NullLiteral null VariableName byteWritable MethodName set PrimitiveType byte VariableName bytewritableVar MethodName get Operator & VariableName bytewritableVar MethodName get ReturnStatement return VariableName byteWritable 
VariableName tablefunctionevaluatorVar MethodName setOutputOI VariableName structobjectinspectorVar 
EnhancedForStatement for SimpleType CheckerFactory VariableName checkerfactoryVar MethodName getCheckerFactories SimpleType Checker VariableName checkerVar VariableName checkerFactory MethodName tryCreate VariableName stringVar IfStatement if VariableName checkerVar Operator != NullLiteral null ReturnStatement return VariableName checkerVar ReturnStatement return NullLiteral null 
SimpleType SettableDoubleObjectInspector ThisExpression this VariableName objectInspector MethodName set ThisExpression this VariableName obj VariableName doubleVar ReturnStatement return ThisExpression this VariableName obj 
ReturnStatement return New new SimpleType Builder MethodName setMode VariableName VectorExpressionDescriptor VariableName Mode VariableName PROJECTION MethodName setNumArguments NumberLiteral numberLiteral MethodName setArgumentTypes VariableName VectorExpressionDescriptor VariableName ArgumentType VariableName ALL_FAMILY MethodName setInputExpressionTypes VariableName VectorExpressionDescriptor VariableName InputExpressionType VariableName COLUMN MethodName build 
ThrowStatement throw New new SimpleType UnsupportedOperationException 
SimpleType Aggregation VariableName aggregationVar SimpleType Aggregation VariableName aggregationbufferVar VariableName aggregationVar MethodName reset 
ReturnStatement return VariableName value Operator & VariableName argumenttypeVar VariableName value Operator != NumberLiteral numberLiteral 
ReturnStatement return VariableName OperatorType VariableName REDUCESINK 
ReturnStatement return VariableName sparkconfVar 
VariableName booleanVar Operator = VariableName booleanVar ReturnStatement return MethodName _tryStoreKey VariableName hivekeyVar VariableName booleanVar Operator - NumberLiteral numberLiteral 
ReturnStatement return SimpleType V VariableName recordReader MethodName createValue 
ThisExpression this VariableName hcattableVar MethodName comment VariableName stringVar ReturnStatement return ThisExpression this 
ReturnStatement return New new SimpleType Builder VariableName hcatpartitionVar 
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ArrayType String[] VariableName string[]Var Name StringUtils MethodName split VariableName stringVar ArrayType String[] VariableName string[]Var ArrayType String[] VariableName string[]Var VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName string[]Var VariableName length Operator ++ VariableName i VariableName string[]Var VariableName i Operator = Name StringUtils MethodName unEscapeString VariableName string[]Var VariableName i ReturnStatement return VariableName string[]Var 
ParameterizedType ArrayList VariableName arraylistVar New new ParameterizedType ArrayList TryStatement try EnhancedForStatement for SimpleType FileStatus VariableName filestatusVar VariableName filesystemVar MethodName listStatus New new SimpleType Path MethodName getPath VariableName typeVar VariableName arraylistVar MethodName add VariableName status MethodName getPath MethodName getName ReturnStatement return NullLiteral null CatchClause catch SimpleType Exception VariableName exceptionVar Name LOG MethodName trace StringLiteral stringLiteral Operator + VariableName typeVar MethodName toString ReturnStatement return VariableName arraylistVar 
SimpleType String VariableName stringVar Name HiveVersionInfo MethodName getVersion ReturnStatement return Name JsonBuilder MethodName create MethodName put StringLiteral stringLiteral StringLiteral stringLiteral MethodName put StringLiteral stringLiteral VariableName stringVar MethodName build 
ReturnStatement return VariableName listVar MethodName size 
PrimitiveType int VariableName intVar VariableName stringVar MethodName indexOf CharacterLiteral charLiteral IfStatement if VariableName intVar Operator == Operator - NumberLiteral numberLiteral ReturnStatement return VariableName stringVar ReturnStatement return VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName intVar 
ReturnStatement return VariableName arraylistVar MethodName hashCode Operator ^ VariableName arraylistVar MethodName hashCode 
ReturnStatement return VariableName objectVar Operator == NullLiteral null NullLiteral null VariableName objectVar MethodName toString 
ThisExpression this VariableName byteVar Operator = VariableName byteVar 
ReturnStatement return VariableName hashmapVar 
SimpleType Schema VariableName schemaVar Name AvroSerdeUtils MethodName getSchemaFor VariableName datainputVar MethodName readUTF VariableName schemaVar Operator = Name AvroSerdeUtils MethodName getSchemaFor VariableName datainputVar MethodName readUTF VariableName uidVar Operator = Name UID MethodName read VariableName datainputVar VariableName genericrecordVar Operator = New new SimpleType Record VariableName schemaVar VariableName binarydecoderVar Operator = Name DecoderFactory MethodName defaultFactory MethodName createBinaryDecoder SimpleType InputStream VariableName datainputVar VariableName binarydecoderVar ParameterizedType GenericDatumReader VariableName genericdatumreaderVar New new ParameterizedType GenericDatumReader VariableName schemaVar VariableName genericrecordVar Operator = VariableName genericdatumreaderVar MethodName read VariableName genericrecordVar VariableName binarydecoderVar 
ReturnStatement return VariableName longVar 
ReturnStatement return VariableName byteVar 
IfStatement if VariableName objectVar Operator == NullLiteral null ReturnStatement return NullLiteral null SimpleType LazyHiveVarchar VariableName lazyhivevarcharVar New new SimpleType LazyHiveVarchar ThisExpression this VariableName lazyhivevarcharVar MethodName setValue SimpleType LazyHiveVarchar VariableName objectVar ReturnStatement return VariableName lazyhivevarcharVar 
IfStatement if VariableName booleanVar VariableName intVar Operator ++ VariableName intVar Operator ++ 
ParameterizedType Class VariableName classVar Name Class MethodName forName VariableName stringVar Operator + StringLiteral stringLiteral ReturnStatement return SimpleType TProtocolFactory VariableName classVar MethodName newInstance 
VariableName datainputstreamVar Operator = New new SimpleType DataInputStream VariableName inputstreamVar VariableName typedbyteswritableinputVar Operator = New new SimpleType TypedBytesWritableInput VariableName datainputstreamVar VariableName typedbyteswritableoutputVar Operator = New new SimpleType TypedBytesWritableOutput VariableName nonsyncdataoutputbufferVar SimpleType String VariableName stringVar VariableName propertiesVar MethodName getProperty VariableName serdeConstants VariableName LIST_COLUMN_TYPES VariableName listVar Operator = Name Arrays MethodName asList VariableName stringVar MethodName split StringLiteral stringLiteral EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar SimpleType PrimitiveTypeInfo VariableName primitivetypeinfoVar Name TypeInfoFactory MethodName getPrimitiveTypeInfo VariableName columnType VariableName arraylistVar MethodName add Name PrimitiveObjectInspectorFactory MethodName getPrimitiveWritableObjectInspector VariableName dstTypeInfo 
ReturnStatement return VariableName mapVar 
IfStatement if Operator ! VariableName booleanVar ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral ReturnStatement return VariableName longVar 
ReturnStatement return VariableName intVar 
ReturnStatement return VariableName booleanVar 
ThisExpression this VariableName segmentationresolverVar Operator = VariableName segmentationresolverVar ReturnStatement return ThisExpression this 
ReturnStatement return VariableName cacheconfiguration[]Var 
WhileStatement while VariableName loggerVar Operator != NullLiteral null EnhancedForStatement for SimpleType Handler VariableName handlerVar VariableName loggerVar MethodName getHandlers IfStatement if VariableName classVar MethodName isInstance VariableName hnd ReturnStatement return SimpleType T VariableName hnd VariableName loggerVar Operator = VariableName loggerVar MethodName getParent ReturnStatement return NullLiteral null 
ReturnStatement return VariableName igniteuuidVar 
ThisExpression this VariableName intVar Operator = VariableName intVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName ignitefutureVar 
ReturnStatement return VariableName stringVar 
SimpleType GridOffHeapPartitionedMap VariableName gridoffheappartitionedmapVar MethodName offheap VariableName stringVar ReturnStatement return VariableName gridoffheappartitionedmapVar Operator == NullLiteral null New new ParameterizedType GridEmptyCloseableIterator VariableName gridoffheappartitionedmapVar MethodName iterator 
ReturnStatement return VariableName listVar Operator == NullLiteral null NullLiteral null VariableName listVar MethodName get VariableName intVar 
ReturnStatement return VariableName longVar 
ReturnStatement return VariableName booleanVar 
ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap EnhancedForStatement for SimpleType GridTaskWorker VariableName gridtaskworkerVar VariableName concurrentmapVar MethodName values SimpleType GridTaskSessionImpl VariableName gridtasksessionimplVar VariableName w MethodName getSession VariableName mapVar MethodName put VariableName ses MethodName getTaskClassName VariableName w MethodName getDeployment IfStatement if VariableName ses MethodName getTaskName Operator != NullLiteral null Operator && VariableName ses MethodName getTaskClassName MethodName equals VariableName ses MethodName getTaskName VariableName mapVar MethodName put VariableName ses MethodName getTaskName VariableName w MethodName getDeployment ReturnStatement return VariableName mapVar 
ReturnStatement return VariableName ignitetxremotestateVar MethodName writeMap 
ReturnStatement return VariableName gridcachecontextVar MethodName nearTx MethodName dht 
ReturnStatement return BooleanLiteral true 
ReturnStatement return BooleanLiteral true 
VariableName collectionVar MethodName remove VariableName ignitetxkeyVar MethodName checkLocks 
MethodName processNearSingleGetRequest VariableName uuidVar VariableName gridnearsinglegetrequestVar 
ReturnStatement return Name GridToStringBuilder MethodName toString TypeLiteral class ThisExpression this StringLiteral stringLiteral SuperMethodInvocation super MethodName toString 
IfStatement if VariableName igniteloggerVar MethodName isDebugEnabled VariableName igniteloggerVar MethodName debug StringLiteral stringLiteral Operator + ThisExpression this StringLiteral stringLiteral VariableName throwableVar CharacterLiteral charLiteral MethodName onDone VariableName throwableVar 
ReturnStatement return VariableName collectionVar Operator == NullLiteral null Name Collections MethodName emptySet VariableName collectionVar 
ReturnStatement return VariableName griddhttxlocaladapterVar Operator != NullLiteral null Operator && VariableName griddhttxlocaladapterVar MethodName implicitSingle 
MethodName onComplete VariableName booleanVar BooleanLiteral true 
SimpleType GridCacheQueryFutureAdapter VariableName gridcachequeryfutureadapterVar VariableName gridcachequeryinfoVar MethodName localQueryFuture AssertStatement assert VariableName gridcachequeryfutureadapterVar Operator != NullLiteral null IfStatement if VariableName throwableVar Operator != NullLiteral null VariableName gridcachequeryfutureadapterVar MethodName onPage NullLiteral null NullLiteral null VariableName throwableVar BooleanLiteral true VariableName gridcachequeryfutureadapterVar MethodName onPage NullLiteral null VariableName collectionVar NullLiteral null VariableName booleanVar ReturnStatement return BooleanLiteral true 
ReturnStatement return VariableName gridcacheversionVar 
ReturnStatement return Name S MethodName toString TypeLiteral class ThisExpression this 
ReturnStatement return NumberLiteral numberLiteral 
VariableName keycacheobjectVar MethodName finishUnmarshal VariableName gridcachecontextVar MethodName cacheObjectContext VariableName classloaderVar 
IfStatement if Operator ! VariableName atomicbooleanVar MethodName get ReturnStatement return MethodName onKernalStop0 VariableName booleanVar IfStatement if VariableName igniteloggerVar Operator != NullLiteral null Operator && VariableName igniteloggerVar MethodName isDebugEnabled VariableName igniteloggerVar MethodName debug MethodName kernalStopInfo 
ReturnStatement return VariableName vVar Operator == NullLiteral null VariableName val VariableName vVar 
AssertStatement assert VariableName igniteuuidVar Operator != NullLiteral null SimpleType GridDeployment VariableName griddeploymentVar VariableName cctx MethodName gridDeploy MethodName getDeployment VariableName igniteuuidVar ReturnStatement return VariableName griddeploymentVar Operator != NullLiteral null VariableName griddeploymentVar MethodName classLoader NullLiteral null 
ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral 
ThisExpression this VariableName longVar Operator = VariableName longVar 
ReturnStatement return Name PREPARED_UPD MethodName compareAndSet ThisExpression this NumberLiteral numberLiteral NumberLiteral numberLiteral 
ReturnStatement return VariableName gridcachecontextVar MethodName cache MethodName entryEx VariableName ignitetxkeyVar MethodName key 
SimpleType Transaction VariableName transactionVar VariableName concurrentmapVar MethodName remove VariableName longVar AssertStatement assert VariableName transactionVar Operator != NullLiteral null StringLiteral stringLiteral Operator + VariableName longVar 
ReturnStatement return VariableName objectnameVar 
ReturnStatement return Name UNSAFE MethodName getShort VariableName objectVar VariableName longVar 
IfStatement if VariableName booleanVar Name UNSAFE MethodName putByte VariableName objectVar VariableName longVar PrimitiveType byte VariableName shortVar Operator >> NumberLiteral numberLiteral Name UNSAFE MethodName putByte VariableName objectVar VariableName longVar Operator + NumberLiteral numberLiteral PrimitiveType byte VariableName shortVar Name UNSAFE MethodName putByte VariableName objectVar VariableName longVar Operator + NumberLiteral numberLiteral PrimitiveType byte VariableName shortVar Operator >> NumberLiteral numberLiteral Name UNSAFE MethodName putByte VariableName objectVar VariableName longVar PrimitiveType byte VariableName shortVar 
ReturnStatement return New new SimpleType Random MethodName nextInt VariableName Integer VariableName MAX_VALUE 
ParameterizedType ConcurrentMap VariableName concurrentmapVar MethodName map ReturnStatement return SimpleType E VariableName concurrentmapVar MethodName putIfAbsent VariableName eVar VariableName eVar 
ReturnStatement return VariableName classVar 
ReturnStatement return MethodName segmentFor VariableName intVar MethodName remove VariableName intVar VariableName byte[]Var 
SimpleType String VariableName stringVar Name ManagementFactory MethodName getRuntimeMXBean MethodName getName TryStatement try PrimitiveType int VariableName intVar VariableName stringVar MethodName indexOf CharacterLiteral charLiteral ReturnStatement return VariableName idx Operator > NumberLiteral numberLiteral Name Integer MethodName parseInt VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName idx Operator - NumberLiteral numberLiteral CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ReturnStatement return Operator - NumberLiteral numberLiteral 
IfStatement if VariableName booleanVar VariableName booleanVar Operator = BooleanLiteral false VariableName selectionkey[]Var VariableName intVar Operator = NullLiteral null VariableName intVar Operator = NumberLiteral numberLiteral ReturnStatement return VariableName selectionkey[]Var VariableName booleanVar Operator = BooleanLiteral true VariableName selectionkey[]Var VariableName intVar Operator = NullLiteral null VariableName intVar Operator = NumberLiteral numberLiteral ReturnStatement return VariableName selectionkey[]Var 
ParameterizedType GridListSet VariableName gridlistsetVar ParameterizedType GridListSet SuperMethodInvocation super MethodName clone VariableName gridlistsetVar VariableName linkedlistVar Operator = ParameterizedType LinkedList VariableName linkedlistVar MethodName clone VariableName gridlistsetVar VariableName comparatorVar Operator = VariableName comparatorVar VariableName gridlistsetVar VariableName booleanVar Operator = VariableName booleanVar ReturnStatement return VariableName gridlistsetVar 
ReturnStatement return VariableName longVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
EnhancedForStatement for SimpleType CheckpointSpi VariableName checkpointspiVar MethodName getSpis VariableName spi MethodName setCheckpointListener New new SimpleType CheckpointListener MethodName record VariableName EVT_CHECKPOINT_REMOVED VariableName key MethodName startSpi VariableName ctx MethodName io MethodName addMessageListener VariableName TOPIC_CHECKPOINT VariableName gridmessagelistenerVar IfStatement if VariableName log MethodName isDebugEnabled VariableName log MethodName debug MethodName startInfo 
MethodName callcc0 
ReturnStatement return MethodName prependAsync VariableName kVar VariableName vVar MethodName get 
ReturnStatement return VariableName gridclientloadbalancerVar 
ReturnStatement return MethodName log VariableName classVar MethodName getName 
IfStatement if VariableName booleanVar ThrowStatement throw New new SimpleType SQLException StringLiteral stringLiteral 
ReturnStatement return VariableName igniteclusterimplVar MethodName topologyVersion 
ReturnStatement return VariableName binarymetadataVar MethodName typeName 
MethodName ensureEnoughData VariableName intVar ArrayType boolean[] VariableName boolean[]Var ArrayType boolean[] VariableName intVar MethodName copyAndShift VariableName boolean[]Var VariableName GridUnsafe VariableName BOOLEAN_ARR_OFF VariableName intVar ReturnStatement return VariableName boolean[]Var 
PrimitiveType int VariableName intVar MethodName readInt VariableName longVar VariableName intVar ReturnStatement return Name Float MethodName intBitsToFloat VariableName intVar 
VariableName binaryoutputstreamVar MethodName unsafeEnsure NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral VariableName binaryoutputstreamVar MethodName unsafeWriteByte VariableName GridBinaryMarshaller VariableName FLOAT VariableName binaryoutputstreamVar MethodName unsafeWriteFloat VariableName floatVar 
MethodName doWriteBooleanArray VariableName boolean[]Var 
ReturnStatement return SimpleType BinaryRawWriter Name Proxy MethodName newProxyInstance MethodName getClass MethodName getClassLoader ArrayType Class ArrayInitializer arrayInitializer New new SimpleType InvocationHandler ReturnStatement return NullLiteral null 
VariableName conn.statements MethodName remove ThisExpression this MethodName closeInternal 
MethodName ensureNotClosed ThrowStatement throw New new SimpleType SQLFeatureNotSupportedException StringLiteral stringLiteral 
ReturnStatement return VariableName entryVar MethodName getKey Operator + StringLiteral stringLiteral VariableName entryVar MethodName getValue MethodName toString 
ReturnStatement return VariableName longVar 
ReturnStatement return VariableName intVar 
ThisExpression this VariableName longVar Operator = VariableName longVar 
ReturnStatement return Name S MethodName toString TypeLiteral class ThisExpression this 
ReturnStatement return Name ValueDate MethodName fromDateValue VariableName longVar 
SuperMethodInvocation super MethodName setUp VariableName benchmarkconfigurationVar IfStatement if Operator ! Name IgniteSystemProperties MethodName getBoolean StringLiteral stringLiteral MethodName ignite MethodName compute MethodName broadcast New new SimpleType WaitMapExchangeFinishCallable 
IfStatement if VariableName transactionVar Operator == NullLiteral null SimpleType Transaction VariableName transactionVar VariableName sharedsessioncontractVar MethodName getTransaction IfStatement if VariableName hTx Operator != NullLiteral null Operator && VariableName hTx MethodName isActive VariableName hTx MethodName rollback 
ReturnStatement return VariableName loggerVar 
VariableName loggerVar MethodName error VariableName stringVar VariableName throwableVar 
ReturnStatement return MethodName suspended BooleanLiteral true 
VariableName execcontrollerVar MethodName run 
ReturnStatement return MethodName getConfig VariableName RIGHT_DATABASE_NAME 
ReturnStatement return VariableName longVar 
ReturnStatement return VariableName statusVar 
IfStatement if VariableName objectVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return StringLiteral stringLiteral Operator + MethodName getObjectValueForDisplay VariableName objectVar 
SimpleType Inet4Address VariableName inet4addressVar SimpleType Inet4Address VariableName objectVar VariableName hierarchicalstreamwriterVar MethodName setValue VariableName inet4addressVar MethodName getHostName Operator + StringLiteral stringLiteral VariableName inet4addressVar MethodName getHostAddress 
ReturnStatement return MethodName writeTempFile VariableName stringVar MethodName getBytes 
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return MethodName self 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar ReturnStatement return ThisExpression this 
MethodName delegate MethodName setExtraStatusText VariableName objectVar 
ReturnStatement return MethodName period VariableName longVar VariableName TimeUnit VariableName MILLISECONDS 
MethodName getEntityManager MethodName prePreManage VariableName entityVar 
MethodName checkInitialManagementContextReal ReturnStatement return VariableName managementcontextinternalVar MethodName getEntityDriverManager 
IfStatement if MethodName isInitialManagementContextReal VariableName managementcontextinternalVar MethodName terminate 
ParameterizedType Map VariableName mapVar VariableName localmanagementcontextVar MethodName getStorage MethodName getMap VariableName stringVar ParameterizedType Set VariableName setVar Name Sets MethodName newLinkedHashSet EnhancedForStatement for SimpleType ApplicationUsage VariableName applicationusageVar VariableName mapVar MethodName values IfStatement if VariableName predicateVar MethodName apply VariableName usage VariableName setVar MethodName add VariableName usage ReturnStatement return VariableName setVar 
ReturnStatement return VariableName referenceVar MethodName get 
IfStatement if VariableName applicationVar Operator != NullLiteral null ReturnStatement return VariableName applicationVar SimpleType Entity VariableName entityVar MethodName getParent SimpleType Application VariableName applicationVar VariableName entityVar Operator != NullLiteral null VariableName entityVar MethodName getApplication NullLiteral null IfStatement if VariableName applicationVar Operator != NullLiteral null IfStatement if MethodName getManagementSupport MethodName isFullyManaged MethodName setApplication VariableName applicationVar ReturnStatement return VariableName applicationVar 
ReturnStatement return Name Objects MethodName toStringHelper ThisExpression this MethodName add StringLiteral stringLiteral VariableName stringVar MethodName add StringLiteral stringLiteral VariableName stringVar MethodName add StringLiteral stringLiteral VariableName stringVar MethodName omitNullValues MethodName toString 
EnhancedForStatement for SimpleType String VariableName stringVar MethodName checkNotNull VariableName iterableVar StringLiteral stringLiteral MethodName addPrimary VariableName val ReturnStatement return ThisExpression this 
ReturnStatement return MethodName checkNotNull VariableName startableapplicationVar StringLiteral stringLiteral 
ReturnStatement return VariableName inputstreamVar 
ParameterizedType Map VariableName mapVar Name Maps MethodName newLinkedHashMap VariableName mapVar MethodName put VariableName kVar VariableName vVar ReturnStatement return VariableName mapVar 
PrimitiveType long VariableName longVar VariableName timeunitVar MethodName convert VariableName longVar VariableName TimeUnit VariableName NANOSECONDS PrimitiveType long VariableName longVar Name TimeUnit.NANOSECONDS MethodName convert VariableName longVar VariableName timeunitVar IfStatement if VariableName longVar Operator == VariableName longVar Operator || VariableName roundingmodeVar Operator == NullLiteral null Operator || VariableName roundingmodeVar Operator == VariableName RoundingMode VariableName UNNECESSARY ReturnStatement return VariableName longVar ReturnStatement return New new SimpleType BigDecimal VariableName longVar MethodName divide New new SimpleType BigDecimal VariableName timeunitVar MethodName toNanos NumberLiteral numberLiteral VariableName roundingmodeVar MethodName longValue 
ReturnStatement return MethodName makeTimeStringRounded VariableName stopwatchVar MethodName elapsed VariableName TimeUnit VariableName MILLISECONDS VariableName TimeUnit VariableName MILLISECONDS 
ReturnStatement return VariableName stopwatchVar MethodName elapsed VariableName TimeUnit VariableName MILLISECONDS Operator > VariableName durationVar MethodName toMilliseconds 
ReturnStatement return MethodName iptablesService StringLiteral stringLiteral 
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this 
ParameterizedType Set VariableName setVar Name Sets MethodName newLinkedHashSet VariableName setVar MethodName add NumberLiteral numberLiteral ReturnStatement return VariableName setVar 
IfStatement if VariableName bytearrayoutputstreamVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + ThisExpression this StringLiteral stringLiteral ReturnStatement return VariableName bytearrayoutputstreamVar MethodName toString 
VariableName listVar MethodName add NumberLiteral numberLiteral VariableName charsequenceVar MethodName toString ReturnStatement return VariableName scripthelperVar 
ReturnStatement return Name Collections MethodName emptyList 
ReturnStatement return SimpleType Environment VariableName configurable MethodName getVariable VariableName stringVar 
VariableName loggerVar MethodName log VariableName Level VariableName WARNING VariableName stringVar 
PrimitiveType int VariableName intVar VariableName intVar ThisExpression this MethodName remove VariableName objectVar ReturnStatement return VariableName intVar Operator != VariableName intVar 
ReturnStatement return VariableName staticmodelsVar 
VariableName writerVar MethodName write VariableName stringVar 
ReturnStatement return New new SimpleType HttpRequestParametersHashModel VariableName httpservletrequestVar 
ReturnStatement return VariableName booleanVar StringLiteral stringLiteral StringLiteral stringLiteral 
ReturnStatement return VariableName intVar Operator == NumberLiteral numberLiteral VariableName expressionVar VariableName expressionVar 
SimpleType TreeNode VariableName treenodeVar SimpleType TreeNode VariableName mapVar MethodName get VariableName templateelementVar IfStatement if VariableName treenodeVar Operator != NullLiteral null ReturnStatement return VariableName treenodeVar VariableName treenodeVar Operator = New new SimpleType TemplateElementTreeNode VariableName templateelementVar VariableName mapVar MethodName put VariableName templateelementVar VariableName treenodeVar ReturnStatement return VariableName treenodeVar 
ReturnStatement return MethodName evaluate VariableName listVar VariableName stringVar VariableName MurmurHash3 VariableName DEFAULT_NUM_FEATURES 
PrimitiveType int VariableName intVar NumberLiteral numberLiteral WhileStatement while VariableName bytebufferVar MethodName remaining Operator > NumberLiteral numberLiteral VariableName intVar Operator += VariableName filechannelVar MethodName write VariableName bytebufferVar VariableName longVar Operator + VariableName bytebufferVar MethodName position ReturnStatement return VariableName intVar 
ReturnStatement return VariableName intVar Operator < VariableName intVar Operator - NumberLiteral numberLiteral VariableName intVar Operator == VariableName intVar NumberLiteral numberLiteral NumberLiteral numberLiteral 
Name ConfigurationManager MethodName setGlobalConfig New new SimpleType DMLConfig 
IfStatement if VariableName urlVar Operator == NullLiteral null ThrowStatement throw New new SimpleType MLContextException StringLiteral stringLiteral SimpleType String VariableName stringVar VariableName urlVar MethodName toString IfStatement if Operator ! VariableName stringVar MethodName toLowerCase MethodName startsWith StringLiteral stringLiteral Operator && Operator ! VariableName stringVar MethodName toLowerCase MethodName startsWith StringLiteral stringLiteral ThrowStatement throw New new SimpleType MLContextException StringLiteral stringLiteral TryStatement try SimpleType InputStream VariableName inputstreamVar VariableName urlVar MethodName openStream ReturnStatement return Name IOUtils MethodName toString VariableName is CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw New new SimpleType MLContextException StringLiteral stringLiteral Operator + VariableName urlVar VariableName e 
MethodName setFrame VariableName stringVar Name DataConverter MethodName convertToFrameBlock VariableName string[][]Var VariableName listVar MethodName toArray ArrayType ValueType[] NumberLiteral numberLiteral VariableName listVar MethodName toArray ArrayType String[] NumberLiteral numberLiteral VariableName booleanVar 
ThrowStatement throw New new SimpleType LopsException ThisExpression this MethodName printErrorLocation Operator + StringLiteral stringLiteral 
ThrowStatement throw New new SimpleType LopsException ThisExpression this MethodName printErrorLocation Operator + StringLiteral stringLiteral 
VariableName intVar Operator = VariableName intVar 
VariableName stringVar Operator = StringLiteral stringLiteral Operator + VariableName idsequenceVar MethodName getNextID ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName lopVar 
SimpleType File VariableName fileVar New new SimpleType File VariableName stringVar IfStatement if VariableName fileVar MethodName exists MethodName rDelete VariableName fileVar 
PrimitiveType int VariableName intVar VariableName double[][]Var VariableName length PrimitiveType int VariableName intVar VariableName intVar Operator > NumberLiteral numberLiteral VariableName double[][]Var NumberLiteral numberLiteral VariableName length NumberLiteral numberLiteral SimpleType MatrixBlock VariableName matrixblockVar New new SimpleType MatrixBlock VariableName intVar VariableName intVar BooleanLiteral false TryStatement try VariableName matrixblockVar MethodName init VariableName double[][]Var VariableName intVar VariableName intVar CatchClause catch SimpleType Exception VariableName exceptionVar VariableName matrixblockVar MethodName examSparsity ReturnStatement return VariableName matrixblockVar 
PrimitiveType int VariableName intVar VariableName int[]Var VariableName intVar VariableName intVar VariableName int[]Var VariableName intVar VariableName intVar VariableName int[]Var VariableName intVar ReturnStatement return VariableName intVar Operator < VariableName intVar VariableName intVar Operator < VariableName intVar VariableName intVar VariableName intVar Operator < VariableName intVar VariableName intVar VariableName intVar VariableName intVar Operator > VariableName intVar VariableName intVar VariableName intVar Operator > VariableName intVar VariableName intVar VariableName intVar 
IfStatement if VariableName swapindexVar Operator == NullLiteral null VariableName swapindexVar Operator = New new SimpleType SwapIndex ReturnStatement return VariableName swapindexVar 
ArrayType double[] VariableName double[]Var MethodName allocVector VariableName intVar BooleanLiteral false ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName j Operator < VariableName intVar VariableName j Operator ++ VariableName intVar Operator ++ VariableName intVar Operator ++ VariableName double[]Var VariableName j Operator = VariableName double[]Var VariableName intVar Operator <= VariableName double[]Var VariableName intVar NumberLiteral numberLiteral NumberLiteral numberLiteral ReturnStatement return VariableName double[]Var 
ReturnStatement return VariableName doubleVar 
ReturnStatement return VariableName int[]Var 
ReturnStatement return PrimitiveType byte VariableName byte[]Var VariableName intVar Operator ++ Operator & NumberLiteral numberLiteral 
VariableName longadderVar MethodName increment 
ReturnStatement return VariableName updatetypeVar 
ReturnStatement return VariableName pdatapartitionformatVar 
WhileStatement while VariableName linkedlistVar MethodName isEmpty IfStatement if Operator ! VariableName booleanVar MethodName wait ReturnStatement return SimpleType T VariableName objectVar SimpleType T VariableName tVar VariableName linkedlistVar MethodName removeFirst MethodName notify ReturnStatement return VariableName tVar 
Name LOG MethodName trace StringLiteral stringLiteral Operator + VariableName longVar StringLiteral stringLiteral VariableName taskVar MethodName toCompactString SwitchStatement switch VariableName taskVar MethodName getType SwitchCase case VariableName SET MethodName executeSetTask VariableName taskVar BreakStatement break SwitchCase case VariableName RANGE MethodName executeRangeTask VariableName taskVar BreakStatement break 
ReturnStatement return VariableName doubleVar 
VariableName planinputtypeVar Operator = VariableName planinputtypeVar 
ReturnStatement return VariableName arraylistVar 
ReturnStatement return VariableName double[]Var VariableName intVar 
ReturnStatement return VariableName stringVar 
ThrowStatement throw New new SimpleType DMLRuntimeException StringLiteral stringLiteral 
SimpleType String VariableName stringVar NullLiteral null IfStatement if VariableName cpoperandVar Operator != NullLiteral null VariableName stringVar Operator = VariableName cpoperandVar MethodName getName ReturnStatement return VariableName stringVar 
ReturnStatement return MethodName parseAggregateTernaryOperator VariableName stringVar NumberLiteral numberLiteral 
IfStatement if Operator ! VariableName objectVar Instanceof instanceof SimpleType BlockPartitioner ReturnStatement return BooleanLiteral false SimpleType BlockPartitioner VariableName blockpartitionerVar SimpleType BlockPartitioner VariableName objectVar ReturnStatement return VariableName intVar Operator == VariableName blockpartitionerVar VariableName intVar Operator && VariableName intVar Operator == VariableName blockpartitionerVar VariableName intVar Operator && VariableName longVar Operator == VariableName blockpartitionerVar VariableName longVar Operator && VariableName longVar Operator == VariableName blockpartitionerVar VariableName longVar 
ReturnStatement return MethodName getOpcode 
Name Statistics MethodName incrementNoOfExecutedSPInst SuperMethodInvocation super MethodName postprocessInstruction VariableName executioncontextVar 
ReturnStatement return VariableName int[]Var VariableName intVar 
ReturnStatement return ThisExpression this VariableName booleanVar 
SimpleType Gson VariableName gsonVar New new SimpleType GsonBuilder MethodName setPrettyPrinting MethodName create ReturnStatement return VariableName gsonVar MethodName toJson ThisExpression this 
ReturnStatement return VariableName stattypeVar Operator + StringLiteral stringLiteral VariableName longVar 
ThrowStatement throw New new SimpleType SQLFeatureNotSupportedException StringLiteral stringLiteral 
PrimitiveType int VariableName intVar MethodName read IfStatement if VariableName intVar Operator < NumberLiteral numberLiteral ThrowStatement throw New new SimpleType EOFException ReturnStatement return PrimitiveType byte VariableName intVar 
MethodName writeKey VariableName keybufferVar VariableName intVar VariableName intVar VariableName valuebufferVar MethodName write VariableName fsdataoutputstreamVar 
ReturnStatement return VariableName scheduledinputstreamVar MethodName getPos 
ReturnStatement return VariableName metadataVar MethodName get VariableName textVar 
ReturnStatement return ThisExpression this VariableName tupleVar 
ThrowStatement throw New new SimpleType SQLFeatureNotSupportedException StringLiteral stringLiteral 
ReturnStatement return VariableName mapVar MethodName get VariableName stringVar 
ReturnStatement return VariableName querymasterprotocolserviceVar 
SimpleType ExecutionBlockId VariableName executionblockidVar VariableName subqueryeventVar MethodName getSubQueryId IfStatement if Name LOG MethodName isDebugEnabled Name LOG MethodName debug StringLiteral stringLiteral Operator + VariableName executionblockidVar StringLiteral stringLiteral VariableName subqueryeventVar MethodName getType VariableName queryVar MethodName getSubQuery VariableName executionblockidVar MethodName handle VariableName subqueryeventVar 
ReturnStatement return ThisExpression this VariableName queryunitidVar 
ReturnStatement return VariableName serverVar MethodName getConnectors NumberLiteral numberLiteral MethodName getLocalPort 
ReturnStatement return Name CatalogUtil MethodName newSimpleDataType VariableName Type VariableName FLOAT4 
ReturnStatement return New new SimpleType CountDistinctValueContext 
SimpleType BinaryNode VariableName binarynodeVar SimpleType BinaryNode SuperMethodInvocation super MethodName clone VariableName binarynodeVar VariableName logicalnodeVar Operator = SimpleType LogicalNode VariableName logicalnodeVar MethodName clone VariableName binarynodeVar VariableName logicalnodeVar Operator = SimpleType LogicalNode VariableName logicalnodeVar MethodName clone ReturnStatement return VariableName binarynodeVar 
ReturnStatement return MethodName equals VariableName objectVar 
ReturnStatement return ThisExpression this VariableName datum[]Var 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName schemaVar 
ReturnStatement return ThisExpression this VariableName columnVar MethodName getQualifiedName 
ReturnStatement return VariableName byteVar 
ReturnStatement return VariableName intVar 
ReturnStatement return Name Long MethodName valueOf MethodName getString 
ReturnStatement return VariableName intVar 
IfStatement if VariableName objectVar Instanceof instanceof SimpleType Int2Datum SimpleType Int2Datum VariableName int2datumVar SimpleType Int2Datum VariableName objectVar ReturnStatement return VariableName shortVar Operator == VariableName other VariableName shortVar ReturnStatement return BooleanLiteral false 
MethodName merge VariableName inputstreamVar VariableName charsetVar Name ExtensionRegistry MethodName getEmptyRegistry VariableName builderVar 
ReturnStatement return MethodName singletonList VariableName workerVar MethodName getDefaultListener 
ReturnStatement return VariableName intVar 
ParameterizedType List VariableName listVar MethodName asList VariableName listenerVar MethodName listProperties IfStatement if VariableName listVar MethodName contains VariableName stringVar ReturnStatement return MethodName makePropertyInterface MethodName connect VariableName listenerVar VariableName tavernarunVar VariableName stringVar ThrowStatement throw New new SimpleType NoListenerException StringLiteral stringLiteral 
ReturnStatement return MethodName respond VariableName NOT_FOUND VariableName unknownrunexceptionVar 
New new SimpleType OutputStreamWriter VariableName outputstreamVar MethodName write VariableName permissionVar MethodName toString 
ArrayType byte[] VariableName byte[]Var TryStatement try VariableName byte[]Var Operator = VariableName fileVar MethodName getContents VariableName idx VariableName intVar CatchClause catch SimpleType FilesystemAccessException VariableName filesystemaccessexceptionVar ThrowStatement throw New new SimpleType IOException VariableName e IfStatement if VariableName byte[]Var Operator == NullLiteral null ReturnStatement return Operator - NumberLiteral numberLiteral VariableName intVar Operator = MethodName min VariableName intVar VariableName byte[]Var VariableName length MethodName arraycopy VariableName byte[]Var NumberLiteral numberLiteral VariableName byte[]Var VariableName intVar VariableName intVar VariableName idx Operator += VariableName intVar ReturnStatement return VariableName intVar 
SimpleType StringReader VariableName stringreaderVar New new SimpleType StringReader VariableName stringVar ReturnStatement return SimpleType Workflow VariableName unmarshallerVar MethodName unmarshal VariableName stringreaderVar 
VariableName configurablerunfactoryVar MethodName setServerWorkerJar VariableName stringVar ReturnStatement return VariableName configurablerunfactoryVar MethodName getServerWorkerJar 
ReturnStatement return VariableName configurablerunfactoryVar MethodName getPasswordFile 
TryStatement try ReturnStatement return VariableName remotelistenerVar MethodName getType CatchClause catch SimpleType RemoteException VariableName remoteexceptionVar VariableName logVar MethodName warn StringLiteral stringLiteral VariableName e ReturnStatement return StringLiteral stringLiteral 
ReturnStatement return SimpleType String MethodName getCheckType VariableName stringVar VariableName Schema VariableName Type VariableName STRING 
VariableName connectorcontextVar Operator = VariableName connectorcontextVar 
ReturnStatement return StringLiteral stringLiteral Operator + StringLiteral stringLiteral Operator + VariableName mapVar StringLiteral stringLiteral VariableName mapVar StringLiteral stringLiteral SuperMethodInvocation super MethodName toString 
VariableName extendedloggerVar MethodName logIfEnabled VariableName stringVar VariableName Level VariableName ERROR NullLiteral null VariableName objectVar VariableName throwableVar 
ReturnStatement return VariableName listVar 
MethodName logIfEnabled VariableName stringVar VariableName Level VariableName ERROR NullLiteral null VariableName objectVar VariableName throwableVar 
ReturnStatement return MethodName isEnabled VariableName Level VariableName DEBUG NullLiteral null NullLiteral null 
ReturnStatement return MethodName isEnabled VariableName Level VariableName WARN VariableName markerVar SimpleType Object NullLiteral null NullLiteral null 
MethodName logIfEnabled VariableName stringVar VariableName Level VariableName TRACE VariableName markerVar VariableName stringVar VariableName objectVar 
ReturnStatement return VariableName threadlocalVar MethodName get 
ReturnStatement return MethodName asString VariableName Format VariableName FULL NullLiteral null 
VariableName extendedloggerVar MethodName logIfEnabled VariableName stringVar VariableName Level VariableName TRACE MethodName getMarker VariableName markerVar VariableName stringVar VariableName objectVar 
VariableName extendedloggerVar MethodName logIfEnabled VariableName stringVar VariableName Level VariableName DEBUG NullLiteral null VariableName stringVar VariableName throwableVar 
ThrowStatement throw New new SimpleType NoSuchElementException 
ReturnStatement return ArrayType T[] Name Array MethodName newInstance VariableName classVar VariableName intVar 
ReturnStatement return NullLiteral null 
ReturnStatement return ThisExpression this VariableName stacktraceelementVar MethodName getMethodName 
ReturnStatement return New new SimpleType ClassNamePatternConverter VariableName string[]Var 
Modifier final SimpleType StackTraceElement VariableName stacktraceelementVar VariableName logeventVar MethodName getSource IfStatement if VariableName stacktraceelementVar Operator != NullLiteral null VariableName stringbuilderVar MethodName append VariableName stacktraceelementVar MethodName getLineNumber 
IfStatement if VariableName intVar Operator > VariableName intVar Name LOGGER MethodName info StringLiteral stringLiteral VariableName stringVar VariableName intVar VariableName intVar ReturnStatement return VariableName intVar IfStatement if VariableName intVar Operator < VariableName intVar Name LOGGER MethodName info StringLiteral stringLiteral VariableName stringVar VariableName intVar VariableName intVar ReturnStatement return VariableName intVar Modifier final PrimitiveType int VariableName intVar Name Integers MethodName ceilingNextPowerOfTwo VariableName intVar IfStatement if VariableName intVar Operator != VariableName intVar Name LOGGER MethodName info StringLiteral stringLiteral VariableName stringVar VariableName intVar VariableName intVar ReturnStatement return VariableName intVar 
Modifier final ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap SuperMethodInvocation super MethodName getContentFormat VariableName mapVar MethodName put StringLiteral stringLiteral VariableName stringVar ReturnStatement return VariableName mapVar 
ReturnStatement return VariableName booleanVar 
IfStatement if VariableName loggercontextVar MethodName getConfigLocation Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName loggercontextVar MethodName getConfigLocation IfStatement if MethodName getConfigName Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf New new SimpleType File MethodName getConfigName MethodName toURI ReturnStatement return VariableName Strings VariableName EMPTY 
ReturnStatement return Name System MethodName currentTimeMillis 
ReturnStatement return Name Charset MethodName forName VariableName stringVar 
ThisExpression this VariableName listVar MethodName add VariableName objectVar 
ThisExpression this VariableName intVar Operator = VariableName intVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName listVar 
ReturnStatement return VariableName stringVar 
SimpleType BufferedReader VariableName bufferedreaderVar New new SimpleType BufferedReader New new SimpleType InputStreamReader VariableName inputstreamVar SimpleType PrintWriter VariableName printwriterVar New new SimpleType PrintWriter VariableName outputstreamVar BooleanLiteral true ReturnStatement return New new SimpleType CharacterDevice VariableName bufferedreaderVar VariableName printwriterVar 
VariableName lockVar MethodName lock TryStatement try IfStatement if VariableName sortedsetVar MethodName size Operator < VariableName queryVar MethodName getMaxResults ReturnStatement return VariableName sortedsetVar MethodName size ReturnStatement return VariableName queryVar MethodName getMaxResults VariableName lockVar MethodName unlock 
Modifier final PrimitiveType long VariableName longVar Name System MethodName currentTimeMillis Operator + VariableName timeunitVar MethodName toMillis VariableName longVar SynchronizedStatement synchronized VariableName objectVar WhileStatement while Operator ! MethodName isFinished Modifier final PrimitiveType long VariableName longVar VariableName longVar Operator - Name System MethodName currentTimeMillis IfStatement if VariableName millisToWait Operator > NumberLiteral numberLiteral VariableName objectVar MethodName wait VariableName millisToWait ReturnStatement return MethodName isFinished ReturnStatement return MethodName isFinished 
ThisExpression this VariableName mapVar Operator = VariableName mapVar ReturnStatement return ThisExpression this 
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this 
IfStatement if MethodName keyIsValid VariableName stringVar ReturnStatement return New new SimpleType SecretKeySpec Name Hex MethodName decode VariableName stringVar StringLiteral stringLiteral ThrowStatement throw New new SimpleType KeyManagementException StringLiteral stringLiteral 
ReturnStatement return VariableName provider 
IfStatement if Name StringUtils MethodName isEmpty VariableName stringVar ReturnStatement return BooleanLiteral false ReturnStatement return MethodName getValidKeyLengthsForAlgorithm VariableName stringVar MethodName contains VariableName intVar 
ReturnStatement return VariableName stringVar 
ThrowStatement throw New new SimpleType UnsupportedOperationException 
ReturnStatement return NullLiteral null 
Modifier final SimpleType HttpGet VariableName httpgetVar MethodName createGet StringLiteral stringLiteral VariableName httpgetVar MethodName setHeader VariableName HttpHeaders VariableName PROTOCOL_VERSION Name String MethodName valueOf VariableName transportprotocolversionnegotiatorVar MethodName getVersion ReturnStatement return MethodName execute VariableName httpgetVar TypeLiteral class MethodName getPeers 
ReturnStatement return VariableName keystoretypeVar 
ReturnStatement return VariableName stringVar 
VariableName loggerVar MethodName debug VariableName stringVar VariableName throwableVar 
ReturnStatement return VariableName serversocketconfigurationVar 
ReturnStatement return NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral Operator * MethodName getFieldType MethodName hashCode Operator + NumberLiteral numberLiteral Operator * MethodName getFormat Operator == NullLiteral null NumberLiteral numberLiteral MethodName getFormat MethodName hashCode 
ReturnStatement return VariableName listVar MethodName get VariableName intVar 
VariableName inputstreamVar MethodName reset 
ThisExpression this VariableName atomicbooleanVar MethodName set BooleanLiteral true VariableName scheduledexecutorserviceVar MethodName shutdown TryStatement try VariableName scheduledexecutorserviceVar MethodName awaitTermination NumberLiteral numberLiteral VariableName TimeUnit VariableName SECONDS CatchClause catch SimpleType InterruptedException VariableName interruptedexceptionVar 
IfStatement if VariableName bytebufferVar MethodName capacity Operator < VariableName intVar Modifier final SimpleType ByteBuffer VariableName bytebufferVar Name ByteBuffer MethodName allocate VariableName intVar IfStatement if VariableName directionVar Operator == VariableName Direction VariableName WRITE VariableName bytebufferVar MethodName flip VariableName newBuffer MethodName put VariableName bytebufferVar VariableName bytebufferVar Operator = VariableName newBuffer VariableName directionVar Operator = VariableName Direction VariableName WRITE 
ReturnStatement return MethodName getProperty VariableName stringVar 
ReturnStatement return VariableName sslsocketchannelVar Operator != NullLiteral null Operator && Operator ! VariableName sslsocketchannelVar MethodName isClosed 
ReturnStatement return MethodName convertToAvroStream VariableName resultsetVar VariableName outputstreamVar VariableName stringVar NullLiteral null VariableName booleanVar 
VariableName outstreamVar MethodName clear VariableName listVar MethodName clear 
VariableName latestRecordBuffer MethodName add VariableName provenanceeventrecordVar ReturnStatement return BooleanLiteral true 
ReturnStatement return MethodName computeLineage Name Collections MethodName singleton VariableName stringVar VariableName nifiuserVar VariableName LineageComputationType VariableName FLOWFILE_LINEAGE NullLiteral null NumberLiteral numberLiteral VariableName Long VariableName MAX_VALUE 
ReturnStatement return ThisExpression this 
Modifier final PrimitiveType long VariableName longVar Name System MethodName nanoTime Modifier final PrimitiveType long VariableName longVar VariableName eventindexwriterVar MethodName commit Modifier final PrimitiveType long VariableName longVar Name TimeUnit.NANOSECONDS MethodName toMillis Name System MethodName nanoTime Operator - VariableName longVar VariableName loggerVar MethodName debug StringLiteral stringLiteral VariableName longVar VariableName eventindexwriterVar VariableName longVar 
SimpleType SimpleConsumerLease VariableName simpleconsumerleaseVar VariableName blockingqueueVar MethodName poll IfStatement if VariableName simpleconsumerleaseVar Operator == NullLiteral null Modifier final ParameterizedType Consumer VariableName consumerVar MethodName createKafkaConsumer VariableName atomiclongVar MethodName incrementAndGet VariableName simpleconsumerleaseVar Operator = New new SimpleType SimpleConsumerLease VariableName consumer IfStatement if VariableName listVar Operator != NullLiteral null VariableName consumer MethodName subscribe VariableName listVar VariableName simpleconsumerleaseVar VariableName consumer MethodName subscribe VariableName patternVar VariableName simpleconsumerleaseVar VariableName simpleconsumerleaseVar MethodName setProcessSession VariableName processsessionVar VariableName processcontextVar VariableName atomiclongVar MethodName incrementAndGet ReturnStatement return VariableName simpleconsumerleaseVar 
SimpleType PublisherPool VariableName publisherpoolVar VariableName publisherpoolVar IfStatement if VariableName publisherpoolVar Operator != NullLiteral null ReturnStatement return VariableName publisherpoolVar ReturnStatement return VariableName publisherpoolVar Operator = MethodName createPublisherPool VariableName processcontextVar 
ReturnStatement return VariableName ruledtoVar 
ThisExpression this VariableName listVar Operator = VariableName listVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName jolttransformVar Instanceof instanceof SimpleType ContextualTransform SimpleType ContextualTransform VariableName jolttransformVar MethodName transform VariableName objectVar VariableName mapVar SimpleType Transform VariableName jolttransformVar MethodName transform VariableName objectVar 
ReturnStatement return VariableName stringVar 
PrimitiveType int VariableName intVar SuperMethodInvocation super MethodName read VariableName byte[]Var VariableName intVar VariableName intVar IfStatement if VariableName intVar Operator > NumberLiteral numberLiteral ArrayType byte[] VariableName byte[]Var VariableName byte[]Var IfStatement if VariableName intVar Operator < VariableName byte[]Var VariableName length VariableName copy Operator = Name Arrays MethodName copyOf VariableName byte[]Var VariableName intVar IfStatement if Operator ! VariableName base32Var MethodName isInAlphabet VariableName copy BooleanLiteral true ThrowStatement throw New new SimpleType IOException StringLiteral stringLiteral ReturnStatement return VariableName intVar 
ReturnStatement return ThisExpression this VariableName setVar 
VariableName outputstreamVar MethodName write VariableName rawBytes 
EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar MethodName recoverState VariableName processcontextVar VariableName mapVar VariableName file 
ReturnStatement return New new SimpleType SFTPTransfer VariableName processcontextVar MethodName getLogger 
ReturnStatement return VariableName intVar 
Modifier final PrimitiveType int VariableName intVar VariableName relopttableVar MethodName getRowType MethodName getFieldCount Modifier final ArrayType int[] VariableName int[]Var ArrayType int[] VariableName intVar ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName intVar VariableName i Operator ++ VariableName int[]Var VariableName i Operator = VariableName i ReturnStatement return New new SimpleType FlowFileTableScan VariableName torelcontextVar MethodName getCluster VariableName relopttableVar ThisExpression this VariableName int[]Var 
ReturnStatement return Name Collections MethodName emptyList 
VariableName bxmlnodevisitorVar MethodName visit ThisExpression this 
ReturnStatement return VariableName byteVar 
ReturnStatement return VariableName byte[]Var 
IfStatement if VariableName processsessionfactoryVar Operator == NullLiteral null VariableName processsessionfactoryVar Operator = VariableName processsessionfactoryVar SimpleType ProcessSession VariableName processsessionVar VariableName processsessionfactoryVar MethodName createSession TryStatement try MethodName onTrigger VariableName processcontextVar VariableName processsessionVar VariableName processsessionVar MethodName commit CatchClause catch Modifier final SimpleType Throwable VariableName throwableVar MethodName getLogger MethodName error StringLiteral stringLiteral ArrayType Object[] ArrayInitializer arrayInitializer VariableName processsessionVar MethodName rollback BooleanLiteral true ThrowStatement throw VariableName t 
IfStatement if VariableName booleanVar SimpleType ByteBuffer VariableName bytebufferVar Name ByteBuffer MethodName wrap VariableName resultcellVar MethodName getFamilyArray VariableName resultcellVar MethodName getFamilyOffset VariableName resultcellVar MethodName getFamilyLength SimpleType ByteBuffer VariableName bytebufferVar Name Base64 MethodName getEncoder MethodName encode VariableName cellFamilyBuffer ReturnStatement return New new SimpleType String VariableName base64Buffer MethodName array VariableName StandardCharsets VariableName UTF_8 ReturnStatement return New new SimpleType String VariableName resultcellVar MethodName getFamilyArray VariableName resultcellVar MethodName getFamilyOffset VariableName resultcellVar MethodName getFamilyLength VariableName charsetVar 
ThisExpression this VariableName listVar Operator = VariableName listVar 
IfStatement if Name ALLOWABLE_VALUE_STRING MethodName getValue MethodName equals VariableName stringVar SimpleType AttributeValue VariableName attributevalueVar VariableName mapVar MethodName get VariableName stringVar IfStatement if VariableName val Operator == NullLiteral null ReturnStatement return VariableName val ReturnStatement return VariableName val MethodName getS SimpleType AttributeValue VariableName attributevalueVar VariableName mapVar MethodName get VariableName stringVar IfStatement if VariableName val Operator == NullLiteral null ReturnStatement return VariableName val ReturnStatement return VariableName val MethodName getN 
ReturnStatement return VariableName collectionVar 
ReturnStatement return MethodName withConnection VariableName redisConnection Modifier final ArrayType byte[] VariableName byte[]Var MethodName serialize VariableName kVar VariableName serializerVar Modifier final PrimitiveType long VariableName longVar VariableName redisConnection MethodName del VariableName k ReturnStatement return VariableName numRemoved Operator > NumberLiteral numberLiteral 
ReturnStatement return VariableName listVar 
ReturnStatement return VariableName integerVar 
ReturnStatement return VariableName componentstatedtoVar 
ReturnStatement return VariableName flowsnippetdtoVar 
ThisExpression this VariableName flowsnippetdtoVar Operator = VariableName flowsnippetdtoVar 
ThisExpression this VariableName flowsnippetdtoVar Operator = VariableName flowsnippetdtoVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName integerVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName setVar 
ThisExpression this VariableName versioninfodtoVar Operator = VariableName versioninfodtoVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return Name Boolean MethodName parseBoolean MethodName getString VariableName elementVar VariableName stringVar 
ReturnStatement return Name ResourceFactory MethodName getComponentResource VariableName ResourceType VariableName ProcessGroup MethodName getIdentifier MethodName getName 
Modifier final ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName processgroupVar MethodName getOutputPorts EnhancedForStatement for Modifier final SimpleType ProcessGroup VariableName processgroupVar VariableName processgroupVar MethodName getProcessGroups VariableName listVar MethodName addAll MethodName findAllOutputPorts VariableName group ReturnStatement return VariableName listVar 
ReturnStatement return BooleanLiteral true 
IfStatement if VariableName objectVar Operator == NullLiteral null ReturnStatement return BooleanLiteral false IfStatement if MethodName getClass Operator != VariableName objectVar MethodName getClass ReturnStatement return BooleanLiteral false Modifier final SimpleType OcspRequest VariableName ocsprequestVar SimpleType OcspRequest VariableName objectVar IfStatement if Operator ! Name Objects MethodName equals ThisExpression this VariableName x509certificateVar VariableName ocsprequestVar VariableName x509certificateVar ReturnStatement return BooleanLiteral false IfStatement if Operator ! Name Objects MethodName equals ThisExpression this VariableName x509certificateVar VariableName ocsprequestVar VariableName x509certificateVar ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true 
ReturnStatement return VariableName processgroupVar MethodName getInputPorts MethodName stream MethodName filter VariableName inputPort VariableName snippetVar MethodName getInputPorts MethodName containsKey VariableName inputPort MethodName getIdentifier MethodName map VariableName inputPort MethodName getInputPort VariableName inputPort MethodName getIdentifier MethodName collect Name Collectors MethodName toSet 
ReturnStatement return MethodName isRunning ThisExpression this 
IfStatement if Name PORT_RELATIONSHIP MethodName getName MethodName equals VariableName stringVar ReturnStatement return VariableName relationshipVar ReturnStatement return NullLiteral null 
VariableName lockVar MethodName lock TryStatement try ReturnStatement return Name Collections MethodName unmodifiableSet VariableName setVar VariableName lockVar MethodName unlock 
ReturnStatement return MethodName holdTransaction VariableName peerVar VariableName flowfiletransactionVar 
SuperMethodInvocation super MethodName shutdown Modifier final SimpleType SiteToSiteClient VariableName sitetositeclientVar MethodName getSiteToSiteClient IfStatement if VariableName sitetositeclientVar Operator != NullLiteral null TryStatement try VariableName sitetositeclientVar MethodName close CatchClause catch Modifier final SimpleType IOException VariableName ioexceptionVar VariableName loggerVar MethodName warn StringLiteral stringLiteral VariableName ioe 
ReturnStatement return TypeLiteral class 
ReturnStatement return New new ParameterizedType ArrayList VariableName concurrentmapVar MethodName values 
VariableName clustercoordinationprotocolsenderVar MethodName notifyNodeStatusChange VariableName setVar VariableName nodestatuschangemessageVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName nodeidentifierVar 
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return MethodName getVariableMap MethodName get New new SimpleType VariableDescriptor VariableName stringVar 
ReturnStatement return MethodName getChartContainerImpl MethodName createChart VariableName stringVar VariableName string[]Var VariableName string[]Var VariableName double[][]Var VariableName rectangleVar 
SimpleType DataSet VariableName datasetVar New new SimpleType DataSet VariableName string[]Var VariableName string[]Var VariableName double[][]Var ReturnStatement return MethodName createChart VariableName stringVar VariableName datasetVar VariableName rectangleVar 
SimpleType OdfDefaultStyle VariableName odfdefaultstyleVar VariableName hashmapVar MethodName get VariableName stringVar IfStatement if VariableName odfdefaultstyleVar Operator != NullLiteral null SimpleType OdfStyleFamily VariableName odfstylefamilyVar VariableName odfdefaultstyleVar MethodName getFamily IfStatement if VariableName family Operator != NullLiteral null EnhancedForStatement for SimpleType OdfStyleProperty VariableName odfstylepropertyVar VariableName family MethodName getProperties IfStatement if Operator ! VariableName mapVar MethodName containsKey VariableName property Operator && VariableName odfdefaultstyleVar MethodName hasProperty VariableName property VariableName mapVar MethodName put VariableName property VariableName odfdefaultstyleVar MethodName getProperty VariableName property 
IfStatement if VariableName mapVar Operator != NullLiteral null SimpleType OdfStyle VariableName odfstyleVar VariableName odfstylableelementVar MethodName getAutomaticStyles MethodName newStyle VariableName OdfStyleFamily VariableName Text EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName mapVar MethodName entrySet IfStatement if VariableName odfstylableelementVar MethodName hasProperty VariableName entry MethodName getKey VariableName resultStyleElement MethodName setProperty VariableName entry MethodName getKey VariableName odfstylableelementVar MethodName getProperty VariableName entry MethodName getKey VariableName resultStyleElement MethodName setProperty VariableName entry MethodName getKey VariableName entry MethodName getValue VariableName odfstylableelementVar MethodName setStyleName VariableName resultStyleElement MethodName getStyleNameAttribute 
IfStatement if VariableName texthyperlinkVar Operator != NullLiteral null VariableName texthyperlinkVar Operator = VariableName texthyperlinkVar VariableName texthyperlinkVar Operator = NullLiteral null VariableName texthyperlinkVar Operator = MethodName findNext VariableName texthyperlinkVar IfStatement if VariableName texthyperlinkVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return VariableName texthyperlinkVar 
SimpleType StringBuffer VariableName stringbufferVar New new SimpleType StringBuffer VariableName saxparseexceptionVar MethodName getSystemId VariableName stringbufferVar MethodName append CharacterLiteral charLiteral VariableName stringbufferVar MethodName append VariableName saxparseexceptionVar MethodName getLineNumber VariableName stringbufferVar MethodName append StringLiteral stringLiteral VariableName stringbufferVar MethodName append VariableName saxparseexceptionVar MethodName getColumnNumber MethodName logMessage VariableName stringVar VariableName saxparseexceptionVar MethodName getMessage VariableName stringbufferVar MethodName toString VariableName intVar 
Name Selection.SelectionManager MethodName registerItem VariableName textselectionVar ReturnStatement return VariableName textselectionVar 
ReturnStatement return VariableName odfstylesbaseVar MethodName getAllOdfStyles 
SimpleType NumberDecimalPlacesAttribute VariableName numberdecimalplacesattributeVar SimpleType NumberDecimalPlacesAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName NUMBER StringLiteral stringLiteral IfStatement if VariableName numberdecimalplacesattributeVar Operator != NullLiteral null ReturnStatement return Name Integer MethodName valueOf VariableName numberdecimalplacesattributeVar MethodName intValue ReturnStatement return NullLiteral null 
SimpleType MathMathElement VariableName mathmathelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class ThisExpression this MethodName appendChild VariableName mathmathelementVar ReturnStatement return VariableName mathmathelementVar 
SimpleType OfficeTimeValueAttribute VariableName officetimevalueattributeVar SimpleType OfficeTimeValueAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName OFFICE StringLiteral stringLiteral IfStatement if VariableName officetimevalueattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName officetimevalueattributeVar MethodName getValue ReturnStatement return NullLiteral null 
IfStatement if VariableName elementvisitorVar Instanceof instanceof SimpleType DefaultElementVisitor SimpleType DefaultElementVisitor VariableName defaultelementvisitorVar SimpleType DefaultElementVisitor VariableName elementvisitorVar VariableName defaultVisitor MethodName visit ThisExpression this VariableName elementvisitorVar MethodName visit ThisExpression this 
SimpleType DbNameAttribute VariableName dbnameattributeVar SimpleType DbNameAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName DB StringLiteral stringLiteral IfStatement if VariableName dbnameattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName dbnameattributeVar MethodName getValue ReturnStatement return NullLiteral null 
IfStatement if VariableName elementvisitorVar Instanceof instanceof SimpleType DefaultElementVisitor SimpleType DefaultElementVisitor VariableName defaultelementvisitorVar SimpleType DefaultElementVisitor VariableName elementvisitorVar VariableName defaultVisitor MethodName visit ThisExpression this VariableName elementvisitorVar MethodName visit ThisExpression this 
SimpleType SvgWidthAttribute VariableName svgwidthattributeVar SimpleType SvgWidthAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName SVG StringLiteral stringLiteral IfStatement if VariableName svgwidthattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName svgwidthattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType Dr3dVupAttribute VariableName dr3dvupattributeVar New new SimpleType Dr3dVupAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName dr3dvupattributeVar VariableName dr3dvupattributeVar MethodName setValue VariableName stringVar 
SimpleType Dr3dTextureGenerationModeYAttribute VariableName dr3dtexturegenerationmodeyattributeVar New new SimpleType Dr3dTextureGenerationModeYAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName dr3dtexturegenerationmodeyattributeVar VariableName dr3dtexturegenerationmodeyattributeVar MethodName setValue VariableName stringVar 
SimpleType DrawFillImageRefPointYAttribute VariableName drawfillimagerefpointyattributeVar SimpleType DrawFillImageRefPointYAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName DRAW StringLiteral stringLiteral IfStatement if VariableName drawfillimagerefpointyattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName drawfillimagerefpointyattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType StyleOverflowBehaviorAttribute VariableName styleoverflowbehaviorattributeVar SimpleType StyleOverflowBehaviorAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName STYLE StringLiteral stringLiteral IfStatement if VariableName styleoverflowbehaviorattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName styleoverflowbehaviorattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType StyleRelHeightAttribute VariableName stylerelheightattributeVar New new SimpleType StyleRelHeightAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName stylerelheightattributeVar VariableName stylerelheightattributeVar MethodName setValue VariableName stringVar 
SimpleType StyleHeightAttribute VariableName styleheightattributeVar New new SimpleType StyleHeightAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName styleheightattributeVar VariableName styleheightattributeVar MethodName setValue VariableName stringVar 
SimpleType StyleTypeAttribute VariableName styletypeattributeVar SimpleType StyleTypeAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName STYLE StringLiteral stringLiteral IfStatement if VariableName styletypeattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName styletypeattributeVar MethodName getValue ReturnStatement return VariableName StyleTypeAttribute VariableName DEFAULT_VALUE 
SimpleType TextAlphabeticalIndexElement VariableName textalphabeticalindexelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName textalphabeticalindexelementVar MethodName setTextNameAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName textalphabeticalindexelementVar ReturnStatement return VariableName textalphabeticalindexelementVar 
SimpleType FoPaddingAttribute VariableName fopaddingattributeVar New new SimpleType FoPaddingAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName fopaddingattributeVar VariableName fopaddingattributeVar MethodName setValue VariableName stringVar 
SimpleType StyleTextAlignSourceAttribute VariableName styletextalignsourceattributeVar SimpleType StyleTextAlignSourceAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName STYLE StringLiteral stringLiteral IfStatement if VariableName styletextalignsourceattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName styletextalignsourceattributeVar MethodName getValue ReturnStatement return NullLiteral null 
IfStatement if VariableName elementvisitorVar Instanceof instanceof SimpleType DefaultElementVisitor SimpleType DefaultElementVisitor VariableName defaultelementvisitorVar SimpleType DefaultElementVisitor VariableName elementvisitorVar VariableName defaultVisitor MethodName visit ThisExpression this VariableName elementvisitorVar MethodName visit ThisExpression this 
SimpleType ChartDataLabelTextAttribute VariableName chartdatalabeltextattributeVar SimpleType ChartDataLabelTextAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName CHART StringLiteral stringLiteral IfStatement if VariableName chartdatalabeltextattributeVar Operator != NullLiteral null ReturnStatement return Name Boolean MethodName valueOf VariableName chartdatalabeltextattributeVar MethodName booleanValue ReturnStatement return NullLiteral null 
SimpleType ChartMinimumAttribute VariableName chartminimumattributeVar New new SimpleType ChartMinimumAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName chartminimumattributeVar VariableName chartminimumattributeVar MethodName setDoubleValue VariableName doubleVar MethodName doubleValue 
SimpleType FoMarginLeftAttribute VariableName fomarginleftattributeVar SimpleType FoMarginLeftAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName FO StringLiteral stringLiteral IfStatement if VariableName fomarginleftattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName fomarginleftattributeVar MethodName getValue ReturnStatement return NullLiteral null 
IfStatement if VariableName elementvisitorVar Instanceof instanceof SimpleType DefaultElementVisitor SimpleType DefaultElementVisitor VariableName defaultelementvisitorVar SimpleType DefaultElementVisitor VariableName elementvisitorVar VariableName defaultVisitor MethodName visit ThisExpression this VariableName elementvisitorVar MethodName visit ThisExpression this 
SimpleType SvgOffsetAttribute VariableName svgoffsetattributeVar SimpleType SvgOffsetAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName SVG StringLiteral stringLiteral IfStatement if VariableName svgoffsetattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName svgoffsetattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType TableConditionSourceRangeAddressAttribute VariableName tableconditionsourcerangeaddressattributeVar SimpleType TableConditionSourceRangeAddressAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName TABLE StringLiteral stringLiteral IfStatement if VariableName tableconditionsourcerangeaddressattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName tableconditionsourcerangeaddressattributeVar MethodName getValue ReturnStatement return NullLiteral null 
ReturnStatement return VariableName odfnameVar 
SimpleType TableOnUpdateKeepSizeAttribute VariableName tableonupdatekeepsizeattributeVar SimpleType TableOnUpdateKeepSizeAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName TABLE StringLiteral stringLiteral IfStatement if VariableName tableonupdatekeepsizeattributeVar Operator != NullLiteral null ReturnStatement return Name Boolean MethodName valueOf VariableName tableonupdatekeepsizeattributeVar MethodName booleanValue ReturnStatement return Name Boolean MethodName valueOf VariableName TableOnUpdateKeepSizeAttribute VariableName DEFAULT_VALUE 
ReturnStatement return VariableName odfnameVar 
SimpleType TableMemberTypeAttribute VariableName tablemembertypeattributeVar New new SimpleType TableMemberTypeAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName tablemembertypeattributeVar VariableName tablemembertypeattributeVar MethodName setValue VariableName stringVar 
SimpleType OfficeValueTypeAttribute VariableName officevaluetypeattributeVar SimpleType OfficeValueTypeAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName OFFICE StringLiteral stringLiteral IfStatement if VariableName officevaluetypeattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName officevaluetypeattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType TableFormulaAttribute VariableName tableformulaattributeVar SimpleType TableFormulaAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName TABLE StringLiteral stringLiteral IfStatement if VariableName tableformulaattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName tableformulaattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType TableTableSourceElement VariableName tabletablesourceelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName tabletablesourceelementVar MethodName setXlinkHrefAttribute VariableName stringVar VariableName tabletablesourceelementVar MethodName setXlinkTypeAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName tabletablesourceelementVar ReturnStatement return VariableName tabletablesourceelementVar 
ReturnStatement return VariableName odfnameVar 
SimpleType XlinkActuateAttribute VariableName xlinkactuateattributeVar New new SimpleType XlinkActuateAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName xlinkactuateattributeVar VariableName xlinkactuateattributeVar MethodName setValue VariableName stringVar 
SimpleType TextRestartNumberingAttribute VariableName textrestartnumberingattributeVar SimpleType TextRestartNumberingAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName TEXT StringLiteral stringLiteral IfStatement if VariableName textrestartnumberingattributeVar Operator != NullLiteral null ReturnStatement return Name Boolean MethodName valueOf VariableName textrestartnumberingattributeVar MethodName booleanValue ReturnStatement return Name Boolean MethodName valueOf VariableName TextRestartNumberingAttribute VariableName DEFAULT_VALUE 
SimpleType DrawMeasureElement VariableName drawmeasureelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName drawmeasureelementVar MethodName setSvgX1Attribute VariableName stringVar VariableName drawmeasureelementVar MethodName setSvgX2Attribute VariableName stringVar VariableName drawmeasureelementVar MethodName setSvgY1Attribute VariableName stringVar VariableName drawmeasureelementVar MethodName setSvgY2Attribute VariableName stringVar ThisExpression this MethodName appendChild VariableName drawmeasureelementVar ReturnStatement return VariableName drawmeasureelementVar 
SimpleType TextAlphabeticalIndexMarkElement VariableName textalphabeticalindexmarkelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName textalphabeticalindexmarkelementVar MethodName setTextStringValueAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName textalphabeticalindexmarkelementVar ReturnStatement return VariableName textalphabeticalindexmarkelementVar 
SimpleType TextChangeEndElement VariableName textchangeendelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName textchangeendelementVar MethodName setTextChangeIdAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName textchangeendelementVar ReturnStatement return VariableName textchangeendelementVar 
SimpleType TextHiddenParagraphElement VariableName texthiddenparagraphelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName texthiddenparagraphelementVar MethodName setTextConditionAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName texthiddenparagraphelementVar ReturnStatement return VariableName texthiddenparagraphelementVar 
SimpleType TextBookmarkElement VariableName textbookmarkelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName textbookmarkelementVar MethodName setTextNameAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName textbookmarkelementVar ReturnStatement return VariableName textbookmarkelementVar 
SimpleType TextMetaElement VariableName textmetaelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class ThisExpression this MethodName appendChild VariableName textmetaelementVar ReturnStatement return VariableName textmetaelementVar 
SimpleType TextIllustrationIndexElement VariableName textillustrationindexelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName textillustrationindexelementVar MethodName setTextNameAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName textillustrationindexelementVar ReturnStatement return VariableName textillustrationindexelementVar 
SimpleType DrawCaptionElement VariableName drawcaptionelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class ThisExpression this MethodName appendChild VariableName drawcaptionelementVar ReturnStatement return VariableName drawcaptionelementVar 
SimpleType TextConnectionNameAttribute VariableName textconnectionnameattributeVar New new SimpleType TextConnectionNameAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName textconnectionnameattributeVar VariableName textconnectionnameattributeVar MethodName setValue VariableName stringVar 
SimpleType TextIgnoreCaseAttribute VariableName textignorecaseattributeVar New new SimpleType TextIgnoreCaseAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName textignorecaseattributeVar VariableName textignorecaseattributeVar MethodName setBooleanValue VariableName booleanVar MethodName booleanValue 
SimpleType StyleNumLetterSyncAttribute VariableName stylenumlettersyncattributeVar SimpleType StyleNumLetterSyncAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName STYLE StringLiteral stringLiteral IfStatement if VariableName stylenumlettersyncattributeVar Operator != NullLiteral null ReturnStatement return Name Boolean MethodName valueOf VariableName stylenumlettersyncattributeVar MethodName booleanValue ReturnStatement return NullLiteral null 
SimpleType TextStyleNameAttribute VariableName textstylenameattributeVar New new SimpleType TextStyleNameAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName textstylenameattributeVar VariableName textstylenameattributeVar MethodName setValue VariableName stringVar 
SimpleType DrawFloatingFrameElement VariableName drawfloatingframeelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class VariableName drawfloatingframeelementVar MethodName setXlinkHrefAttribute VariableName stringVar VariableName drawfloatingframeelementVar MethodName setXlinkTypeAttribute VariableName stringVar ThisExpression this MethodName appendChild VariableName drawfloatingframeelementVar ReturnStatement return VariableName drawfloatingframeelementVar 
SimpleType XlinkHrefAttribute VariableName xlinkhrefattributeVar New new SimpleType XlinkHrefAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName xlinkhrefattributeVar VariableName xlinkhrefattributeVar MethodName setValue VariableName stringVar 
SimpleType SvgX1Attribute VariableName svgx1attributeVar New new SimpleType SvgX1Attribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName svgx1attributeVar VariableName svgx1attributeVar MethodName setValue VariableName stringVar 
SimpleType XlinkShowAttribute VariableName xlinkshowattributeVar SimpleType XlinkShowAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName XLINK StringLiteral stringLiteral IfStatement if VariableName xlinkshowattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName xlinkshowattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType XlinkShowAttribute VariableName xlinkshowattributeVar New new SimpleType XlinkShowAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName xlinkshowattributeVar VariableName xlinkshowattributeVar MethodName setValue VariableName stringVar 
SimpleType DrawIdAttribute VariableName drawidattributeVar New new SimpleType DrawIdAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName drawidattributeVar VariableName drawidattributeVar MethodName setValue VariableName stringVar 
SimpleType DrawTransformAttribute VariableName drawtransformattributeVar SimpleType DrawTransformAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName DRAW StringLiteral stringLiteral IfStatement if VariableName drawtransformattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName drawtransformattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType PresentationEffectAttribute VariableName presentationeffectattributeVar SimpleType PresentationEffectAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName PRESENTATION StringLiteral stringLiteral IfStatement if VariableName presentationeffectattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName presentationeffectattributeVar MethodName getValue ReturnStatement return VariableName PresentationEffectAttribute VariableName DEFAULT_VALUE 
SimpleType PresentationNameAttribute VariableName presentationnameattributeVar SimpleType PresentationNameAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName PRESENTATION StringLiteral stringLiteral IfStatement if VariableName presentationnameattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName presentationnameattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType DrawLayerAttribute VariableName drawlayerattributeVar New new SimpleType DrawLayerAttribute SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName setOdfAttribute VariableName drawlayerattributeVar VariableName drawlayerattributeVar MethodName setValue VariableName stringVar 
SimpleType PresentationClassNamesAttribute VariableName presentationclassnamesattributeVar SimpleType PresentationClassNamesAttribute MethodName getOdfAttribute VariableName OdfDocumentNamespace VariableName PRESENTATION StringLiteral stringLiteral IfStatement if VariableName presentationclassnamesattributeVar Operator != NullLiteral null ReturnStatement return Name String MethodName valueOf VariableName presentationclassnamesattributeVar MethodName getValue ReturnStatement return NullLiteral null 
SimpleType SvgTitleElement VariableName svgtitleelementVar SimpleType OdfFileDom ThisExpression this VariableName ownerDocument MethodName newOdfElement TypeLiteral class ThisExpression this MethodName appendChild VariableName svgtitleelementVar ReturnStatement return VariableName svgtitleelementVar 
IfStatement if VariableName elementvisitorVar Instanceof instanceof SimpleType DefaultElementVisitor SimpleType DefaultElementVisitor VariableName defaultelementvisitorVar SimpleType DefaultElementVisitor VariableName elementvisitorVar VariableName defaultVisitor MethodName visit ThisExpression this VariableName elementvisitorVar MethodName visit ThisExpression this 
MethodName visit SimpleType OdfElement VariableName animparelementVar 
MethodName visit SimpleType OdfElement VariableName drawareacircleelementVar 
MethodName visit SimpleType OdfElement VariableName formpasswordelementVar 
MethodName visit SimpleType OdfElement VariableName stylemapelementVar 
MethodName visit SimpleType OdfElement VariableName textconditionaltextelementVar 
MethodName visit SimpleType OdfElement VariableName textsequencedeclselementVar 
SimpleType OdfElement VariableName odfelementVar SimpleType OdfElement MethodName getOwnerElement SimpleType String VariableName stringVar NullLiteral null IfStatement if VariableName odfelementVar Operator != NullLiteral null VariableName stringVar Operator = VariableName stringVar ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName odfnameVar 
ReturnStatement return BooleanLiteral false 
ReturnStatement return BooleanLiteral false 
ReturnStatement return VariableName mValue 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return BooleanLiteral false 
ReturnStatement return BooleanLiteral false 
MethodName setValue VariableName valueVar MethodName toString 
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e 
ReturnStatement return NullLiteral null 
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return Name Value MethodName enumValueOf ThisExpression this MethodName getValue 
ReturnStatement return NullLiteral null 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return VariableName odfnameVar 
ReturnStatement return BooleanLiteral false 
ReturnStatement return NullLiteral null 
ReturnStatement return VariableName mValue 
MethodName setValue VariableName valueVar MethodName toString 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return BooleanLiteral false 
SuperMethodInvocation super MethodName setValue Name String MethodName valueOf VariableName booleanVar 
ReturnStatement return VariableName odfnameVar 
ReturnStatement return NullLiteral null 
ReturnStatement return Name Value MethodName enumValueOf ThisExpression this MethodName getValue 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return VariableName odfnameVar 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return VariableName odfnameVar 
ReturnStatement return BooleanLiteral false 
ReturnStatement return NullLiteral null 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return BooleanLiteral false 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return BooleanLiteral false 
ReturnStatement return NullLiteral null 
ReturnStatement return BooleanLiteral false 
ReturnStatement return BooleanLiteral false 
ReturnStatement return NullLiteral null 
ReturnStatement return NullLiteral null 
ReturnStatement return NullLiteral null 
ReturnStatement return NullLiteral null 
ReturnStatement return BooleanLiteral false 
ReturnStatement return NullLiteral null 
SuperMethodInvocation super MethodName setValue Name String MethodName valueOf VariableName booleanVar 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return BooleanLiteral false 
ReturnStatement return BooleanLiteral false 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return BooleanLiteral false 
ReturnStatement return NullLiteral null 
ReturnStatement return VariableName odfnameVar 
ReturnStatement return BooleanLiteral false 
ReturnStatement return BooleanLiteral false 
ReturnStatement return BooleanLiteral false 
ReturnStatement return BooleanLiteral false 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
ReturnStatement return Name ATTRIBUTE_NAME MethodName getLocalName 
MethodName setValue VariableName valueVar MethodName toString 
ReturnStatement return NullLiteral null 
SuperMethodInvocation super MethodName setValue Name String MethodName valueOf VariableName booleanVar 
ReturnStatement return NullLiteral null 
ReturnStatement return VariableName mValue 
SuperMethodInvocation super MethodName setValue Name String MethodName valueOf VariableName booleanVar 
ReturnStatement return NullLiteral null 
SuperMethodInvocation super MethodName setValue Name String MethodName valueOf VariableName intVar 
ReturnStatement return NullLiteral null 
SuperMethodInvocation super MethodName setValue Name String MethodName valueOf VariableName intVar 
ReturnStatement return BooleanLiteral false 
SimpleType OdfElement VariableName odfelementVar SimpleType OdfElement MethodName getOwnerElement SimpleType String VariableName stringVar NullLiteral null IfStatement if VariableName odfelementVar Operator != NullLiteral null VariableName stringVar Operator = VariableName stringVar ReturnStatement return VariableName stringVar 
SimpleType Node VariableName nodeVar MethodName getParentNode WhileStatement while VariableName nodeVar Operator != NullLiteral null IfStatement if VariableName classVar MethodName isInstance VariableName nodeVar ReturnStatement return VariableName classVar MethodName cast VariableName nodeVar VariableName nodeVar Operator = VariableName nodeVar MethodName getParentNode ReturnStatement return NullLiteral null 
ReturnStatement return VariableName mValue 
SimpleType OdfMediaType VariableName odfmediatypeVar NullLiteral null IfStatement if VariableName stringVar Operator != NullLiteral null SimpleType String VariableName stringVar VariableName stringVar MethodName substring VariableName stringVar MethodName lastIndexOf StringLiteral stringLiteral Operator + NumberLiteral numberLiteral VariableName stringVar MethodName length VariableName mediaTypeShort Operator = VariableName mediaTypeShort MethodName replace CharacterLiteral charLiteral CharacterLiteral charLiteral MethodName toUpperCase TryStatement try VariableName odfmediatypeVar Operator = Name OdfMediaType MethodName valueOf VariableName mediaTypeShort CatchClause catch SimpleType IllegalArgumentException VariableName illegalargumentexceptionVar ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral ReturnStatement return VariableName odfmediatypeVar 
ReturnStatement return New new SimpleType NonNegativePixelLength VariableName stringVar 
SwitchStatement switch VariableName widgetVar MethodName getId SwitchCase case VariableName WIDGET_ID_RSS VariableName booleanVar Operator = BooleanLiteral false BreakStatement break SwitchCase case VariableName WIDGET_ID_MY_ROOMS VariableName booleanVar Operator = BooleanLiteral false BreakStatement break SwitchCase case VariableName WIDGET_ID_ADMIN VariableName booleanVar Operator = BooleanLiteral false BreakStatement break SwitchCase default BreakStatement break SuperMethodInvocation super MethodName addWidget VariableName widgetVar 
ReturnStatement return VariableName searchabledataproviderVar 
ReturnStatement return VariableName listVar 
ReturnStatement return VariableName davpropertyVar Operator == NullLiteral null NullLiteral null VariableName davpropertyVar MethodName getValue MethodName toString 
ReturnStatement return SuperMethodInvocation super MethodName getId 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ThisExpression this VariableName intVar Operator = VariableName intVar 
ReturnStatement return VariableName longVar 
IfStatement if VariableName mailmessageVar MethodName getId Operator == NullLiteral null VariableName mailmessageVar MethodName setInserted New new SimpleType Date VariableName entitymanagerVar MethodName persist VariableName mailmessageVar VariableName mailmessageVar MethodName setUpdated New new SimpleType Date VariableName mailmessageVar Operator = VariableName entitymanagerVar MethodName merge VariableName mailmessageVar ReturnStatement return VariableName mailmessageVar 
ReturnStatement return MethodName getSize MethodName getByOwner VariableName longVar 
ReturnStatement return Name String MethodName format StringLiteral stringLiteral VariableName intVar VariableName intVar VariableName intVar 
EnhancedForStatement for SimpleType File VariableName fileVar MethodName getParent MethodName listFiles Name FileUtils MethodName deleteQuietly VariableName f 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName mapVar Operator != NullLiteral null VariableName mapVar Name Collections MethodName emptyMap 
TryStatement try Name ClientCacheFactory MethodName getAnyInstance MethodName close ReturnStatement return BooleanLiteral true CatchClause catch SimpleType Exception VariableName exceptionVar ReturnStatement return BooleanLiteral false 
ReturnStatement return Name Optional MethodName ofNullable MethodName getClientCache MethodName orElseGet 
ReturnStatement return Operator ! Name ObjectUtils MethodName isEmpty VariableName t[]Var VariableName t[]Var VariableName t[]Var 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ThisExpression this VariableName listVar Operator = VariableName listVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return ThisExpression this VariableName intVar 
ThisExpression this VariableName integerVar Operator = VariableName integerVar 
ReturnStatement return MethodName getExpiration VariableName entryVar MethodName getValue 
ReturnStatement return VariableName kVar 
SuperMethodInvocation super MethodName doParse VariableName elementVar VariableName parsercontextVar VariableName beandefinitionbuilderVar MethodName registerDefinedIndexesApplicationListener VariableName parsercontextVar Name ParsingUtils MethodName setPropertyReference VariableName elementVar VariableName beandefinitionbuilderVar StringLiteral stringLiteral StringLiteral stringLiteral 
ReturnStatement return TypeLiteral class 
SimpleType String VariableName stringVar VariableName elementVar MethodName getAttribute VariableName NAME_ATTRIBUTE ReturnStatement return Name StringUtils MethodName hasText VariableName stringVar VariableName stringVar VariableName elementVar MethodName getAttribute VariableName ID_ATTRIBUTE 
ThisExpression this VariableName applicationcontextVar Operator = VariableName applicationcontextVar 
ReturnStatement return VariableName stringVar 
IfStatement if Operator ! ThisExpression this MethodName isEmpty Name CollectionUtils MethodName rename VariableName stringVar VariableName stringVar VariableName redisoperationsVar VariableName stringVar Operator = VariableName stringVar 
ThrowStatement throw New new SimpleType UnsupportedOperationException 
ReturnStatement return VariableName redisserializationcontextVar MethodName getHashValueSerializationPair MethodName write VariableName hvVar 
ReturnStatement return VariableName redistemplateVar MethodName getHashValueSerializer 
MethodName execute New new SimpleType ValueDeserializingRedisCallback VariableName kVar VariableName connection MethodName lTrim VariableName rawKey VariableName longVar VariableName longVar ReturnStatement return NullLiteral null BooleanLiteral true 
VariableName rediscachewriterVar MethodName remove VariableName stringVar MethodName createAndConvertCacheKey VariableName objectVar 
Name Assert MethodName notNull VariableName bytebufferVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName rangeVar StringLiteral stringLiteral ReturnStatement return MethodName zRange Name Mono MethodName just Name ZRangeCommand MethodName valuesWithin VariableName rangeVar MethodName from VariableName bytebufferVar MethodName flatMap MethodName map VariableName tuple Name ByteBuffer MethodName wrap VariableName tuple MethodName getValue 
ThisExpression this VariableName jedisconnectionVar MethodName close 
ReturnStatement return Operator ! VariableName clustercommandexecutorVar MethodName executeCommandOnAllNodes ParameterizedType JedisClusterCommandCallback MethodName resultsAsList MethodName isEmpty StringLiteral stringLiteral NullLiteral null 
VariableName redisconnectionVar MethodName pSubscribe VariableName messagelistenerVar VariableName byte[]Var 
VariableName redisconnectionVar MethodName scriptKill 
ReturnStatement return VariableName booleanVar 
Name Assert MethodName notNull VariableName tVar StringLiteral stringLiteral ReturnStatement return New new ParameterizedType HIncrByCommand MethodName getKey VariableName bytebufferVar VariableName tVar 
Name Assert MethodName notNull VariableName collectionVar StringLiteral stringLiteral ReturnStatement return New new SimpleType SRemCommand NullLiteral null New new ParameterizedType ArrayList VariableName collectionVar 
ReturnStatement return VariableName bytebufferVar 
ReturnStatement return VariableName listVar 
Name Assert MethodName notNull VariableName collectionVar StringLiteral stringLiteral ReturnStatement return MethodName sDiff Name Mono MethodName just Name SDiffCommand MethodName keys VariableName collectionVar MethodName flatMap 
Name Assert MethodName notNull VariableName collectionVar StringLiteral stringLiteral ReturnStatement return New new SimpleType SDiffStoreCommand NullLiteral null New new ParameterizedType ArrayList VariableName collectionVar 
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName string[]Var VariableName length EnhancedForStatement for SimpleType String VariableName stringVar VariableName string[]Var VariableName listVar MethodName add Name RedisClientInfoBuilder MethodName fromString VariableName line ReturnStatement return VariableName listVar 
ReturnStatement return MethodName getLongValueOf VariableName INFO VariableName NUMBER_OTHER_SENTINELS 
Name Assert MethodName notNull VariableName bytebufferVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName bytebufferVar StringLiteral stringLiteral ReturnStatement return MethodName set Name Mono MethodName just Name SetCommand MethodName set VariableName bytebufferVar MethodName value VariableName bytebufferVar MethodName next MethodName map 
ReturnStatement return MethodName listCommands MethodName lPop VariableName byte[]Var 
Name Assert MethodName state MethodName hasRedisSentinelConfigured StringLiteral stringLiteral EnhancedForStatement for SimpleType RedisNode VariableName redisnodeVar ThisExpression this VariableName redissentinelconfigurationVar MethodName getSentinels IfStatement if MethodName isActive VariableName node ReturnStatement return VariableName node ThrowStatement throw New new SimpleType InvalidDataAccessApiUsageException StringLiteral stringLiteral 
ThisExpression this VariableName requestmatcherVar Operator = New new SimpleType AntPathRequestMatcher StringLiteral stringLiteral Operator + VariableName stringVar 
ReturnStatement return ThisExpression this VariableName digestauthenticationentrypointVar 
SimpleType ServerWebExchangeMatcher VariableName serverwebexchangematcherVar Name ServerWebExchangeMatchers MethodName pathMatchers VariableName HttpMethod VariableName GET StringLiteral stringLiteral SimpleType ServerWebExchangeMatcher VariableName serverwebexchangematcherVar New new SimpleType NegatedServerWebExchangeMatcher Name ServerWebExchangeMatchers MethodName pathMatchers StringLiteral stringLiteral SimpleType MediaTypeServerWebExchangeMatcher VariableName mediatypeserverwebexchangematcherVar New new SimpleType MediaTypeServerWebExchangeMatcher VariableName MediaType VariableName TEXT_HTML VariableName mediatypeserverwebexchangematcherVar MethodName setIgnoredMediaTypes Name Collections MethodName singleton VariableName MediaType VariableName ALL ReturnStatement return New new SimpleType AndServerWebExchangeMatcher VariableName serverwebexchangematcherVar VariableName serverwebexchangematcherVar VariableName mediatypeserverwebexchangematcherVar 
ThisExpression this VariableName serverauthenticationentrypointVar Operator = VariableName serverauthenticationentrypointVar 
ReturnStatement return ThisExpression this VariableName asynccontextVar MethodName createListener VariableName classVar 
IfStatement if ThisExpression this VariableName setVar Operator == VariableName setVar ReturnStatement return IfStatement if Operator ! ThisExpression this VariableName setVar MethodName contains VariableName httpservletrequestVar MethodName getMethod ThrowStatement throw New new SimpleType RequestRejectedException StringLiteral stringLiteral Operator + VariableName httpservletrequestVar MethodName getMethod StringLiteral stringLiteral ThisExpression this VariableName setVar 
IfStatement if MethodName valueContains VariableName httpservletrequestVar MethodName getContextPath VariableName stringVar ReturnStatement return BooleanLiteral true ReturnStatement return MethodName valueContains VariableName httpservletrequestVar MethodName getRequestURI VariableName stringVar 
ThisExpression this VariableName redirectstrategyVar Operator = VariableName redirectstrategyVar 
EnhancedForStatement for SimpleType JaasAuthenticationCallbackHandler VariableName jaasauthenticationcallbackhandlerVar ThisExpression this VariableName jaasauthenticationcallbackhandler[]Var EnhancedForStatement for SimpleType Callback VariableName callbackVar VariableName callback[]Var VariableName handler MethodName handle VariableName callback ThisExpression this VariableName authenticationVar 
ReturnStatement return MethodName authorities Name AuthorityUtils MethodName createAuthorityList VariableName stringVar 
ReturnStatement return Name Mono MethodName fromCallable ThisExpression this VariableName jwksourceVar MethodName get VariableName jwkselectorVar NullLiteral null 
PrimitiveType int VariableName intVar VariableName intVar Operator - VariableName intVar ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName intVar Name System MethodName arraycopy VariableName byte[]Var VariableName intVar VariableName byte[]Var NumberLiteral numberLiteral VariableName intVar ReturnStatement return VariableName byte[]Var 
ThisExpression this VariableName serveraccessdeniedhandlerVar Operator = VariableName serveraccessdeniedhandlerVar ReturnStatement return ThisExpression this 
IfStatement if ThisExpression this VariableName corswebfilterVar Operator != NullLiteral null ReturnStatement return ThisExpression this VariableName corswebfilterVar SimpleType CorsConfigurationSource VariableName corsconfigurationsourceVar MethodName getBeanOrNull TypeLiteral class IfStatement if VariableName corsconfigurationsourceVar Operator == NullLiteral null ReturnStatement return NullLiteral null SimpleType CorsProcessor VariableName corsprocessorVar MethodName getBeanOrNull TypeLiteral class IfStatement if VariableName corsprocessorVar Operator == NullLiteral null VariableName corsprocessorVar Operator = New new SimpleType DefaultCorsProcessor ThisExpression this VariableName corswebfilterVar Operator = New new SimpleType CorsWebFilter VariableName corsconfigurationsourceVar VariableName corsprocessorVar ReturnStatement return ThisExpression this VariableName corswebfilterVar 
ThisExpression this VariableName applicationcontextVar Operator = VariableName applicationcontextVar 
ReturnStatement return VariableName booleanVar VariableName stringVar MethodName toLowerCase VariableName stringVar 
ThisExpression this VariableName authenticationuserdetailsserviceVar Operator = VariableName authenticationuserdetailsserviceVar ReturnStatement return ThisExpression this 
ReturnStatement return ThisExpression this 
ReturnStatement return MethodName enableMethodSecurity MethodName getBoolean StringLiteral stringLiteral 
ReturnStatement return VariableName stringVar 
VariableName facebookVar MethodName feedOperations MethodName updateStatus VariableName stringVar 
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral 
ReturnStatement return VariableName flowdefinitionVar MethodName getAttributes MethodName contains VariableName stringVar 
SimpleType Transition VariableName transitionVar MethodName getTransitionSet MethodName getTransition VariableName requestcontextVar IfStatement if VariableName transitionVar Operator == NullLiteral null ThrowStatement throw New new SimpleType NoMatchingTransitionException MethodName getFlow MethodName getId MethodName getId VariableName requestcontextVar MethodName getCurrentEvent StringLiteral stringLiteral Operator + VariableName requestcontextVar MethodName getCurrentEvent StringLiteral stringLiteral MethodName getId StringLiteral stringLiteral MethodName getFlow MethodName getId StringLiteral stringLiteral Name StylerUtils MethodName style MethodName getTransitionSet MethodName getTransitionCriterias StringLiteral stringLiteral ReturnStatement return VariableName transitionVar 
ReturnStatement return VariableName requestcontextVar MethodName getViewScope MethodName remove VariableName stringVar 
ThisExpression this VariableName conversionserviceVar Operator = VariableName conversionserviceVar 
ReturnStatement return VariableName expressionparserVar 
MethodName restoreVariables VariableName requestcontrolcontextVar MethodName getCurrentViewState VariableName requestcontrolcontextVar MethodName resume VariableName requestcontrolcontextVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName stringVar 
IfStatement if Operator ! VariableName modelVar Instanceof instanceof SimpleType ActionStateModel ReturnStatement return BooleanLiteral false SimpleType ActionStateModel VariableName actionstatemodelVar SimpleType ActionStateModel VariableName modelVar ReturnStatement return Name ObjectUtils MethodName nullSafeEquals MethodName getId VariableName actionstatemodelVar MethodName getId 
SimpleType EndStateModel VariableName endstatemodelVar SimpleType EndStateModel VariableName modelVar MethodName setParent NullLiteral null MethodName setAttributes MethodName merge MethodName getAttributes VariableName endstatemodelVar MethodName getAttributes MethodName setSecured SimpleType SecuredModel MethodName merge MethodName getSecured VariableName endstatemodelVar MethodName getSecured MethodName setOnEntryActions MethodName merge MethodName getOnEntryActions VariableName endstatemodelVar MethodName getOnEntryActions BooleanLiteral false MethodName setExceptionHandlers MethodName merge MethodName getExceptionHandlers VariableName endstatemodelVar MethodName getExceptionHandlers MethodName setView MethodName merge MethodName getView VariableName endstatemodelVar MethodName getView MethodName setCommit MethodName merge MethodName getCommit VariableName endstatemodelVar MethodName getCommit MethodName setOutputs MethodName merge MethodName getOutputs VariableName endstatemodelVar MethodName getOutputs BooleanLiteral false 
ReturnStatement return VariableName parametermapVar 
ReturnStatement return VariableName flowurlhandlerVar 
ReturnStatement return BooleanLiteral true 
IfStatement if VariableName stringVar MethodName length Operator == NumberLiteral numberLiteral ThrowStatement throw New new SimpleType ParserException VariableName stringVar StringLiteral stringLiteral NullLiteral null 
ReturnStatement return VariableName elresolverVar 
IfStatement if Operator ! VariableName objectVar Instanceof instanceof SimpleType MethodSignature ReturnStatement return BooleanLiteral false SimpleType MethodSignature VariableName methodsignatureVar SimpleType MethodSignature VariableName objectVar ReturnStatement return VariableName stringVar MethodName equals VariableName methodsignatureVar VariableName stringVar Operator && VariableName parametersVar MethodName equals VariableName methodsignatureVar VariableName parametersVar 
ReturnStatement return VariableName statisticVar Operator != NullLiteral null VariableName statisticVar Name Statistics MethodName of VariableName arraylistVar MethodName size Name ImmutableList MethodName of 
ThisExpression this VariableName intVar Operator = VariableName intVar ReturnStatement return ThisExpression this 
MethodName onDriverException VariableName queryvalidationexceptionVar VariableName outputcollectorVar VariableName tupleVar 
IfStatement if VariableName hikaridatasourceVar Operator != NullLiteral null VariableName hikaridatasourceVar MethodName close 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar ReturnStatement return ThisExpression this 
ReturnStatement return VariableName webtargetVar MethodName request MethodName post Name Entity MethodName json VariableName opentsdbmetricdatapointVar TypeLiteral class 
ThisExpression this VariableName listVar MethodName addAll VariableName listVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName listVar 
ThisExpression this VariableName objectdefVar Operator = VariableName objectdefVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName intVar 
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList EnhancedForStatement for SimpleType SupervisorDetails VariableName supervisordetailsVar ThisExpression this VariableName mapVar MethodName values VariableName listVar MethodName addAll ThisExpression this MethodName getAvailableSlots VariableName supervisor ReturnStatement return VariableName listVar 
TryStatement try MethodName write New new SimpleType TCompactProtocol New new SimpleType TIOStreamTransport VariableName objectoutputstreamVar CatchClause catch SimpleType TException VariableName texceptionVar ThrowStatement throw New new SimpleType IOException VariableName te 
ReturnStatement return New new SimpleType ProfileRequestStandardScheme 
TryStatement try MethodName write New new SimpleType TCompactProtocol New new SimpleType TIOStreamTransport VariableName objectoutputstreamVar CatchClause catch SimpleType TException VariableName texceptionVar ThrowStatement throw New new SimpleType IOException VariableName te 
ReturnStatement return New new SimpleType result_args 
ThisExpression this VariableName authorizationexceptionVar Operator = NullLiteral null 
ThisExpression this VariableName mapVar Operator = NullLiteral null 
ReturnStatement return ThisExpression this VariableName listVar Operator != NullLiteral null 
ReturnStatement return ThisExpression this VariableName intVar 
IfStatement if Operator ! VariableName booleanVar ThisExpression this VariableName listVar Operator = NullLiteral null 
ReturnStatement return New new SimpleType TopologyInfo ThisExpression this 
ThisExpression this VariableName listVar Operator = NullLiteral null 
ReturnStatement return New new SimpleType listBlobs_args 
ReturnStatement return New new SimpleType debug_args 
ReturnStatement return BooleanLiteral false 
IfStatement if Operator ! VariableName booleanVar ThisExpression this VariableName stringVar Operator = NullLiteral null 
ThisExpression this VariableName invalidtopologyexceptionVar Operator = VariableName invalidtopologyexceptionVar 
ThisExpression this VariableName invalidtopologyexceptionVar Operator = NullLiteral null 
ReturnStatement return ThisExpression this VariableName stringVar Operator != NullLiteral null 
ReturnStatement return ThisExpression this VariableName listblobsresultVar 
ReturnStatement return VariableName _thriftId 
TryStatement try MethodName write New new SimpleType TCompactProtocol New new SimpleType TIOStreamTransport VariableName objectoutputstreamVar CatchClause catch SimpleType TException VariableName texceptionVar ThrowStatement throw New new SimpleType IOException VariableName te 
ReturnStatement return ThisExpression this VariableName mapVar Operator != NullLiteral null 
IfStatement if VariableName ttransportVar Operator != NullLiteral null VariableName ttransportVar MethodName close VariableName ttransportVar Operator = NullLiteral null VariableName tprotocolVar Operator = NullLiteral null 
ReturnStatement return VariableName mapVar Operator == NullLiteral null Operator || StringLiteral stringLiteral MethodName equals VariableName mapVar MethodName get VariableName Sasl VariableName POLICY_NOPLAINTEXT ArrayType String[] ArrayInitializer arrayInitializer ArrayType String[] NumberLiteral numberLiteral 
ReturnStatement return VariableName objectVar Operator == NullLiteral null VariableName listVar MethodName size VariableName listVar MethodName size Operator + NumberLiteral numberLiteral 
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet EnhancedForStatement for SimpleType Node VariableName nodeVar VariableName groupVar MethodName outgoingNodes IfStatement if VariableName n Instanceof instanceof SimpleType PartitionNode VariableName setVar MethodName add SimpleType PartitionNode VariableName n ReturnStatement return VariableName setVar 
ReturnStatement return New new SimpleType ProjectionFactory VariableName factoryVar VariableName fieldsVar 
ReturnStatement return BooleanLiteral true 
ReturnStatement return MethodName partitionPersist VariableName statefactoryVar VariableName stateupdaterVar New new SimpleType Fields 
PrimitiveType int VariableName intVar MethodName objectToIndex VariableName listVar MethodName get VariableName intVar VariableName listVar MethodName size ReturnStatement return Name Arrays MethodName asList VariableName listVar MethodName get VariableName intVar 
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral 
TryStatement try ParameterizedType Map VariableName mapVar ParameterizedType Map Name JSONValue MethodName parseWithException VariableName stringVar ParameterizedType Map VariableName mapVar New new ParameterizedType LinkedHashMap VariableName parsed MethodName size EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName parsed MethodName entrySet VariableName packages MethodName put VariableName artifactToFilePath MethodName getKey New new SimpleType File VariableName artifactToFilePath MethodName getValue ReturnStatement return VariableName packages CatchClause catch SimpleType ParseException VariableName parseexceptionVar ThrowStatement throw New new SimpleType RuntimeException VariableName e 
ReturnStatement return VariableName longVar 
SimpleType ByteBuffer VariableName bytebufferVar Name ByteBuffer MethodName allocate VariableName byte[]Var VariableName length Operator + NumberLiteral numberLiteral VariableName bytebufferVar MethodName putShort PrimitiveType short VariableName intVar VariableName bytebufferVar MethodName put VariableName byte[]Var ReturnStatement return VariableName bytebufferVar 
SimpleType IBatchBolt VariableName ibatchboltVar VariableName mapVar MethodName get VariableName objectVar IfStatement if VariableName ibatchboltVar Operator == NullLiteral null VariableName ibatchboltVar Operator = MethodName newTransactionalBolt VariableName ibatchboltVar MethodName prepare VariableName mapVar VariableName topologycontextVar VariableName batchoutputcollectorimplVar VariableName objectVar VariableName mapVar MethodName put VariableName objectVar VariableName ibatchboltVar ReturnStatement return VariableName ibatchboltVar 
ReturnStatement return VariableName intVar 
IfStatement if Operator ! MethodName isStateInitialized Operator || Operator ! MethodName isRecovering Operator && VariableName booleanVar Name LOG MethodName debug StringLiteral stringLiteral VariableName longVar VariableName keyvaluestateVar MethodName commit VariableName longVar Name LOG MethodName debug StringLiteral stringLiteral 
ReturnStatement return VariableName tupleVar MethodName getLongByField VariableName stringVar 
VariableName listVar MethodName add VariableName intVar VariableName objectVar 
VariableName iserializerVar MethodName writeSpoutMsg VariableName spoutmsgVar MethodName logErrorStream 
ReturnStatement return Name Long MethodName compare Name Long MethodName parseLong VariableName stringVar MethodName substring NumberLiteral numberLiteral Name Long MethodName parseLong VariableName stringVar MethodName substring NumberLiteral numberLiteral 
ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap ParameterizedType Set VariableName setVar New new ParameterizedType HashSet VariableName setVar MethodName addAll VariableName stormtopologyVar MethodName get_bolts MethodName keySet VariableName setVar MethodName addAll VariableName stormtopologyVar MethodName get_spouts MethodName keySet EnhancedForStatement for SimpleType String VariableName stringVar VariableName setVar VariableName mapVar MethodName put Name Utils MethodName getGlobalStreamId VariableName id VariableName stringVar Name Thrift MethodName prepareFieldsGrouping Name Arrays MethodName asList StringLiteral stringLiteral ReturnStatement return VariableName mapVar 
ReturnStatement return New new SimpleType FileWriter VariableName fileVar 
ReturnStatement return New new SimpleType FileOutputStream VariableName fileVar 
IfStatement if VariableName drpcinvocationsclientVar Instanceof instanceof SimpleType DRPCInvocationsClient TryStatement try Name LOG MethodName info StringLiteral stringLiteral VariableName drpcinvocationsclientVar MethodName reconnectClient CatchClause catch SimpleType TException VariableName texceptionVar Name LOG MethodName error StringLiteral stringLiteral VariableName e2 
WhileStatement while VariableName booleanVar TryStatement try SimpleType MetricsTask VariableName metricstaskVar VariableName blockingqueueVar MethodName take VariableName imetricsconsumerVar MethodName handleDataPoints VariableName task MethodName getTaskInfo VariableName task MethodName getDataPoints CatchClause catch SimpleType InterruptedException VariableName interruptedexceptionVar BreakStatement break CatchClause catch SimpleType Throwable VariableName throwableVar Name LOG MethodName error StringLiteral stringLiteral VariableName t 
TryStatement try PrimitiveType long VariableName longVar MethodName computeWaterMarkTs IfStatement if VariableName waterMarkTs Operator > VariableName longVar ThisExpression this VariableName windowmanagerVar MethodName add New new ParameterizedType WaterMarkEvent VariableName waterMarkTs VariableName longVar Operator = VariableName waterMarkTs CatchClause catch SimpleType Throwable VariableName throwableVar Name LOG MethodName error StringLiteral stringLiteral VariableName th ThrowStatement throw VariableName th 
SimpleType String VariableName stringVar Name CgroupUtils MethodName readFileByLine Name CgroupUtils MethodName getDir ThisExpression this VariableName stringVar VariableName stringVar MethodName get NumberLiteral numberLiteral ArrayType String[] VariableName string[]Var VariableName stringVar MethodName split StringLiteral stringLiteral ArrayType Long[] VariableName long[]Var ArrayType Long[] VariableName string[]Var VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName long[]Var VariableName length VariableName i Operator ++ VariableName long[]Var VariableName i Operator = Name Long MethodName parseLong VariableName string[]Var VariableName i ReturnStatement return VariableName long[]Var 
ReturnStatement return VariableName SubSystemType VariableName freezer 
ReturnStatement return VariableName topologylockVar 
VariableName messageprocessorchainVar MethodName addEventListener VariableName eventlistenerVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName applicationVar 
ThisExpression this VariableName propertiesVar Operator = VariableName propertiesVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName string[]Var 
ReturnStatement return VariableName stringVar 
IfStatement if VariableName nodeVar Operator == NullLiteral null ThrowStatement throw New new SimpleType RuntimeException Name String MethodName format StringLiteral stringLiteral VariableName stringVar 
ReturnStatement return VariableName stringVar 
SimpleType Calendar VariableName calendarVar Name Calendar MethodName getInstance ReturnStatement return Name CommonUtil MethodName getMonthString VariableName calendarVar 
SimpleType String VariableName stringVar VariableName StratosConstants VariableName DOMAIN_VALIDATOR_INFO_PATH Operator + VariableName RegistryConstants VariableName PATH_SEPARATOR VariableName stringVar VariableName RegistryConstants VariableName PATH_SEPARATOR VariableName StratosConstants VariableName VALIDATION_KEY_RESOURCE_NAME IfStatement if VariableName userregistryVar MethodName resourceExists VariableName stringVar SimpleType Resource VariableName resourceVar VariableName userregistryVar MethodName get VariableName stringVar SimpleType String VariableName stringVar VariableName resource MethodName getProperty StringLiteral stringLiteral IfStatement if VariableName actualSuccessKey Operator != NullLiteral null Operator && VariableName stringVar Operator != NullLiteral null Operator && VariableName actualSuccessKey MethodName trim MethodName equals VariableName stringVar MethodName trim ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName listVar 
ReturnStatement return MethodName filters Name Multimaps MethodName forMap MethodName checkNotNull VariableName mapVar StringLiteral stringLiteral 
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this 
ReturnStatement return VariableName mapVar 
IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName setVar MethodName add VariableName stringVar ReturnStatement return ThisExpression this 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
SimpleType ConfigurationContext VariableName configurationcontextVar Name CarbonUIServiceComponent MethodName getConfigurationContextService MethodName getServerConfigContext ReturnStatement return Name CarbonUtils MethodName getServerURL VariableName serverconfigurationserviceVar VariableName configurationcontextVar 
ReturnStatement return ArrayType Object[] ArrayInitializer arrayInitializer 
TryStatement try IfStatement if VariableName connectionVar Operator != NullLiteral null VariableName connectionVar MethodName close CatchClause catch SimpleType SQLException VariableName sqlexceptionVar 
ReturnStatement return Name ResultSetUtil MethodName columnDisplaySize MethodName getColumnType VariableName intVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
IfStatement if VariableName objectVar Instanceof instanceof SimpleType Utf8 SimpleType Utf8 VariableName utf8Var SimpleType Utf8 VariableName objectVar ReturnStatement return VariableName utf8 MethodName toString ReturnStatement return VariableName objectVar MethodName toString 
PrimitiveType int VariableName intVar NumberLiteral numberLiteral PrimitiveType long VariableName longVar WhileStatement while VariableName intVar Operator < VariableName intVar Operator && VariableName longVar Operator = VariableName in MethodName skip VariableName intVar Operator - VariableName intVar Operator != NumberLiteral numberLiteral VariableName intVar Operator += VariableName longVar IfStatement if VariableName intVar Operator < NumberLiteral numberLiteral ThrowStatement throw New new SimpleType EOFException ReturnStatement return VariableName intVar 
PrimitiveType int VariableName intVar VariableName datainputVar MethodName readInt IfStatement if VariableName intVar Operator > VariableName byte[]Var VariableName intVar VariableName byte[]Var Operator = ArrayType byte[] VariableName intVar VariableName intVar Operator = NumberLiteral numberLiteral VariableName intVar Operator = VariableName intVar VariableName datainputVar MethodName readFully VariableName byte[]Var VariableName intVar VariableName intVar 
VariableName count Operator = NumberLiteral numberLiteral 
ReturnStatement return ThisExpression this VariableName tuplecomparatorVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar Operator != NullLiteral null 
ReturnStatement return ThisExpression this VariableName sortspec[]Var 
ReturnStatement return New new SimpleType JsonPrimitive VariableName optypeVar MethodName name 
ReturnStatement return Name Objects MethodName hashCode VariableName expr[]Var 
VariableName intVar Operator = MethodName checkChar CharacterLiteral charLiteral VariableName stringVar VariableName intVar VariableName intVar Operator = MethodName checkTypeArgument VariableName stringVar VariableName intVar WhileStatement while MethodName getChar VariableName stringVar VariableName intVar Operator != CharacterLiteral charLiteral VariableName intVar Operator = MethodName checkTypeArgument VariableName stringVar VariableName intVar ReturnStatement return VariableName intVar Operator + NumberLiteral numberLiteral 
IfStatement if VariableName intVar Operator != VariableName intVar Operator || VariableName intVar Operator & VariableName intVar Operator | VariableName intVar VariableName intVar VariableName intVar Operator == NumberLiteral numberLiteral ThrowStatement throw New new SimpleType IllegalArgumentException VariableName intVar Operator = VariableName intVar SimpleType SignatureVisitor VariableName signaturevisitorVar VariableName signaturevisitorVar Operator == NullLiteral null NullLiteral null VariableName signaturevisitorVar MethodName visitParameterType ReturnStatement return New new SimpleType CheckSignatureAdapter VariableName intVar VariableName signaturevisitorVar 
ArrayType char[] VariableName char[]Var VariableName stringVar MethodName toCharArray ReturnStatement return MethodName getType VariableName char[]Var VariableName stringVar MethodName indexOf CharacterLiteral charLiteral Operator + NumberLiteral numberLiteral 
ThisExpression this VariableName intVar Operator = VariableName intVar 
IfStatement if VariableName objectVar Instanceof instanceof SimpleType Type ReturnStatement return MethodName mapType SimpleType Type VariableName objectVar IfStatement if VariableName objectVar Instanceof instanceof SimpleType Handle SimpleType Handle VariableName handleVar SimpleType Handle VariableName objectVar ReturnStatement return New new SimpleType Handle VariableName h MethodName getTag MethodName mapType VariableName h MethodName getOwner MethodName mapMethodName VariableName h MethodName getOwner VariableName h MethodName getName VariableName h MethodName getDesc MethodName mapMethodDesc VariableName h MethodName getDesc ReturnStatement return VariableName objectVar 
IfStatement if NullLiteral null Operator == VariableName listVar Name LOG MethodName error StringLiteral stringLiteral ReturnStatement return NullLiteral null Modifier final ParameterizedType List VariableName listVar New new ParameterizedType ArrayList EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar Name Collections MethodName addAll VariableName listVar VariableName qid MethodName split StringLiteral stringLiteral ReturnStatement return VariableName listVar 
SimpleType QueuedThreadPool VariableName queuedthreadpoolVar SimpleType QueuedThreadPool VariableName serverVar MethodName getThreadPool VariableName queuedthreadpoolVar MethodName setMinThreads VariableName intVar VariableName queuedthreadpoolVar MethodName setMaxThreads VariableName intVar 
ReturnStatement return Name DatumFactory MethodName createFloat8 PrimitiveType double VariableName timemetaVar MethodName getCenturyOfEra 
ReturnStatement return Name DatumFactory MethodName createFloat8 PrimitiveType double VariableName timemetaVar VariableName monthOfYear Operator - NumberLiteral numberLiteral Operator / NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral 
VariableName methodvisitorVar MethodName visitMethodInsn VariableName Opcodes VariableName INVOKEVIRTUAL Name Type MethodName getInternalName VariableName classVar VariableName stringVar MethodName getMethodDescription VariableName classVar VariableName class[]Var 
SuperMethodInvocation super MethodName finalize 
ReturnStatement return ThisExpression this VariableName schemaVar 
ReturnStatement return New new SimpleType PlanString ThisExpression this MethodName appendTitle VariableName booleanVar StringLiteral stringLiteral StringLiteral stringLiteral MethodName appendTitle VariableName stringVar 
VariableName mapVar MethodName put Name ObjectUtils MethodName identityToString VariableName exprVar VariableName stringVar 
VariableName stackVar MethodName push VariableName havingnodeVar SimpleType RESULT VariableName resultVar MethodName visit VariableName contextVar VariableName logicalplanVar VariableName queryblockVar VariableName havingnodeVar MethodName getChild VariableName stackVar VariableName stackVar MethodName pop ReturnStatement return VariableName resultVar 
ReturnStatement return SimpleType T ThisExpression this VariableName evalnodeVar 
IfStatement if VariableName intVar Operator < VariableName listVar MethodName size ReturnStatement return VariableName listVar MethodName get VariableName intVar IfStatement if VariableName intVar Operator == VariableName listVar MethodName size ReturnStatement return VariableName evalnodeVar ThrowStatement throw New new SimpleType ArrayIndexOutOfBoundsException VariableName intVar 
PrimitiveType int VariableName intVar NumberLiteral numberLiteral EnhancedForStatement for SimpleType Boolean VariableName booleanVar VariableName linkedhashmapVar MethodName values IfStatement if VariableName flag VariableName intVar Operator ++ ReturnStatement return StringLiteral stringLiteral Operator + VariableName linkedhashmapVar MethodName size StringLiteral stringLiteral VariableName intVar 
ReturnStatement return Name AlgebraicUtil MethodName containSingleVar VariableName evalnodeVar Operator && Name AlgebraicUtil MethodName isIndexableOperator VariableName evalnodeVar 
ReturnStatement return StringLiteral stringLiteral 
ReturnStatement return VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral StringLiteral stringLiteral 
ReturnStatement return MethodName hashCode VariableName byte[]Var VariableName byte[]Var VariableName length 
ArrayType byte[][] VariableName byte[][]Var ArrayType byte[][] VariableName intVar Operator + NumberLiteral numberLiteral PrimitiveType int VariableName intVar NumberLiteral numberLiteral ParameterizedType Iterable VariableName iterableVar MethodName iterateOnSplits VariableName byte[]Var VariableName byte[]Var VariableName booleanVar VariableName intVar IfStatement if VariableName iterableVar Operator == NullLiteral null ReturnStatement return NullLiteral null EnhancedForStatement for ArrayType byte[] VariableName byte[]Var VariableName iterableVar VariableName byte[][]Var VariableName intVar Operator ++ Operator = VariableName elem ReturnStatement return VariableName byte[][]Var 
ReturnStatement return VariableName byteVar 
ReturnStatement return VariableName longVar 
SimpleType Builder VariableName builderVar Name PlanLocalResourcesProto MethodName newBuilder EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName mapVar MethodName entrySet SimpleType PlanLocalResource VariableName planlocalresourceVar MethodName convertLocalResourceToPlanLocalResource VariableName entry MethodName getKey VariableName entry MethodName getValue VariableName builderVar MethodName addLocalResources VariableName plr ReturnStatement return VariableName builderVar MethodName build 
ReturnStatement return VariableName datasourcetypeVar 
ReturnStatement return MethodName getDAGStatus NullLiteral null 
ReturnStatement return StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral VariableName processordescriptorVar MethodName getClassName StringLiteral stringLiteral 
ThisExpression this VariableName credentialsVar Operator = VariableName credentialsVar ReturnStatement return ThisExpression this 
VariableName listVar MethodName add StringLiteral stringLiteral VariableName listVar MethodName add StringLiteral stringLiteral Operator + VariableName TezConstants VariableName TEZ_CONTAINER_LOG4J_PROPERTIES_FILE VariableName listVar MethodName add StringLiteral stringLiteral Operator + VariableName YarnConfiguration VariableName YARN_APP_CONTAINER_LOG_DIR StringLiteral stringLiteral VariableName ApplicationConstants VariableName LOG_DIR_EXPANSION_VAR VariableName listVar MethodName add StringLiteral stringLiteral Operator + VariableName TezConstants VariableName TEZ_ROOT_LOGGER_NAME StringLiteral stringLiteral VariableName stringVar StringLiteral stringLiteral VariableName TezConstants VariableName TEZ_CONTAINER_LOGGER_NAME 
IfStatement if VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName isEmpty ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral Operator + StringLiteral stringLiteral VariableName stringVar Name LOG MethodName info StringLiteral stringLiteral Operator + StringLiteral stringLiteral VariableName stringVar SimpleType Credentials VariableName credentialsVar Name Credentials MethodName readTokenStorageFile New new SimpleType Path StringLiteral stringLiteral Operator + VariableName stringVar VariableName configurationVar VariableName credentialsVar MethodName mergeAll VariableName credentialsVar 
ReturnStatement return Name FileSystem MethodName create VariableName filesystemVar VariableName pathVar New new SimpleType FsPermission VariableName fspermissionVar 
ReturnStatement return VariableName jobconfVar 
ReturnStatement return VariableName credentialsVar 
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral Operator + MethodName getType 
ReturnStatement return VariableName listVar 
ReturnStatement return ThisExpression this VariableName edgepropertyVar 
VariableName eventhandlerVar MethodName handle VariableName eventVar 
MethodName checkAndThrowIfDone SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName add VariableName stringVar VariableName statechangenotifierVar MethodName registerForVertexUpdates VariableName stringVar VariableName setVar ThisExpression this 
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName add VariableName stringVar VariableName statechangenotifierVar MethodName registerForVertexUpdates VariableName stringVar VariableName setVar ThisExpression this 
ReturnStatement return ThisExpression this VariableName taskattemptVar MethodName getID 
Modifier final SimpleType Clock VariableName clockVar VariableName appcontextVar MethodName getClock Modifier final SimpleType HistoryEventHandler VariableName historyeventhandlerVar VariableName appcontextVar MethodName getHistoryHandler SimpleType ContainerStoppedEvent VariableName containerstoppedeventVar New new SimpleType ContainerStoppedEvent VariableName containeridVar VariableName clockVar MethodName getTime VariableName intVar VariableName appcontextVar MethodName getApplicationAttemptId VariableName historyeventhandlerVar MethodName handle New new SimpleType DAGHistoryEvent VariableName appcontextVar MethodName getCurrentDAGID VariableName containerstoppedeventVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return Name String MethodName valueOf VariableName intVar Operator + VariableName stringVar StringLiteral stringLiteral VariableName stringVar 
IfStatement if VariableName booleanVar ReturnStatement return VariableName booleanVar Operator = BooleanLiteral true MethodName finish VariableName out MethodName close 
ThisExpression this VariableName configurationVar MethodName setFloat VariableName TezRuntimeConfiguration VariableName TEZ_RUNTIME_SHUFFLE_MERGE_PERCENT VariableName floatVar ReturnStatement return ThisExpression this 
IfStatement if VariableName objectVar Operator != NullLiteral null ReturnStatement return MethodName getAttribute SimpleType String VariableName objectVar ReturnStatement return NullLiteral null 
SimpleType StringManager VariableName stringmanagerVar VariableName hashtableVar MethodName get VariableName stringVar IfStatement if VariableName stringmanagerVar Operator == NullLiteral null VariableName stringmanagerVar Operator = New new SimpleType StringManager VariableName stringVar VariableName hashtableVar MethodName put VariableName stringVar VariableName stringmanagerVar ReturnStatement return VariableName stringmanagerVar 
ReturnStatement return VariableName iteratorVar MethodName hasNext 
VariableName intVar Operator = VariableName listVar MethodName remove VariableName listVar MethodName size Operator - NumberLiteral numberLiteral WhileStatement while VariableName intVar Operator -- Operator > NumberLiteral numberLiteral SimpleType Node VariableName nodeVar MethodName popNode VariableName c MethodName jjtSetParent VariableName nodeVar VariableName nodeVar MethodName jjtAddChild VariableName c VariableName intVar VariableName nodeVar MethodName jjtClose MethodName pushNode VariableName nodeVar VariableName booleanVar Operator = BooleanLiteral true 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
PrimitiveType long VariableName longVar MethodName getContentLengthLong IfStatement if VariableName longVar Operator < VariableName Integer VariableName MAX_VALUE ReturnStatement return PrimitiveType int VariableName longVar ReturnStatement return Operator - NumberLiteral numberLiteral 
ReturnStatement return VariableName arraylistVar Operator != NullLiteral null VariableName arraylistVar MethodName size NumberLiteral numberLiteral 
MethodName fireBeforeWriteResponseBodyEvent VariableName printwriterVar MethodName println VariableName objectVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return ThisExpression this VariableName stringVar 
ReturnStatement return VariableName stringVar 
IfStatement if VariableName responseVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalStateException VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral ReturnStatement return VariableName responseVar MethodName getCharacterEncoding 
IfStatement if VariableName responseVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalStateException VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral VariableName responseVar MethodName setCharacterEncoding VariableName stringVar 
ReturnStatement return VariableName Constants VariableName MAJOR_VERSION 
ReturnStatement return VariableName filterdefVar MethodName getFilterName 
IfStatement if Name SecurityUtil MethodName isPackageProtectionEnabled ReturnStatement return SimpleType Dynamic MethodName doPrivileged StringLiteral stringLiteral ArrayType Class[] ArrayInitializer arrayInitializer ArrayType Object[] ArrayInitializer arrayInitializer ReturnStatement return VariableName applicationcontextVar MethodName addServlet VariableName stringVar VariableName servletVar 
ReturnStatement return VariableName servletconfigVar MethodName getInitParameterNames 
MethodName parseParameters ReturnStatement return VariableName mapVar 
SimpleType String VariableName stringVar ThisExpression this VariableName stringVar ThisExpression this VariableName stringVar Operator = VariableName stringVar VariableName support MethodName firePropertyChange StringLiteral stringLiteral VariableName stringVar VariableName stringVar 
SynchronizedStatement synchronized VariableName objectVar ReturnStatement return VariableName stringVar 
ReturnStatement return Operator ! MethodName getValue MethodName length Operator == NumberLiteral numberLiteral 
ReturnStatement return VariableName charVar Operator == CharacterLiteral charLiteral Operator || VariableName charVar Operator == CharacterLiteral charLiteral Operator || VariableName charVar Operator == CharacterLiteral charLiteral Operator || VariableName charVar Operator == CharacterLiteral charLiteral 
ThisExpression this VariableName messagelistenerVar Operator = VariableName messagelistenerVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return MethodName getAddress 
ReturnStatement return VariableName membershipVar MethodName hasMembers 
ReturnStatement return VariableName NonBlockingCoordinator VariableName byte[]Var 
ReturnStatement return VariableName intVar 
PrimitiveType int VariableName intVar VariableName intVar Operator + NumberLiteral numberLiteral IfStatement if VariableName intVar Operator > VariableName byte[]Var VariableName length MethodName expand VariableName intVar VariableName byte[]Var VariableName intVar Operator = VariableName byteVar VariableName intVar Operator = VariableName intVar ReturnStatement return BooleanLiteral true 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName intVar 
SimpleType Principal VariableName principalVar ThisExpression this VariableName principalVar ThisExpression this VariableName principalVar Operator = VariableName principalVar VariableName propertychangesupportVar MethodName firePropertyChange StringLiteral stringLiteral VariableName principalVar ThisExpression this VariableName principalVar 
ReturnStatement return NullLiteral null 
ReturnStatement return VariableName stringVar 
VariableName booleanVar Operator = BooleanLiteral true 
VariableName nodesVar MethodName visit New new SimpleType ScriptingVarVisitor 
VariableName expressionVar MethodName setBeginJavaLine VariableName servletwriterVar MethodName getJavaLine VariableName servletwriterVar MethodName printin StringLiteral stringLiteral VariableName servletwriterVar MethodName printMultiLn VariableName expressionVar MethodName getText VariableName servletwriterVar MethodName println StringLiteral stringLiteral VariableName expressionVar MethodName setEndJavaLine VariableName servletwriterVar MethodName getJavaLine 
MethodName findStream MethodName close 
ReturnStatement return VariableName booleanVar 
ReturnStatement return ThisExpression this VariableName stringVar 
ReturnStatement return VariableName setVar 
PrimitiveType int VariableName intVar MethodName size IfStatement if VariableName intVar Operator <= NumberLiteral numberLiteral ThrowStatement throw New new SimpleType EmptyStackException ReturnStatement return MethodName get VariableName intVar Operator - NumberLiteral numberLiteral 
MethodName addRule VariableName stringVar New new SimpleType CallParamRule VariableName intVar 
MethodName addRule VariableName stringVar New new SimpleType SetPropertiesRule 
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return New new ParameterizedType HashMap ReturnStatement return MethodName parse VariableName stringVar MethodName toCharArray VariableName charVar 
ThisExpression this VariableName longVar Operator = VariableName longVar 
ReturnStatement return MethodName getIdle 
IfStatement if VariableName intVar Operator <= NumberLiteral numberLiteral ReturnStatement return NumberLiteral numberLiteral PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName intVar WhileStatement while VariableName intVar Operator = MethodName read Operator != Operator - NumberLiteral numberLiteral VariableName byte[]Var VariableName intVar Operator ++ Operator = PrimitiveType byte VariableName intVar VariableName intVar Operator ++ IfStatement if VariableName intVar Operator == CharacterLiteral charLiteral Operator || VariableName intVar Operator == VariableName intVar BreakStatement break ReturnStatement return VariableName intVar Operator > NumberLiteral numberLiteral VariableName intVar Operator - NumberLiteral numberLiteral 
ReturnStatement return VariableName booleanVar Operator - NumberLiteral numberLiteral VariableName intVar 
IfStatement if VariableName values Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return VariableName values MethodName keys 
ReturnStatement return VariableName attributeInfo 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName longVar Operator = VariableName longVar 
ThisExpression this VariableName intVar Operator = VariableName intVar 
SimpleType Throwable VariableName throwableVar VariableName servletexceptionVar SimpleType Throwable VariableName throwableVar NullLiteral null PrimitiveType int VariableName intVar NumberLiteral numberLiteral DoStatement do VariableName intVar Operator ++ VariableName throwableVar Operator = VariableName throwableVar MethodName getCause IfStatement if VariableName throwableVar Operator != NullLiteral null VariableName throwableVar Operator = VariableName throwableVar VariableName throwableVar Operator != NullLiteral null Operator && VariableName intVar Operator < NumberLiteral numberLiteral ReturnStatement return VariableName throwableVar 
ReturnStatement return VariableName stringVar MethodName regionMatches VariableName intVar VariableName stringVar NumberLiteral numberLiteral VariableName stringVar MethodName length 
ArrayType Member[] VariableName member[]Var MethodName getMembers ArrayType String[] VariableName string[]Var IfStatement if VariableName member[]Var Operator != NullLiteral null VariableName string[]Var Operator = ArrayType String[] VariableName member[]Var VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName member[]Var VariableName length VariableName i Operator ++ VariableName string[]Var VariableName i Operator = VariableName member[]Var VariableName i MethodName toString VariableName string[]Var Operator = ArrayType String[] NumberLiteral numberLiteral ReturnStatement return VariableName string[]Var 
ThisExpression this VariableName membershipserviceVar Operator = VariableName membershipserviceVar ThisExpression this VariableName membershipserviceVar MethodName setMembershipListener ThisExpression this 
ReturnStatement return MethodName getString 
IfStatement if VariableName booleanVar ReturnStatement return StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral IfStatement if VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName length Operator == NumberLiteral numberLiteral ReturnStatement return StringLiteral stringLiteral ReturnStatement return StringLiteral stringLiteral Operator + Name Float MethodName valueOf VariableName stringVar MethodName toString StringLiteral stringLiteral 
VariableName visitorVar MethodName visit ThisExpression this 
VariableName visitorVar MethodName visit ThisExpression this 
ReturnStatement return ThisExpression this VariableName stringVar 
SimpleType Runnable VariableName runnableVar NullLiteral null WhileStatement while VariableName runnableVar Operator = VariableName sslengineVar MethodName getDelegatedTask Operator != NullLiteral null VariableName runnableVar MethodName run ReturnStatement return VariableName sslengineVar MethodName getHandshakeStatus 
ReturnStatement return VariableName javaservicedescVar MethodName getOperationByElementQName VariableName qnameVar 
VariableName httpservletresponseVar MethodName setStatus VariableName intVar VariableName stringVar 
ReturnStatement return VariableName longVar 
SimpleType Definition VariableName definitionVar MethodName readWsdl VariableName uriVar MethodName addImportsFromDefinition VariableName definitionVar ReturnStatement return VariableName xmlschemacollectionVar 
ReturnStatement return VariableName objectVar Instanceof instanceof SimpleType SOAPMessageContext Operator && MethodName equals SimpleType SOAPMessageContext VariableName objectVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return MethodName getThreadContext MethodName lookup VariableName stringVar 
MethodName setStaticValue VariableName resourceVar NullLiteral null VariableName objectVar 
ThrowStatement throw New new SimpleType UnsupportedOperationException 
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = New new ParameterizedType ArrayList ReturnStatement return VariableName listVar 
ReturnStatement return VariableName activationspecVar 
ReturnStatement return MethodName type VariableName classVar MethodName getName 
ThisExpression this VariableName namedmethodVar Operator = VariableName namedmethodVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return MethodName injectionTarget VariableName classVar MethodName getName VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this 
ReturnStatement return VariableName validatorVar 
ReturnStatement return VariableName stringVar 
VariableName textmapVar MethodName set VariableName text[]Var 
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return StringLiteral stringLiteral ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ThisExpression this VariableName objectVar Operator = VariableName objectVar 
ReturnStatement return New new SimpleType Difference 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return New new SimpleType JavaClass 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName objectVar Operator = VariableName objectVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
IfStatement if VariableName keyedcollectionVar Operator == NullLiteral null VariableName keyedcollectionVar Operator = New new ParameterizedType KeyedCollection ReturnStatement return ThisExpression this VariableName keyedcollectionVar MethodName toMap 
IfStatement if VariableName keyedcollectionVar Operator == NullLiteral null VariableName keyedcollectionVar Operator = New new ParameterizedType KeyedCollection ReturnStatement return ThisExpression this VariableName keyedcollectionVar 
ReturnStatement return VariableName environmenttypeVar 
ReturnStatement return VariableName objectVar 
ThisExpression this VariableName webservicesecuritytypeVar Operator = VariableName webservicesecuritytypeVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName optimisticlockingVar Operator = VariableName optimisticlockingVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName cachepolicyconfotherVar Operator = VariableName cachepolicyconfotherVar 
ReturnStatement return VariableName stringVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ThisExpression this VariableName webVar Operator = VariableName webVar 
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = New new ParameterizedType ArrayList ReturnStatement return ThisExpression this VariableName listVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName pminuseVar 
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = New new ParameterizedType ArrayList ReturnStatement return ThisExpression this VariableName listVar 
ReturnStatement return VariableName cookiepropertiesVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = New new ParameterizedType ArrayList ReturnStatement return ThisExpression this VariableName listVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName bigintegerVar 
ReturnStatement return VariableName bigintegerVar 
ReturnStatement return VariableName distributeddestinationconnectionVar 
ThisExpression this VariableName bigintegerVar Operator = VariableName bigintegerVar 
ReturnStatement return VariableName textmapVar MethodName get 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return New new ParameterizedType JAXBElement VariableName qnameVar TypeLiteral class NullLiteral null VariableName javawsdlmappingVar 
ReturnStatement return VariableName orderingVar 
ReturnStatement return VariableName textmapVar MethodName get 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName booleanVar 
ThisExpression this VariableName stringVar Operator = VariableName stringVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName preremoveVar 
ReturnStatement return VariableName columnVar 
ThisExpression this VariableName accesstypeVar Operator = VariableName accesstypeVar 
ReturnStatement return VariableName booleanVar 
ReturnStatement return VariableName postupdateVar 
ReturnStatement return VariableName groupsequencetypeVar 
ReturnStatement return VariableName stringVar MethodName endsWith StringLiteral stringLiteral Operator || VariableName stringVar MethodName endsWith StringLiteral stringLiteral 
MethodName pipe VariableName processVar MethodName getInputStream VariableName System VariableName outputstreamVar MethodName pipe VariableName processVar MethodName getErrorStream VariableName System VariableName err 
IfStatement if NullLiteral null Operator == VariableName char[]Var ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral ReturnStatement return New new SimpleType String VariableName char[]Var 
ThisExpression this VariableName messageendpointVar Operator = VariableName messageendpointVar 
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar 
ReturnStatement return VariableName floatVar 
IfStatement if VariableName doubleVar Operator <= NumberLiteral numberLiteral Operator || VariableName doubleVar Operator > NumberLiteral numberLiteral ThrowStatement throw Name MathRuntimeException MethodName createIllegalArgumentException StringLiteral stringLiteral VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar 
ReturnStatement return VariableName longVar 
ReturnStatement return NullLiteral null 
ReturnStatement return VariableName transactionVar 
IfStatement if VariableName objectVar Operator == NullLiteral null VariableName objectVar Operator = MethodName createRegistryId VariableName primaryKey VariableName deploymentID VariableName container ReturnStatement return VariableName objectVar 
ReturnStatement return VariableName listVar 
ReturnStatement return VariableName listVar 
ReturnStatement return VariableName synchronizeddescriptivestatisticsVar MethodName getMean 
VariableName threadlocalVar MethodName remove 
MethodName add VariableName classloaderVar VariableName collectionVar VariableName setVar 
ReturnStatement return TypeLiteral class 
SwitchStatement switch VariableName ejbreferenceVar MethodName getRefType SwitchCase case VariableName LOCAL ReturnStatement return VariableName EjbResolver VariableName Type VariableName LOCAL SwitchCase case VariableName REMOTE ReturnStatement return VariableName EjbResolver VariableName Type VariableName REMOTE SwitchCase case VariableName UNKNOWN ReturnStatement return VariableName EjbResolver VariableName Type VariableName UNKNOWN SwitchCase default ReturnStatement return VariableName EjbResolver VariableName Type VariableName UNKNOWN 
ReturnStatement return MethodName getDefaultLocale MethodName equals VariableName localeVar 
IfStatement if Operator ! MethodName isDConfigBeanVersionSupported VariableName dconfigbeanversiontypeVar ThrowStatement throw New new SimpleType DConfigBeanVersionUnsupportedException StringLiteral stringLiteral Operator + VariableName dconfigbeanversiontypeVar 
ReturnStatement return VariableName listVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return VariableName stringVar 
ReturnStatement return New new SimpleType Container 
VariableName openejbVar MethodName setTransactionManager VariableName service SuperMethodInvocation super MethodName endElement VariableName stringVar VariableName stringVar VariableName stringVar 
